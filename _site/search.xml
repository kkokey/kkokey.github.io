<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[[도서리뷰] 핸즈온 데이터 시각화]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2022/12/30/Hands-on/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다.요즘은 많은 영역에서 데이터 시각화를 다루고 있어 많은 직군에서 활용하는 것 같습니다.여러분은 데이터 시각화 하면 어떤 이유로 만들려고 하시나요?내부 사업팀의 설득을 위해?성과 공유를 위한 자료를 위해?데이터의 현재 상태에 대한 공유?사실 무엇이 되었든 데이터를 제대로 정리하는게 중요하고 무엇을 보여줄 것인지 기준점을 잡는 것이 중요할 것입니다.때에 따라서는 효과적인 툴을 사용해 적은 노력으로도 큰 효과를 낼 수 있도록 하는 것도 중요할 것입니다.그런면에서 이책 핸드온 데이터 시각화는 높은 활용도를 가진 스킬들을 제안합니다.데이터를 다루는데 정말 기초적이고 절대 빠질 수 없는 툴인 스프레드 시트를 처음 소개 하고 있다는 점에서 저는 제대로 현업에서 쓸 수 있게 소개하고 있다는 생각이 들었습니다.제 주변에더 데이터를 정말 기가 막히게 정리하시는 분이 계시는데 그분은 거의 모든 것을 스프레드 시트 하나로 정리합니다.아주 가끔 차트가 필요한 경우에만 다른 툴을 활용해 차트를 만들어내죠.그만큼 활용도가 높은 툴이라고 평소에도 생각을 가지고 있었는데 이렇게 책에서 소개하는 내용을 보니 더욱더 신뢰감이 생겼습니다.그 이후에는 데이터를 정리하는 방식 데이터를 풀어서 설명하는 방식 - 일종의 스토리웨이죠.그리고 풀어낸 데이터를 가지고 차트나 도구들을 활용해 한눈에 볼 수 있도록 하는 것.거기에 더해서 코드 템플릿까지 제공하고 있어 평소에 생각하고 있는 데이터 시각화에 필요한 많은 것들을 제공해주고 있습니다.만약 데이터 시각화를 어떻게 하는지 잘 모르겠다거나 하기는 해야 하는데 해본적이 없어 너무 어렵다면 이 책이 도움이 될꺼라 생각합니다.이 리뷰 내용은 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.책의 내용이 궁금하다면 이곳을 통해 확인할 수 있습니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> Developer </tag>
        
          <tag> 데이터시각화 </tag>
        
          <tag> 김태헌 </tag>
        
          <tag> 잭 </tag>
        
          <tag> 도허티 </tag>
        
          <tag> 일리야 </tag>
        
          <tag> 일라얀코우 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 데이터로 전문가처럼 말하기]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2022/10/02/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-%EC%A0%84%EB%AC%B8%EA%B0%80%EC%B2%98%EB%9F%BC-%EB%A7%90%ED%95%98%EA%B8%B0/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다.여러분은 데이터를 전달할 때 어떤 형태로 전달하시나요?데이터를 수집하고 관리하는 것도 중요하지만 일을 하면서 다른 사람과 데이터를 가지고 잘 소통하는 것도 참 중요합니다.데이터를 어떻게 전달하느냐에 따라 굉장히 잘 기억에 남을 수도 있고 내가 전달하고자 하는 핵심적인 내용을 더 효과적으로 전달할 수 있게 되죠.데이터를 잘 전달하는 방법중에 대표적인 것 중 하나가 바로 데이터 시각화 입니다.적절한 기준과 적절한 표현 방법을 사용하여 전달하면 지금 현재 상태와 앞으로 일어날 일들에 대해 꼼꼼하게 확인하고 체크할 수 있습니다.이 책에서는 데이터를 제대로 수집하는 방법에 대해 먼저 다룹니다.데이터라는 것은 상황과 형태에 따라 제대로 수집하는 방법이 달라지는데 그 부분에 대해서 친절하게 설명해 주고 있다는 생각이 들었습니다.데이터를 제대로 수집 했다면 제대로 표현을 할 수 있어야겠죠.데이터의 표현 방법에 있어서는 정확성과 시인성 그리고 그 기준에 대해 다룹니다.어떤 데이터는 표로 정확한 수치를 표현하는 것이 좋거나 막대 그래프나 라인 그래프처럼 전체적인 양상이나 비교할 수 있도록 시각화된 데이터가 더 좋은 데이터들이 있는데 해당 내용들이 언제 필요하고 언제 필요 없는지에 대해 자세하게 설명 해줍니다.그 외에도 데이터를 공유하는 대상에 따라 어떤 데이터를 어떤 형태로 보여주는 것이 효과적인 데이터 커뮤니케이션 방법인지 상세하게 기술하고 있어 데이터를 가지고 다른 사람과 소통해야 하는 분에게는 꽤 좋은 참고서가 될 것이라고 생각이 듭니다.이 리뷰 내용은 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.책의 내용이 궁금하다면 이곳을 통해 확인할 수 있습니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> Developer </tag>
        
          <tag> 데이터 </tag>
        
          <tag> 말하기 </tag>
        
          <tag> 이한호 </tag>
        
          <tag> 칼올친 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 이것이 안드로이드다 with 코틀린]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2022/07/22/this-is-android/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다.개발자 여러분 오늘도 안녕하신가요?또는 개발자가 아닌 여러분은 어떠신가요?요즘은 정말 많은 사람들이 개발을 배우고 손쉽게 앱을 만들 수 있는 시대인 듯 합니다.물론 그게 어렵다고 말씀해주시는 분들도 계시고 같은 개발자라도 모바일 개발을 하려면 어떤 것부터 해야 할지 막막해 하시는 분들도 많은 것 같습니다.오늘은 제가 이런 분들에게 도움이 될만한 책을 하나 소개하려고 합니다.국내 안드로이드 개발 서적으로 무려 3판째 발행인 “이것이 안드로이드다 with 코들린” 이라는 책입니다.IT, 개발쪽은 익히 알고 계시겠지만 굉장히 빠르게 흘러가는 곳입니다.그만큼 새로운 언어가 나오고 새로운 문화나 방법론이 정착되는 곳이죠.그런 의미로 보면 책이라는 것이 나오기 위해서는 꽤 긴 시간이 필요한데 빠른 IT업계의 속도를 따라가기에는 굉장히 벅차지 않나 하는 생각이 들기도 합니다.이런 이유 때문에 “이것이 안드로이드다”가 3판째 개정되어 출판되고 있는 것이 아닌가 싶습니다.힘들게 고생해서 책을 만들어 주시는 작가님과 관계자 여러분들에게 참 감사함을 느낍니다.갑자기 감사인사를 드렸는데 책 이야기를 안할 수가 없겠죠.저는 사실 지금 Flutter라는 언어로 안드로이드 앱을 만들고 있습니다.Flutter를 기본으로 만들고는 있지만 Java나 Kotlin을 사용해 안드로이드 측면의 네이티브 코드를 짜기도 합니다.그래서 안드로이드에 대한 지식이 전혀 없지는 않은데 이 책은 확실히 안드로이드 개발에 필요한 모든 내용들을 한권에 담아 내려고 많은 노력을 하신 흔적이 보였습니다.수많은 스크린샷부터 시작해서 안드로이드 개발을 처음 접하는 분들을 위해 개발 툴 설치부터 차근차근 따라가면서 해볼 수 있도록 책이 구성되어 있습니다.그래서 처음부터 어려운 내용을 설명하기보다는 필수적인 언어의 차이점이나 처리방식에 대한 내용만 가볍게 설명하고 바로 본론으로 넘어가 따라할 수 있도록 되어 있습니다.그렇게 하나씩 따라가면서 하다 보면 어느새 앱을 만들고 있는 나 자신을 발견하게 되실겁니다.그만큼 자세한 설명과 앱을 만드는데 꼭 필요한 내용만을 꾹꾹 눌러담은 느낌입니다.만약 안드로이드 개발을 하고 싶고 코틀린을 사용하고 싶으시다면 이 책만큼 정석에 가까운 책이 많지 않을꺼라 생각합니다.정말 안드로이드의 정석에 가깝다는 생각이 드네요.이 리뷰 내용은 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.책의 내용이 궁금하다면 이곳을 통해 확인할 수 있습니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> Developer </tag>
        
          <tag> 안드로이드 </tag>
        
          <tag> 자바 </tag>
        
          <tag> 코틀린 </tag>
        
          <tag> android </tag>
        
          <tag> java </tag>
        
          <tag> kotlin </tag>
        
          <tag> youtube </tag>
        
          <tag> app </tag>
        
          <tag> moblie </tag>
        
          <tag> googleplay </tag>
        
          <tag> playstore </tag>
        
          <tag> 한빛미디어 </tag>
        
          <tag> 고돈호 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] Developer Relations]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2022/06/25/developer-relations/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다.혹시 Developer Relations라는 단어를 들어보셨나요?이미 해외에서는 꽤 많은 기업들이 내부에 Developer Relations 조직을 두고 있습니다.개발자가 전 세계적으로 부족해지는 상황이 되면서 회사 내에서 개발자를 찾기 위한 하나의 방도인거죠.국내에서는 IBM Korea가 먼저 시작한 것으로 알고 있습니다. 그 IBM Korea에서 처음으로 Developer Relations 역할을 하신분이 바로 이 책을 번역하신 분이죠.그 이후 국내에서도 개발자가 필요한 상황에서 많은 회사들이 Developer Relations 팀이 필요하다는 것을 알게 되었죠.그러면서 많은 Developer Relations 팀이 생기게 되었죠.하지만 국내에서 Developer Relations 업무는 커뮤니티에서 오랫동안 일했던 분들 위주로 만들어졌었죠.이 책에는 해외에서 먼저 만들어진 Developer Relations 팀이 해왔던 노하우를 잔뜩 담은 채로 만들어졌습니다.그걸 Developer Relations 경험이 풍부하신 분이 번역해주셨죠.만약에 Developer Relations 역할을 꿈꾸고 계신 분이라면 이 책이 정말 많이 도움이 될꺼라 생각합니다.데브렐 팀, 기술 커뮤니티, 커뮤니티 구축, 관리, 오프라인 행사까지 어떻게 해야 성공적으로 데브렐팀을 운영하고 회사에 어떻게 도움을 줄 수 있을지 상세하게 설명해주고 안내해주고 있습니다. 더불어 성과를 어떻게 측정할 수 있을지에 대한 내용도 다루고 있죠.데브렐팀에서 일을 하고자 하는 분들이라면 분명히 도움이 될 것이라고 생각됩니다.이 리뷰 내용은 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.책의 내용이 궁금하다면 이곳을 통해 확인할 수 있습니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> Developer </tag>
        
          <tag> Relations </tag>
        
          <tag> 데브릴 </tag>
        
          <tag> devrel </tag>
        
          <tag> 조은옥 </tag>
        
          <tag> O'REILLY </tag>
        
          <tag> 파이프라인 </tag>
        
          <tag> 커뮤니티 </tag>
        
          <tag> 한빛미디어 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Android install referrer 설정하기]]></title>
      <url>/android/2022/06/09/android-install-referrer/</url>
      <content type="text"><![CDATA[install referrer 테스트adb shell am broadcast -a com.android.vending.INSTALL_REFERRER -n com.onezlabs.tickl/.InstallReferrerReceiver –es referrer “utm_source=testSource&amp;utm_medium=testMedium&amp;utm_term=testTerm&amp;utm_content=testContent&amp;utm_campaign=testCampaign”]]></content>
      <categories>
        
          <category> android </category>
        
      </categories>
      <tags>
        
          <tag> install </tag>
        
          <tag> referrer </tag>
        
          <tag> android </tag>
        
          <tag> adb </tag>
        
          <tag> shell </tag>
        
          <tag> boradcast </tag>
        
          <tag> utm_source </tag>
        
          <tag> utm_campaign </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 데이터 익명화를 위한 파이프라인]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2022/05/29/pipeline/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다.데이터의 중요성은 시간이 지나갈수록 점점 더 중요해지고 있죠.결국엔 모든 분야에서 데이터 자체가 중요해지게 될 것 같습니다.데이터가중요해지게 되는 만큼 중요해지는 것이 또 하나 있습니다.바로 데이터와 연결된 개인의 보안에 대한 이슈입니다.최근의 광고산업이나 개인정보를 활용한 산업을 보면 사람들은 자신의 개인정보를 팔아서 제품의 특정 기능을 이용하거나 개인정보 제 3자 활용 동의를 통해 마케팅 활용 동의를 하고 추가 기능을 이용하거나 혜택을 받기도 합니다.한편으론 페이스북이나 구글 같은 대형 IT 업체의 경우 핸드폰에 있는 물리적 정보 접근을 통해 사용자의 IP나 지리적 정보를 파악하기도 합니다.이렇게 수집된 데이터들은 기본적으로는 식별이 가능한 유니크한 id 값을 가지고 있습니다.그렇기 때문에 수집된 데이터들을 조합하면 내가 어떤 취향을 가진 사람인지 나 자신보다 더 잘 알게 됩니다.그리고 이런 정보를 통해 AI서비스를 활용한 서비스나 내가 좋아할 만한 것들을 추천해주죠.빛과 그림자는 항상 함께 다니듯이 이런 편리함을 누리게 되면서 화두로 떠오른 문제가 바로 개인 정보의 유출을 통해 악의적인 방법으로 활요되는 문제일 겁니다.앞서 말씀 드린 내용과 같이 내가 가지고 있는 거의 모든 부분의 개인정보가 수집되기 때문에 개인정보가 악의적인 용도로 활용되면 다른 범죄의 피해로 이어질 수 있게 됩니다.이런 부분들을 조금이라도 해소하기 위해 필요한 기술이 데이터 익명화입니다.데이터 익명화는 데이터가 가지는 개인정보의 연결성을 끊고 익명화 하여 사용자의 개인정보를 보호하는데 목적이 있다.이 책에서는 익명화를 할 수 있는 방안과 익명화를 하여도 데이터를 활용하여 할 수 있는 다양한 방법론적 해결책을 제시한다.데이터를 익명화하는 것이 초기 스타트업이나 여유가 많지 않은 회사의 경우에는 쉬운 일은 아니겠지만 사용자의 개인정보를 문제 없이 활용하기 위해서는 꼭 필요한 부분이니 미리 알아두어서 나쁠 것은 없다는 생각이다.데이터 익명화를 위한 전략 또는 방법론에 대해 궁금하다면 거의 유일무이한 이 책을 활용해봐도 괜찮을 듯 하다.이 리뷰 내용은 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.책의 내용이 궁금하다면 이곳을 통해 확인할 수 있습니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 데이터익명화 </tag>
        
          <tag> O'REILLY </tag>
        
          <tag> 파이프라인 </tag>
        
          <tag> building </tag>
        
          <tag> anonymization </tag>
        
          <tag> pipeline </tag>
        
          <tag> 이창현 </tag>
        
          <tag> 한빛미디어 </tag>
        
          <tag> 개인정보 </tag>
        
          <tag> 보안 </tag>
        
          <tag> 식별화 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 헤드퍼스트 디자인패턴]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2022/04/24/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다.오늘은 아는 사람은 다 아는 디자인패턴에 대해 얘기를 조금 해볼까 합니다.헤드퍼스트 디자인패턴은 굉장히 오래된 책입니다.한국어로 번역된 초판이 무려 2005년에 나왔으니까 한국어로 번역된 책이 나온지도 20년이 넘은셈이죠.이 책은 일반적인 개발 서적과 조금 다릅니다. 코드만 나오는 것도 아니고, 그렇다고 줄글로만 주구장창 쓰여져 있지도 않지요. 이 때문에 책을 읽으면서 여행하는 느낌이 나기도 합니다.책에는 총 16가지의 패턴을 다루게 됩니다.물론 여러 패턴들 얘기하기 전에 예제를 통해 전체적인 패턴을 사용하는 방식에 대해 얘기합니다.옵저버, 데코레이터, 팩토리, 싱글턴, 커맨드, 어댑터, 퍼사드, 템플랫 메소드, 반복자, 컴포지트, 상태, 프록시 등의 패턴을 얘기해봅니다.물론 이 모든 패턴에 대해 익숙해지면 좋겠지만 모든 것이 그렇듯 필요할 때 적재 적소에 쓰는 것이 중요합니다.중요도에 따라 더 많이 쓰이는 패턴이 있기도 하고 상대적으로 덜 사용되는 패턴도 있지요.저는 오히려 이 책에서 얘기하는 내용 중에는 패턴도 중요하지만 유연하게 개발하는 것에 대해 생각할 수 있도록 얘기하는 것도 정말 중요하다고 생각합니다.  디자인 패턴은 만병통치약이 아닙니다.  패턴이 정말 필요한가?  무조건 패턴을 적용해야 하는가?등의 질문을 통해 패턴을 적용하는 것에 대해 생각해보게 되는 것.이 패턴이 정말 필요한 것인가? 같은 생각들을 하는 것을 통해 점점 더 나은 개발을 해야 하는 것이죠.디자인패턴이라는 것은 선배 개발자들의 경험과 노하우를 녹인 일종의 전래동화 같은 것이라고 생각합니다.그러한 이유로 경험을 공부하고 학습하면서 왜 이런 패턴이 나오게 되었는지 확인하고 그 상황이 되었을 때 내가 더 자연스럽게 비슷한 형태의 패턴을 사용한다면 디자인 패턴에 대해 제대로된 학습을 했다고 생각이 들 것 같습니다.무턱대고 디자인 패턴이 좋으니까 적용하자! 또는 사용할 곳이 명확하지도 않은데 이걸 사용해야 해! 같은 것은 하지 않았으면 하는 바램입니다.이 리뷰 내용은 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.책의 내용이 궁금하다면 이곳을 통해 확인할 수 있습니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 헤드퍼스트 </tag>
        
          <tag> O'REILLY </tag>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 기초 </tag>
        
          <tag> 자바 </tag>
        
          <tag> 디자인패턴 </tag>
        
          <tag> GOF </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] Building Machine Learning Powered Applications - 머신러닝 파워드 애플리케이션]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2022/03/31/bmlpa/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다.여러분은 머신러닝을 얼마나 활용해 보셨나요?저는 항상 머신러닝에 대해서 얘기를 하다보면 지식의 한계 지점을 느낍니다.그만큼 제가 머신러닝에 대해 모르기도 하고 어떤식으로 머신러닝을 구상해야 할지 어렵기 때문일 겁니다.머신러닝을 제대로 돌리기 위해서는 모델을 알아야 하고 그것을 또 배우는데 시간이 필요하고 그것을 잘 알지 못하면 또 머신러닝을 실행하지 못해서 어려운 것도 있습니다.그런면에서 이 책에선 그런 모델을 먼저 가르쳐줍니다. 모델을 알고 나면 머신러닝을 설계하고 계획하고 수립해서 실제로 해볼 수 있습니다.한걸음 나아가는 셈이죠.전반적으로 머신러닝에 필요한 부분들을 계획하고 실제로 돌려볼 수 있도록 가이드가 되어 있습니다.더구나 요즘은 클라우드 서비스에서 충분히 머신러닝을 돌려볼 수 있기 때문에 모델을 알게 되고 데이터셋을 정리해서 계획을 세우고 배포를 하는 것을 더 쉽게 잘 할 수 있게 됩니다.이 리뷰 내용은 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.책의 내용이 궁금하다면 이곳을 통해 확인할 수 있습니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 머신러닝 </tag>
        
          <tag> 애플리케이션 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] AI로 일하는 기술 - 인공지능은 어떻게 일이 되는가]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2022/02/23/AI%EB%A1%9C-%EC%9D%BC%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다.😎AI는 공부할 때마다 그리고 내용을 들을 때마다 참 어렵다는 생각을 많이 하게 됩니다.그 이유중 하나가 사람들이 하는 질문에 선뜻 대답해주기가 어렵기 때문이라고 생각합니다.AI 전문가를 데려다 놓고 질문을 해봐도 속시원하게 대답해주지 못하는 것 같아요.그만큼 기술의 난이도도 높고 복잡한 내용이 함께 고려되어야 하기 때문이 아닐까 생각되네요.그런면에서 이책은 참 재미있는 포인트가 있었습니다.바로 목차가 질문이라는 점입니다. 아무래도 그 동안 여러 매체에서 AI가 미래산업이다 핵심산업이다 해서 얘기는 많지만 제대로된 질문과 답변을 들을 수 없기 때문에 작가분이 선택한 방식이 아닐까 하는 생각이 드네요.더해서 작가분이 차분하게 설명이라도 하는 듯한 느낌의 문장체도 한몱하는 것 같구요.정말 친절하게도 “인공지능이 뭔가요?”부터 일반인공지능, 인공지능과 관련된 직업, 현재까지의 인공지능이 할 수 있는 것들, 산업에서 쓰이는 인공지능 마지막으로 인공지능을 통해 우리의 미래를 보고 어떤 관점에서 인공지능을 보는지 나누어 인공지능과 관련되 전반적인 내용에 대해 쉽게 이해할 수 있는 내용들로 되어 있습니다.당연한 얘기겠지만 제목만 단순히 질문으로 적은것이 아닌 그에 맞는 적절한 답변도 함께 제공됩니다.친절한건 덤이고 일반인이 이해하기에 어렵지 않은 내용으로 쭉쭉 읽히는것은 덤입니다.만약 인공지능의 1도 모르는데 인공지능으로 뭔가 해야 한다면?인공지능을 빠르게 이해하고 인공지능의 현 주소를 알고 싶다면?인공지능이 미래에는 어떤식으로 활용될지 가볍게 감이라도 잡고 싶다면?이 책을 적극 추천드리고 싶습니다.정말 읽기 쉽고 이해하기 쉽게 쓰여 있어서 한번 읽고 나면 과거부터 현재까지의 인공지능을 빠르게 파악할 수 있으리라 생각합니다.이 리뷰 내용은 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.책의 내용이 궁금하다면 이곳을 통해 확인할 수 있습니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> software </tag>
        
          <tag> AI </tag>
        
          <tag> nft </tag>
        
          <tag> ai </tag>
        
          <tag> chip </tag>
        
          <tag> metaverse </tag>
        
          <tag> self-driving </tag>
        
          <tag> car </tag>
        
          <tag> 장동인 </tag>
        
          <tag> 한빛미디어 </tag>
        
          <tag> 인간지능 </tag>
        
          <tag> 인공지능 </tag>
        
          <tag> 메타버스 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[apptweak]]></title>
      <url>/marketing/2021/12/25/apptweak/</url>
      <content type="text"><![CDATA[curl -X GET -H “X-Apptweak-Key: UwVvyvngTxCecrbl1lq5jFunCSM” “https://api.apptweak.com/android/categories/ALL/keywords/top.json?country=us&amp;language=en&amp;type=free”curl -X GET -H “X-Apptweak-Key: UwVvyvngTxCecrbl1lq5jFunCSM” “https://api.apptweak.com/android/keywords/stats_v2.json?country=us&amp;language=us&amp;keywords=vibrator,alarm”curl -X GET -H “X-Apptweak-Key: UwVvyvngTxCecrbl1lq5jFunCSM” “https://api.apptweak.com/ios/keywords/stats_v2.json?country=us&amp;language=us&amp;device=iphone&amp;keywords=vibrator,alarm”curl -X GET -H “X-Apptweak-Key: UwVvyvngTxCecrbl1lq5jFunCSM” “https://api.apptweak.com/android/categories/TOOLS/keywords/top.json?country=us&amp;language=en&amp;type=free”]]></content>
      <categories>
        
          <category> Marketing </category>
        
      </categories>
      <tags>
        
          <tag> apptweak </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[adb command]]></title>
      <url>/marketing/2021/12/25/adb-command/</url>
      <content type="text"><![CDATA[./adb -s R3CR90PZD8Y install /Users/aron/projects/NCTMarketing/eco-pedometer/build/app/outputs/flutter-apk/app-release.apk./adb -s ce03160390ae063203 install /Users/aron/projects/NCTMarketing/eco-pedometer/build/app/outputs/flutter-apk/app-release.apk./adb -s R3CR90PZD8Y shell ps -ef | grep com.nct.eco./adb -s R3CR90PZD8Y shell logcat –pid=8050./adb -s ce03160390ae063203 shell ps -ef | grep com.nct.eco./adb -s ce03160390ae063203 shell logcat –pid=10709shell am broadcast -a com.android.vending.INSTALL_REFERRER -n com.nct.v/com.nct.v.InstallReferrer –es “referrer”–es “referrer” “utm_source=test_source&amp;utm_medium=test_medium&amp;utm_term=utm_test&amp;utm_content=test_content&amp;utm_campaign=test_name”./adb shell am broadcast -a com.android.vending.INSTALL_REFERRER -n com.nct.v/com.nct.v.InstallReferrer –es “referrer”–es “referrer” “utm_source=test_source&amp;utm_medium=test_medium&amp;utm_term=utm_test&amp;utm_content=test_content&amp;utm_campaign=test_name”adb shell am broadcast -a com.android.vending.INSTALL_REFERRER –es referrer hello./adb shell am broadcast -a com.android.vending.INSTALL_REFERRER -n com.nct.v/.util.broadcast_receivers.FacadeBroadcastReceiver –es “referrer” “utm_source=test_source\&amp;utm_medium=test_medium\&amp;utm_term=test_term\&amp;utm_content=test_content\&amp;utm_campaign=test_name”]]></content>
      <categories>
        
          <category> Marketing </category>
        
      </categories>
      <tags>
        
          <tag> adb </tag>
        
          <tag> command </tag>
        
          <tag> android </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 아키텍처로 가는 길]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2021/12/25/to-archtect/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다.😎리뷰하기에 앞서 오늘은 크리스마스네요!이 글을 읽으시는 분 모두 메리크리스마스! 행복한 연말이 되셨으면 좋겠습니다.개발자의 길을 가려고 하는 사람들은 개발자가 되고나서 이후의 길에 대해 한번정도 생각해보셨을꺼라 생각합니다. 하지만 보통은 현재의 일에 치이면서 살기 때문에 그 다음의 단계에 대해서는 금방 잊어버립니다. 하지만 개발자의 길을 선택했다면 아키텍트로서 일을 해보고 싶은 욕심이 생깁니다. 아주 대단한 제품이 아니어도 말이죠.저 역시도 개발자로 시작해서 아키텍트로서의 역할을 수행하기 위해 한걸음씩 나아가고 있는 중에 이 책을 알게 되었습니다.사실 시장에 개발자가 되기 위한 책들도 많고 개발자의 성장과정에 대해 얘기한 책은 많습니다. 하지만 아무래도 그 수가 적은 아키텍트가 되기 위한 책은 적죠.이 책이 그런 부분의 가려움을 긁어주는 소중한 책이라 생각이 듭니다.먼저 소프트웨어 아키텍처가 하는 일에 대해 설명해줍니다. 당연하겠지만 개발자가 하는 일과 아키텍처가 하는 일은 다르기 때문에 정확한 이해가 필요하겠죠.그 다음 아키텍트가 되기 위해 필요한 내용들 그리고 아키텍처로서 하는 업무들과 그 사례들을 통해 아키텍처의 업무들에 대해 자세히 설명해줍니다.필요한 마인드셋도 함께 가이드해줍니다.이후로는 아키텍처에게 필요한 일의 방식입니다. 개발자가 가져야 하는 일의 목표가 개발 능력이라면 아키텍처에게 무엇보다 가장 중요한 것은 설계를 제대로 해내는 것이라고 생각이 듭니다.다만 필요에 의해서는 설계에 필요한 부가적인 것들 또한 잘 되어야 하겠죠.만들고자 하는 것의 기능 요구사항 정의, 이해관계자들의 관계 정의, 설계를 시각화해서 보여주기, 워크샵 등 필요하다면 문서화도 해야 합니다.책을 읽다보면 아키텍처는 정말 많은 부분을 신경써야 하는구나라는 것을 알게 됩니다. 그만큼 설계의 시작부터 그 설계가 제대로 동작하게 하는 일은 어렵다는 생각이 들었습니다.개발자로서 성장하기 위해서는 개발능력이 가장 중요하겠지만, 아키텍처는 개발 능력은 물론이고 전체를 그리는 설계 능력도 좋아야 한다는 것을 한번 더 느끼게 되었습니다.마지막으로 소프트웨어 아키텍처라면 문제를 풀어내는 방식에 대해 자신만의 방식이 있다며 많은 도구들을 소개해줍니다.요 부분이 정말 파워풀하다는 생각이 들었습니다.책에서 꽤 많은 부분을 차지하고 있으니 꼭 읽어보시길 바랍니다.이 리뷰 내용은 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.책의 내용이 궁금하다면 이곳을 통해 확인할 수 있습니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> software </tag>
        
          <tag> design </tag>
        
          <tag> it </tag>
        
          <tag> from </tag>
        
          <tag> programmer </tag>
        
          <tag> to </tag>
        
          <tag> software </tag>
        
          <tag> architect </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Android sign key 만드는 법]]></title>
      <url>/android/2021/12/17/create-android-signing-key-by-keytools/</url>
      <content type="text"><![CDATA[$ keytool -genkey -v -keystore keystore -alias nct -keyalg RSA -keysize 2048 -validity 10000 -keypass password -storepass password -dname "CN=nct, OU=team, O=product, L=SEOUL, S=SEOUL, C=ko"keypass와 storepass의 경우 동일한 값을 사용해야 한다.[출력내용]키 저장소 비밀번호 입력:  새 비밀번호 다시 입력:  이름과 성을 입력하십시오.    [Unknown]:  nct  조직 단위 이름을 입력하십시오.    [Unknown]:  team  조직 이름을 입력하십시오.  [Unknown]:  product구/군/시 이름을 입력하십시오?  [Unknown]:  seoul시/도 이름을 입력하십시오.  [Unknown]:  seoul이 조직의 두 자리 국가 코드를 입력하십시오.  [Unknown]:  koCN=nct, OU=team, O=product, L=seoul, ST=seoul, C=ko이(가) 맞습니까?  [아니오]:  y다음에 대해 유효 기간이 10,000일인 2,048비트 RSA 키 쌍 및 자체 서명된 인증서(SHA256withRSA)를 생성하는 중    : CN=nct, OU=team, O=product, L=seoul, ST=seoul, C=ko[nctBitStepKey을(를) 저장하는 중]]]></content>
      <categories>
        
          <category> android </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> android </tag>
        
          <tag> signkey </tag>
        
          <tag> keytool </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 구글 BERT의 정석]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2021/11/22/%EA%B5%AC%EA%B8%80-bert%EC%9D%98-%EC%A0%95%EC%84%9D/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎인공지능을 공부하다 보면 자연어 처리에 대해 한번쯤 관심을 가지게 됩니다. 딥러닝을 이용한 자연어 처리에는 워드투벡터, 글로브가 많이 이용되는데 BERT 역시 이러한 임베딩 방법중 한가지이다.책에서는 BERT를 이해하기 위해서 필요한 내용 그리고 그 이전에 자연어 처리 모델에 대한 내용을 먼저 다루고 실질적인 BERT가 동작하는 방식을 다루며 독자가 좀 더 쉽게 이해할 수 있도록 했다.뮬론 기본적인 딥러닝의 개념에 대해서 모른다면 다른 딥러닝의 이해를 돕는 기본 책들을 먼저 찾아보고 읽어본 후에 이 책을 읽기를 권한다.이 책에서는 기본적으로 딥러닝이 어떤식으로 동작하는지에 대한 이해가 뒷받침 된 상태에서 읽는 것을 전제로 하고 있다.책의 초반에 대상독자에 대해서 소개하는데 이미 머신러닝 업무를 수행하고 있는 사람이나 BERT를 기반으로 NLP 업무를 하고자 하는 사람들이 적합하다고 서술하고 있다.딥러닝에 대해 알지 못한다면 어려울 것으로 생각될만큼 일반적인 내용보다는 BERT를 동작 시키기 위해 필요하거나 좀 더 BERT에 대해 집중적으로 설명하고 있다.기본 이해가 있는 사람들에게는 BERT를 쓰기 위해 필요한 기본적인 내용과 활용할 수 있도록 충분한 내용을 다루고 있기에 BERT를 사용하여 NLP를 구축하는데는 많은 도움이 될꺼라 생각된다.추가적으로 한국어 언어 모델인 KoBERT, KoGPT2, KoBART에 대해서도 다루고 있어 단순히 BERT를 사용해 NLP 처리가 아니라 한국어 언어에 대한 처리를 하기 위해서도 도움이 될만한 부분이 책의 한 챕터로 구성되어 있다.구글 BERT 외에도 다른 자연어 처리 모델도 있는데 앞으로도 계속 발전해 나가는 영역인 만큼 NLP 처리 모델 중 한가지인 BERT도 한번 살펴보면 좋겠다는 생각이 든다.이 리뷰 내용은 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.책의 내용이 궁금하다면 이곳을 통해 확인할 수 있다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> neural </tag>
        
          <tag> natural </tag>
        
          <tag> language </tag>
        
          <tag> processing </tag>
        
          <tag> google </tag>
        
          <tag> bert </tag>
        
          <tag> deep </tag>
        
          <tag> learning </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] Strengthening Deep Neural Networks]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2021/10/25/Strengthening-deep-neural-networks/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎심층 신경망 인공지능 하면 어떤 단어들이 떠오르시나요?인공, 복잡한, 어려운, 복잡계, 컴퓨터 등등 여러 단어들이 연관되어 있죠.AI 인공지능은 완벽하다고 생각하시나요?이 주제에 대해서는 학계에서도 계속해서 논의가 되고 있지요.이 책에서는 인공지능도 완벽하지 않다는 것을 보여주고 또 그것을 보완하기 위해 어떤 방법이 필요한지에 대해 얘기하고 있습니다.책에서 예를 들어 설명한 것은 적대적 공격을 통해 AI의 이미지 인식을 방해하는 방법입니다.사람이 보기에는 별로 문제가 될 것 없는 일종의 마크 같은 것들을 이미지에 심어서 AI에게 의도적으로 오류를 도출하게 만드는 것이지요.적대적 공격의 예링크에 나오는 내용은 STOP 표지만 이지만 특정 영역에 스티커를 붙여 AI가 STOP으로 인식하지 못하는 이미지 오류에 대해 설명하고 있습니다.이런 이미지가 도로표지만에 실제 있다면 자동차에 탑재된 AI는 저걸 다르게 해석해서 멈추지 않고 직진을 하게 되겠죠.그렇게 되면 인명사고까지도 만들어질 수 있는 위험한 상황이 벌어질 수 있게 됩니다.AI가 점점 더 발전하고 많은 판단을 AI가 하게 되면서부터 이런 문제에 대해 대비해야 하는 상황이 만들어지고 있습니다.이러한 문제를 해결하기 위해서는 여러 방향의 접근법을 통해 시도를 해야 하고 장기적으로는 모델의 개선을 통해 이러한 위협에 대해 대응하여 적대적 공격도 회피할 수 있는 AI가 구현되도록 노력해야 합니다.명확하게 인지하고 제대로 처리할 수 있도록 돕는거죠.결국 AI가 점점 더 발전하고 연구자들이 이런 적대적 공격에 대한 대응방법을 찾아내고 인간의 뇌와 더 비슷하게 논리를 만들어낼 수 있도록 모델을 개선하는 노력을 한다면 이런 공격을 할 수 없는 날이 도래하겠지요.저는 단순한 사례와 방어법의 개략적인 내용을 설명했지만, 책에는 기술적으로 막아낼 수 있도록 어떻게 구현하는지에 대한 내용이 담겨있습니다.AI 모델을 개발하시는 분이나 해당 모델을 가지고 시스템에 반영하시는 분들에게는 도움이 될 수 있겠네요.책은 링크에서 구매하실 수 있습니다.이 리뷰는 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> deep </tag>
        
          <tag> neural </tag>
        
          <tag> networks </tag>
        
          <tag> 한빛미디어 </tag>
        
          <tag> o'reilly </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 모바일 UX/UI 디자인 강의]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2021/09/23/mobile-ux-ui-design/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎오늘은 개발 서적이 아닌 다른 책 리뷰를 해볼까 합니다.바로 모바일 UX/UI 디자인 강의 입니다. 이 책도 한빛미디어  활동을 위해서 책을 제공받아 작성된 서평입니다.하지만 요번 리뷰를 작성하면서 간단히 저에 대한 생각도 적을까 합니다.바로 프론트 개발자가 갖추어야 하는 역량에 관해서 입니다.보통 프론트 개발자라 하면 디자인 시안대로 나온 화면을 실제 브라우저나 앱에서 볼 수 있도록 개발해주는 사람입니다.이정도는 여러분들도 잘 알고 계시죠?ㅎ그치만 이게 일을 하다 보면 개발자가 아닌 PM 또는 디자인과 함께 프론트 화면에 대해 얘기를 하게 되는 경우가 많죠.PM이야 일정에 대한 얘기를 하니 화면에 대해 논할 내용이 적다고는 하나 디자이너는 화면의 구성에 대해 논의하다 보면 프론트 개발자로써 디자인의 영역까지 얘기를 해야 하는 경우가 종종 생기고는 합니다.주로 논의가 되는 얘기는 화면을 어떻게 만들것인가에 대한 얘기 입니다.이게 물론 기본적으로는 디자이너의 영역이긴 합니다.하지만 프론트 개발자의 목표가 단순히 개발을 잘한다가 아니라 유저에게 편리한 화면을 제공한다 정도만 되어도 화면 구성에 신경을 쓰지 않을 수는 없습니다.또 최근에 많은 스타트업들은 화면 구성 그러니까 UX적인 부분에 대해 같이 고민해주는 개발자들을 찾고 있습니다.왜냐하면 초기 스타트업에서는 최대한 많은 사람들의 머리가 모여 좋은 제품을 만들어내는 것이기 때문입니다.그런의미에서 이 모바일 UX/UI 디자인 강의는 디자이너에게 필요한 책이지만 동시에 개발자에게도 도움이 되는 책이라는 생각이 듭니다.실제로 개발을 하면서 화면에 무언가를 그려낼 때 고려해야 하는 부분들 예를 들어 화면의 해상도와 관련한 이해, 뷰포인트 관련 내용, Android와 iOS의 주요 가이드라인, Android와 iOS에 이미지를 넣을 때 고려해야 하는 부분이라던가 레이아웃 등등 정말 꽤 많은 부분 프론트 개발자에게 도움이 될만한 내용들을 볼 수 있었습니다.저는 프론트 개발자는 단순히 화면을 만드는 개발자라고 생각하지 않습니다.사용자와 가장 밀접한 영역인 화면을 디자이너와 함께 디자인하고 사용자의 경험을 통해 편의성을 제공해줄 수 있는 사람이라고 생각합니다.물론 개발적인 실력도 뒷받침 되어야 하겠죠.프론트 개발자인데 회사에 디자이너도 화면 디자인에 대해 잘 모르는 것 같아 혼자서 디자인 영역의 일부까지 해야 하는 사람이나 UX/UI 디자이너와 협업을 해야 하는데 너무 어려운 사람들에게 이 책을 추천합니다.보통 개발적인 지식만을 얻기에 급급한데 협업 잘하는 프론트 개발자가 되기 원한다면 이런 디자인적인 요소도 일부 챙길 수 있으면 더 좋지 않을까 생각이 듭니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> UX </tag>
        
          <tag> UI </tag>
        
          <tag> 디자인 </tag>
        
          <tag> 강의 </tag>
        
          <tag> AdobeXD </tag>
        
          <tag> 디자이너 </tag>
        
          <tag> 와이어프레임 </tag>
        
          <tag> 앱 </tag>
        
          <tag> 가이드라인 </tag>
        
          <tag> 안드로이드 </tag>
        
          <tag> 아이폰 </tag>
        
          <tag> iOS </tag>
        
          <tag> Android </tag>
        
          <tag> 오버레이 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 초소형 머신러닝 TinyML]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2021/08/23/tinyml/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎여러분은 머신러닝을 얼마나 알고 계신가요?또 딥러닝에 대해서는 어느정도의 이해도를 가지고 계신가요? 이 책에서는 딥러닝과 소형장치의 시스템을 조합해서 머신러닝을 수행하기 위한 내용을 설명하는 책입니다.보통은 딥러닝을 한다고 하면 많은 컴퓨팅자원이 필요하거나 엄청 어렵다고 생각하실 수도 있겠지만, 이 책에서는 아두이노나 스파크펀 에지 등의 소형 장치에 맞게끔 모델을 만들어 실행 할 수 있도록 설명합니다.그래서 각 제품의 환경에 맞게 설정하고 실행하는 법을 설명합니다.딥러닝은 특정 목표를 달성하기 위한 모델을 구축하고 해당 모델을 테스트하기 위한 데이터셋을 만들어 테스트를 합니다.데이터셋이 준비 되면 모델을 실행시켜보면서 원하는 데이터가 나오는지 추론을 하고 결과를 확인합니다.훈련을 시키고 원하는 결과가 나오지 않으면 훈련을 또 변경해보면서 원하는 데이터가 나올 때까지 반복합니다.이렇게 만들어진 모델을 텐서플로 라이트에서 돌릴 수 있도록 최적화를 하고 더 낮은 수준의 환경에서 실행 할 수 있도록 변경합니다.이렇게 되면 임베디드나 시스템 사양이 낮은 장치에서 돌릴 수 있도록 합니다.이 리뷰는 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.tinyML 책을 보고 싶으신 분은 링크 를 확인해보시기 바랍니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 머신러닝 </tag>
        
          <tag> tensorflow </tag>
        
          <tag> 텐서플로라이트 </tag>
        
          <tag> 딥러닝 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 업무에 바로 쓰는 SQL 튜닝]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2021/07/25/sql-tuning/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎여러분은 SQL을 어떻게 공부하셨나요?보통은 SQL 문법책을 사서 하거나 블로그나 인터넷에서 내용을 찾아서 공부하는게 전부 일 것 같습니다.저도 SQL을 어떻게 배워야 하냐라는 질문을 꽤 여러번 받았던 기억이 납니다.“그 때마다 항상 기본 SQL을 일단 익혀라. 하나씩 하다 보면 SQL을 다룰 수 있게 된다.” 등의 조언을 했었습니다.책을 꽤 많이 보는 제가 책을 추천하지 않은 이유는 추천할만한 책이 없기 때문입니다.보통 SQL을 익히기 위해 책을 찾다 보면 너무 어렵거나 이해할 수 있도록 가르쳐 주는 경우가 별로 없었던 것 같습니다.또 그 분들의 대다수는 기본 CRUD는 할 줄 알고 있는 경우가 많아서 DB의 내용을 좀 더 심도 있게 다루는 책을 찾기는 참 힘들었습니다.그러는 의미에서 지금 제가 리뷰하려는 책은 기본적인 CRUD는 알고 있으면서 DB의 이해도를 높이고 싶은 분들에게 가장 적합한 책이 아닐까 싶습니다.보통 엄청나게 두꺼운 책에서나 다루는 MySQL의 내부에서 데이터를 처리하는 방법이나 인덱스 키의 활용 방법 같은 내용을 이해할 수 있을 정도로 설명되어 있어 데이터베이스를 좀 더 이해하고 싶은 분들에게 도움이 될 수 있는 책이라 생각합니다.보통은 데이터베이스의 쿼리가 느리거나 문제가 있는 쿼리문을 분석하거나 해결하기 위해 필요한 것이 무엇인지를 알기 힘듭니다.인덱스의 문제인지 데이터의 구조적인 문제인지 파악하지 못한 채로 이것 저것 시도 하다가 실패하고 해결은 못하기도 하지요.이 책에서는 그런 부분을 쿼리 튜닝이라는 챕터에서 충분히 잡아주고 있습니다.물론, 아무래도 데이터베이스 구조적인 부분에 대한 내용이 많기 때문에 잘 모르시는 분은 앞에서 설명한 데이터베이스의 구조에 대해 충분히 이해하고 시작하시는게 좋을 것 같다는 생각도 들었습니다.그래도 SQL을 배우기 위해 여러가지 시도를 해볼텐데 SQL 튜닝에 대해 입문하고자 하시는 분들에게는 많은 도움이 될 수 있을 것 같습니다.이 책은 나는 리뷰어다 활동을 하면서 제공받아 작성된 서평이지만 그 동안 MySQL/MariaDB의 구조에 대해 가볍게 배울 수 있는 책이 나온 것 같아 속이 시원합니다. 드디어 추천할 만한 SQL 책이 생겼네요.SQL 튜닝에 대해 궁금하신 분들은 링크 를 확인해보시기 바랍니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> mysql </tag>
        
          <tag> 업무 </tag>
        
          <tag> 튜닝 </tag>
        
          <tag> mysql </tag>
        
          <tag> mariadb </tag>
        
          <tag> query </tag>
        
          <tag> 쿼리 </tag>
        
          <tag> sql문 </tag>
        
          <tag> 문법 </tag>
        
          <tag> 인덱스 </tag>
        
          <tag> 한빛미디어 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] LEAN AI]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2021/06/14/lean-ai/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎이 리뷰는 한빛 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.린스타트업이라는 책을 아시나요? 린스타트업에는 스타트업의 성장을 위한 표준에 가까운 성장 방법론을 제시하는 내용을 담고 있습니다.LEAN AI 역시 스타트업이 어떤 방식으로 성장할 수 있는가?에 대해 얘기하고 있는 책입니다.스타트업의 99%는 10년안에 망한다는 얘기가 있을 정도로 비즈니스를 구축하고 사업성을 인정받아 궤도에 오르는 것은 정말 힘듭니다. 그렇지만 그 과정에서 그로스 마케팅, 그로스 해킹 등의 마케팅 방법들이 나타나면서 더 빠르게 성장 할 수 있도록 하는 방법들도 나타나게 되었습니다.이 책에서는 저자의 경험을 통해 기존에 사람이 직접 분석하던 그로스 마케팅에 더하여 꾸준히 대두 되고 있는 AI 기술을 접목시켜 더 빠르게 성장할 수 있도록 마케팅 자동화 방법에 대한 스킬과 방법들을 제시합니다.앞으로의 그로스 팀은 단순히 계산을 잘하고 목표 설정을 하는 것에 그치지 않고 AI의 힘을 빌려 마케팅 자체를 자동화 하여 최소의 노력으로 최고의 효율을 만들어 내야 한다고 얘기하고 있습니다.저는 이 책을 처음 보자마자 마케팅에도 AI의 영역이 있겠구나라는 생각과 함께 이제는 기술을 충분히 활용할 수 있는 마케터가 살아남을 수 있겠구나라는 생각이 동시에 들었습니다.조금은 슬픈 현실이지만 그만큼 AI의 활용도가 높아졌다고 할 수도 있겠네요.분명 그로스 마케팅이 많은 사람들에게 퍼지면서 짧은 시간안에 효과적인 방법으로 원하는 목표치에 도달하고 원하는 매출을 이끌어낼 수 있는 하나의 방법으로 자리매김 했습니다.그 영역에서 인공지능이 더 정확한 유저의 요구사항을 분석하고 더 정확하게 고객에게 맞춰진 광고를 제공하여 고객의 행동을 더 많이 이끌어내어 매출을 만들어 낼 수 있다면 AI를 쓰지 않을 이유가 없겠죠.마케팅에 활용할 머신러닝의 경우 여러 방식이 존재 하는데 쉽지 않은 기술인 만큼 각 방식에 따라 어떤 방식이 어떤 과정에 적합하고 활용할 수 있는지에 대해서도 충분히 설명합니다.여러가지 정보들을 나열한다고 해도 결국에 마케팅에 대한 내용인 만큼 마케팅에 대해서도 충분히 서명합니다. 광고 비용 대비 매출(ROAS), 전환율, 지표를 보는 방법등 마케팅을 해야 한다면 당연히 알아야 하는 내용들에 대해서도 충분히 설명합니다.아무리 AI를 활용할 수 있다고 해도 사람이 AI를 쓰는 것이기 때문에 결국 AI를 쓰고자 하는 사람에게 더 많은 지식을 요할 수밖에 없습니다.단순히 AI가 알아서 다 해주는 광고 마케팅을 생각한다면 이 책을 읽으면서 배워야 할 것이 너무나 많을 것입니다.반대로 저는 개발자의 입장에서 책을 읽으면서 그로스 마케팅에 대해 궁금했던 많은 부분을 해소 할 수 있었습니다.처음 들어보는 각종 용어와 함께 AI가 어떤 방식으로 사용될 수 있는지에 대한 감각을 익히고 마케팅 역시 알고리즘이 만들어내는 결과물이 될 수 있겠다는 생각이 들었습니다.기술적인 부분의 활용성을 늘리면서 성장하고 싶은 마케터에게 또는 마케터와 함께 개발을 하면서 마케팅 결과를 만들어내야 하는 개발자에게 추천하고 싶은 책입니다.마케터로서 AI를 활용해보고 싶거나, 개발자인데 마케팅에 관심이 있는 분이라면 링크 를 확인해보시기 바랍니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> lean </tag>
        
          <tag> ai </tag>
        
          <tag> 사용자유치 </tag>
        
          <tag> 그로스 </tag>
        
          <tag> 마케팅 </tag>
        
          <tag> 성장 </tag>
        
          <tag> 전략 </tag>
        
          <tag> 인공지능 </tag>
        
          <tag> oreilly </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 쿼커스 쿡북]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2021/05/23/quarkus-cookbook/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎오늘 제가 소개해드릴 책은 쿼커스쿡북이라는 책입니다.한빛 미디어에서 나온 번역본이고 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.요즘은 클라우드 서비스를 쓰지 않고 개발을 하는건 참 어려운 세상이죠.클라우드를 통해 개발을 하면서 많은 효율성을 가져다 주었고 그로 인해 개발자분들의 생산성도 많이 증가되었죠.그런 이유들 때문에 단순한 서비스에도 클라우드를 많이 쓰는 것 같습니다.클라우드를 쓰다보면 쿠버네티스 혹은 가상화 시스템 얘기를 많이 들으실텐데 최근에 거의 표준에 가깝게 쓰이고 있는것이 바로 쿠버네티스 입니다.쿠버네티스는 설정이 복잡하지만 실제로 사용했을 때 적은 메모리와 CPU 사용률을 보여주기 때문에 요즘은 많은 시스템 구성에서 기본에 가깝게 사용하고 있습니다.복잡한 시스템 구성도를 그리기 위해서는 필수적인 요소 중 하나가 되었습니다.하지만 복잡한 설정 때문에 사용자 친화적이지는 않은 것도 사실 입니다.쿼커스는 쿠버네티스에서 필요한 여러 설정들 중에 처음에 시작하기에는 조금 과한 부분을 제거 하거나 자동화 하면서 더 심플하게 시작할 수 있도록 도와줍니다.쿼커스를 처음 시작하면서는 도커 컨테이너를 생성하는데 필요한 파일들이 기본으로 만들어지고 그랄VM이나 OpenJDK JVM 위에서 동작할 수 있도록 설정이 됩니다.이렇게 만들어진 작은 단위의 쿼커스는 작은 크기의 컨테이너로 빠르게 실행되어 사용하는 입장에서 더 빠르게 코드를 작성할 수 있는 상태로 만들어줍니다.개발자라면 인프라를 설정하는 것보다는 코드를 개발하는데 더 노력을 쏟고 싶은 법이죠.책을 보면 쿼커스를 기반으로 프로젝트를 시작할 수 있는 기본 구성부터 어떻게 실행하면 되는지까지 친절하게 알려주고 있습니다.아마도 개발자라면 무리 없이 따라할 수 있는 것은 물론이고 책을 보면서 하나씩 하다 보면 금새 쿼커스를 하고 계실꺼라 생각합니다.그만큼 심플하게 시작할 수 있게 되어 있어 사용하는 유저 입장에서는 놀라울 따름이었습니다.몇년 전 스프링부트로 API 서버를 처음 실행시킬 때도 상당히 편하다는 느낌을 받았었는데, 이제는 쿠버네티스를 활용한 단계에서도 간단히 API 서버를 만들고 실행시킬 수 있는 단계로 왔다는 것이 기술의 개선속도가 느껴집니다.심지어 간편하기까지 하죠.명령어 두번이면 간단한 API서버가 만들어집니다.그것도 쿠버네티스를 활용해서 말이죠.당연한 얘기이겠지만 책을 통해 더 많은 것들을 할 수 있습니다.명령어 두번으로 API서버를 실행시켜보는 것은 초반 40장 정도만 읽어도 충분히 가능하고, 그 외에 개발모드 설정이나 HTTP나 HTTPS를 사용하다 보면 항상 괴롭히는 CORS 설정, 그리고 개발 할 때 정말 기본중에 기본인 로그 설정, 빌드, 배포 인프라적인 내용과 데이터베이스를 연결해서 시스템화 하는 부분을 포함하여 인증이나 권한 스프링 프레임워크의 연동 그리고 그 외에 필요한 배치 기능들을 쿼커스 부가 기능을 통해 풀어낼 수 있도록 제공하고 있습니다.이 책 한권이면 쿼커스의 시작부터 일반적인 서비스 레벨의 수준까지 개발이 가능해보입니다.그것도 최신 기술을 활용해서 말이죠.쿼커스를 활용해서 API 서버를 개발해보고자 하시는 분들은 링크 를 확인해보시기 바랍니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 쿼커스 </tag>
        
          <tag> 쿠버네티스 </tag>
        
          <tag> 네이티브 </tag>
        
          <tag> 자바 </tag>
        
          <tag> 솔루션 </tag>
        
          <tag> 한빛미디어 </tag>
        
          <tag> quarkus </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 실전 아파치 카프카]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2021/04/19/apache-kafka/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎아파치 카프카는 링크드인에서 링크드인 웹사이트 로그를 처리해서 웹사이트 활동을 추적하는 목적으로 개발되었습니다.그래서 아래의 목적을 가지고 개발이 되었습니다.  높은 처리량으로 실시간 처리한다.  임의의 타이밍에서 데이터를 읽는다.  다양한 제품과 시스템에 쉽게 연동한다.  메시지를 잃지 않는다.카프카는 위의 목적을 실현시키기 위해 메시징 모델을 사용 합니다.메시징 모델은 Producer, Broker, Consumer 이 3가지 요소를 가지고 구성됩니다.카프카의 메시징 모델은 여러 컨슈머가 분산 처리로 메시지를 소비하는 모델과 여러 서브스크라이버에 동일한 메시지를 전달하고, 토픽 기반으로 전달 내용을 변경하는 모델을 사용하고 있습니다. 이 두가지 모델을 실현하기 위해 컨슈머 그룹이라는 개념을 도입하여 컨슈머를 확장 구성할 수 있도록 설계하고 있습니다.기본 구조는 Producer에서 메시지를 생성해서 전달하면 기본적으로 broker가 수집하고 소비자에게 전달하는 구조 입니다.심플한 구조지만 확장을 위해서는 기본적으로 큐잉모델을 쓰며 실시간 처리, 임의의 타이밍에서 데이터를 읽기, 메시지를 잃지 않는다는 목적을 위해 추가적으로 필요한 구성요소가 생깁니다. 이런 목표들을 만족시키기이 위해 디스크에 영속화하고 쉬운 API를 제공하며 전달 보증의 기능이 들어가 있습니다.이런 기능들 덕분에 카프카는 아래의 목적으로 구축하고 이용될 수 있습니다.  데이터 허브로서의 역할  여러 시스템 사이에서 데이터를 상호 교환합니다.  로그 수집  BI 도구를 이용한 리포팅과 인공지능 분석을 위해 여러 서버에서 생성된 로그를 수집하고 축적할 곳에 연결한다.  웹 활동 분석  실시간 대시보드와 이상 탐지/부정 검출 등 웹에서의 사용자 활동을 실시간으로 파악한다.  사물인터넷  센서 등 다양한 디바이스에서 보낸 데이터를 수신해서 처리한 후 디바이스에 송신한다.  이벤트 소싱  데이터에 대한 일련의 이벤트를 순차적으로 기록하고 CQRS 방식으로 대량의 이벤트를 유연하게 처리한다.경우에 따라서는 직접적으로 개발해야 하는 부분도 있으며 그 때문에 책에 예제가 포함되어 있으며 Java를 사용하여 기본적인 구축을 할 수 있도록 가이드 되어 있습니다.카프카를 잘 모르는 사람도 기본적인 서버 개발의 지식만 있다면 충분히 따라할 수 있도록 구성되어 있어 카프카에 대한 이해를 한 층 더 높일 수 있겠다는 생각이 들었습니다.카프카를 처음 도입하거나 시도해보고자 하는 분들에게는 도움이 되리라 생각합니다.실전 아파치 카프카는 링크 에서 보실 수 있습니다.이 리뷰는 한빛미디어 &lt;나는 리뷰어다&gt; 활동을 위해서 책을 제공받아 작성된 서평입니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 아파치 </tag>
        
          <tag> 카프카 </tag>
        
          <tag> 한빛미디어 </tag>
        
          <tag> 인프라 </tag>
        
          <tag> 파이프라인 </tag>
        
          <tag> 구축 </tag>
        
          <tag> 시스템 </tag>
        
          <tag> 클라우드 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 리팩터링]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2021/03/21/Code-refactoring/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎개발자 여러분! 리팩터링을 얼마나 자주 하시나요?개발자로 일을 한다면 일을 하는 동안에 내내 하게 되는게 리팩터링이 아닐까 싶습니다.어떤 새로운 개발을 한다고 해도 결국 리팩터링을 하게 되는 순간이 오는 것 같습니다.저는 리팩터링이 없이 일을 해야 한다고 하면 엄청난 두려움이 엄습해 오는데요.그만큼 더 좋은 코드에 대한 끊임없는 갈망이 있는 듯 합니다.개발 업계에서 유명한 저자이자 공학자 등의 타이틀을 가지고 있는 마틴파울러가 리팩터링을 하면서 만든 기준들과 방식들에 대해 정리한 책이 바로 이 리팩터링 입니다.만약에 이 글을 읽는 분이 리팩터링에 대해서 처음 들어보셨다면 꼭 이 책을 일독하시는 것을 권합니다.아마도 리팩터링이라는 단어를 듣지 못하셨다고 하더라도 의미를 조금 알게 된다면 이미 리팩터링을 하고 있구나 라고 생각하시게 되실 수도 있습니다.리팩터링이라는 것이 그만큼 개발 하기 위해 필수 불가결한 존재이기 때문 입니다.간단하게 중복 변수를 제거하는 법부터 함수 재활용, 읽기 쉬운 코드로 변환하는 법등 일반적인 상황에서 활용할 수 있을 만한 방법과 기술들을 자세한 코드들과 함께 설명하고 있습니다.중간쯔음부터는 리팩터링 하는 중간에 필요한 테스트 코드 작성법과 테스트 코드를 통해 안전하게 리팩터링 하는 법에 대해 설명해줌으로써 오래된 알 수 없는 코드를 리팩터링 할 때 어떤 방식으로 하면 문제 없이 할 수 있는지에 대해 설명하고 있습니다.리팩터링을 어떻게 해야 하는지 잘 모르는 방법에 대해서 설명을 해 뒀다면 언제 리팩터링을 해야 하는지에 대해서도 친절하게 설명해 두었습니다.저의 생각은 사람마다 다르게 느끼는 부분이라고 생각합니다만 정말 정확하게 그걸 잘 번역해주셨다고 생각합니다.바로 “코드에서 나는 악취” 파트 인데요.어떤 사람은 코드가 무슨 음식이냐며 코드에서 어떤 악취가 나냐고 말씀 하시는 분들도 있으실 것 같습니다.하지만 저는 저 부분이 너무 크게 공감이 되었던 부분이 정말 코드에서 나는 악취느낌이기 때문입니다.저는 보통 이런 상황에서 코드의 악취를 느끼는 것 같습니다.  결과물이 잘못 될 것 같다.  이상한 코드가 될 것 같다.  다른 사람이 내 코드를 이해하지 못할 것 같다.  반복되는 비슷한 코드가 많아진다.  함수 하나를 파악하는데 스크롤이 길어진다.실제 책에는 더 자세한 내용과 함께 어떻게 하면 이런 것들을 쉽게 알아챌 수 있는지도 함께 가이드 하고 있습니다.리팩터링에 대한 모든 것을 담고 있죠.더불어 개발자라면 지향해야 하는 방향에 대해서 함께 나와 있다고 생각합니다.리팩터링을 하는 것 자체가 더 좋은 코드를 만들기 위한 노력이라고 생각합니다.하지만 보통 리팩터링에 대해서는 어떻게 해야 한다 하는 내용은 잘 알려주지 않습니다.잘 모르기도 하구요. 하지만 리팩터링을 하지 않으면 코드는 죽어가게 됩니다.죽은 코드는 되살릴 수 없죠.유지보수를 하는 입장에서도 새롭게 개발을 하는 상황에서도 리팩터링은 꼭 필요한 작업인 것이죠.리팩터링에 대해 자세히 알고 싶고 제대로 알고자 하는 분이라면 리팩터링을 추천합니다.리팩터링은 링크 에서 보실 수 있습니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 코드 </tag>
        
          <tag> 리팩토링 </tag>
        
          <tag> refactoring </tag>
        
          <tag> 리팩터링 </tag>
        
          <tag> 마틴파울러 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 비즈니스 머신러닝]]></title>
      <url>/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0/2021/02/22/machine-learning-for-business/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎저는 이 책을 읽고 “머신러닝은 개발자들만 할 수 있는 것일까요?” 라는 질문에 대해 생각을 했습니다.저는 지금까지는 머신러닝은 개발자들만 할 수 있는 영역이라고 생각 했었습니다. 이 책을 읽으면서 그게 아닐 수 있겠다는 생각이 일단 들었습니다만, 그럼에도 불구하고 IT 베이스의 지식이 없다면.. 그러니까 전공이 컴퓨터가 아니면 꽤 많은 공부가 필요할 것이다 라고 결론을 내렸습니다.물론 이 책에서 얘기하는 개발자가 아니어도 할 수 있다는 주장에 대해서는 이전과는 생각이 바뀌게 되었습니다. 그리고 이 책에서 얘기하는 것이 개발의 영역이 아닌 비즈니스를 만드는 사람들을 위한 책이라는 생각이 들었습니다.머신러닝을 실행시켜보기 위한 최소한의 기술적인 부분에 대해서는 필요하겠지만 그게 어떤 개발 능력에 대한 필요성은 아니라는 느낌이 들었습니다.컴퓨터 베이스가 아닌 사람은 이 책에서 나오는 주피터 또는 예측 알고리즘에 대한 구조를 익히는데도 쉽지 않을 것 같습니다.기본적으로 세이지메이커를 쓰려면 클라우드 시스템에 대한 이해가 어느정도는 필요하다고 생각하고, 주피터 역시 이게 어떻게 동작하는지를 모른다면 제대로 활용하는 것이 쉽지 않겠다는 생각이 드네요.비즈니스에 대해 충분한 이해와 어떻게 만들 것인가에 대한 계산과 모델이 머리속에 그려지지 않는다면 아마 제대로 머신러닝을 하기가 쉽지 않겠다 싶었습니다.이 책을 읽다보면 현재 내가 하고 있는 업무의 비즈니스 로직에 대해 이해를 높이고 그 이해를 통해 실질적인 머신러닝을 적용해 볼 수 있을 듯 합니다.더불어 머신러닝의 기본적인 설계를 충분히 진행할 수 있는 능력을 얻으실 수 있을 것입니다.비즈니스 머신러닝의 기초를 다잡고 실제 비즈니세에 대한 인사이트를 얻을 수 있는 이 책은 링크 에서 보실 수 있습니다.]]></content>
      <categories>
        
          <category> 도서리뷰 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 머신러닝 </tag>
        
          <tag> 세이지메이커 </tag>
        
          <tag> 주피터 </tag>
        
          <tag> 비즈니스 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[회고의 의미]]></title>
      <url>/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/2021/01/03/meaning-review/</url>
      <content type="text"><![CDATA[2020년이 끝나고 2021년이 시작 되었네요.새로운 해가 시작하게 되면 많은 곳에서 신년계획이라며 새로운 계획들을 발표하죠. 회사에서도 새로운 해가 시작되기전에 조직개편이나 종무식등 성과를 발표하고 자축을 합니다. 물론 성과가 좋지 않은 경우에는 상여금의 삭감 또는 연봉 인상을 하지 않는 등비용을 줄이게 되죠. 동시에 새로운 해에는 수익을 더 높이기 위해 세운 계획들을 더 철저하게 점검하고 체크합니다.회사 차원에서도 이런 많은 일들을 하게 되는데 개인 차원에서는 어떤가요? 저는 “회고”라는 것을 합니다. 물론 회사에서 주마다 회고를 하기도 하고 개인으로도 평소 회고를 많이 하는 편이긴 합니다만, 그래도 신년이 되면 년단위의 회고를 하려고 하는 편입니다.이전에 회고를 모르던 때와 비교했을 때 신년 회고를 해두면 여러가지로 도움이 된다는 것을 알기 때문입니다.제가 생각하는 회고는 지나간 시간동안 제가 한 것들을 되짚어 보고 실패 했을 때는 왜 실패를 했는지, 성공 했을 때는 어떤 이유로 성공 했는지 짚어보고 작게나마 인사이트를 얻어 더 나은 방향으로 가는 것을 말합니다.이런 회고는 하고 나면 분명 지치지만 보통 의미 있는 결론을 도출해내는 경우가 많습니다.물론 회고를 한 후 그것을 지키느냐는 또 다른 문제겠지만 무엇을 잘했고 무엇을 못했는지 체크하고 더 나은 방향으로 가는 것은 분명 의미가 있다고 생각합니다.경우에 따라서는 회고가 작년 한해동안 내가 못한 것만 체크하며 후회만 가득해지게 되기도 하는데, 그것을 방지하기 위해 그래서 올해는 어떻게 할 것인가를 정하는 것입니다.물론 정하지 않아도 상관 없지만 정하지 않는 경우 내가 세운 계획들을 실천할 수 있는 원동력이 현저하게 떨어집니다. 계획은 자고로 최대한 자세히 세우는 것이 실제 계획대로 진행하기가 수월하기 때문이죠.이렇게 저에게 “회고”는 신년계획을 세우는 것 이상의 의미를 가집니다. 반성과 더불어 새로운 한 해를 살아갈 에너지를 얻기도 하구요.요즘은 워크샵을 통해 여러명이 온라인으로 모여 회고를 진행하기도 합니다.코로나 이전에는 오프라인으로 모여서 회고와 신년계획을 함께 세우며 의지를 다지기도 했지요.아직 신년계획을 세우기 전이라면 작년 회고와 함께 신년 계획을 세워보는 것은 어떤가요?올해는 코로나가 잠잠해지고 더 에너지 넘치는 한해가 될지도 모릅니다. 😁]]></content>
      <categories>
        
          <category> 생각정리 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 회고 </tag>
        
          <tag> 신년계획 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[회사 이야기] 저는 스타트업에서 일하는 개발자 입니다.]]></title>
      <url>/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/2020/12/28/Why-work-in-startup/</url>
      <content type="text"><![CDATA[나는 왜 스타트업을 선호 하는가?제목에서도 알 수 있듯이 저는 스타트업에서 일하는 개발자입니다.지금 회사가 꼭 4번째 스타트업이네요.스타트업 이전에는 그래도 규모가 있는 회사에 다니기 위한 목적을 실현하기 위해서 나름대로 노력하면서 살아왔었는데요. 지금은 오히려 큰 기업들보다 스타트업을 더 선호하게 되었습니다.제가 스타트업을 왜 더 선호하는지 얘기하기 전에 먼저 큰 기업이라는 것을 정의하는 게 이 글을 읽고 계신 분들과 저의 기준을 맞추는 데 도움이 될 것 같네요.제가 생각하는 큰 기업의 의미는 이렇습니다.이 글에서 큰 기업이란..회사가 더 큰 법인의 자회사 이거나, 같은 법인명 아래에 있더라도 내가 일면식도 없는 직원이 있는 것입니다. 여러분이 생각하는 큰 기업과 비슷한가요?제가 세운 기준으로 따지면 사실 아주 작은 규모의 법인이라도 대기업의 자회사가 되면 큰 기업이 됩니다. 이러한 기준을 정하게 된 이유는 큰 기업이 되는 순간 협업을 해야 하는 범위가 달라지기 때문입니다.작은 기업의 경우 협업을 해야 하는 범위가 회사 밖을 벗어나지 않습니다.보통은 팀 내에서 논의 할 내용을 정리하거나 기껏해야 다른 팀과 협업을 하는 게 전부일 가능성이 높습니다. 다른 팀이어도 일면식도 없는 사람과 협업을 해야 하는 상황까지 잘 오지는 않죠. (물론 부서 또는 하는 일 자체가 외부와 협업을 해야 하는 경우는 조금 다릅니다)하지만, 큰 기업의 경우에는 조금 다릅니다.꽤 많은 업무가 다른 파트, 다른 부서와의 협업이고 때에 따라서는 다른 회사와 같이 협업해서 제품을 만들어내야 하는 경우도 많습니다. 여기서 말하는 다른 파트, 다른 부서는 당연히 일면식도 없는 사람일 가능성이 높습니다. 따라서 내 상사에게 일을 어떻게 진행 시켜야 할지 물어보게 됩니다. 그렇게 한번, 두 번 절차가 늘어나다 보면 일을 처리하는 시간보다 준비하는 시간이 더 많아지죠.이 부분이 제가 스타트업을 더 선호하는 첫 번째 이유입니다.1. 절차 또는 프로세스일을 하기 위해 필요한 절차나 프로세스에 대한 부분입니다. 큰 기업들은 보통 자신들의 프로세스나 절차가 이미 완성되어 있습니다. 따라서 그걸 지키지 않으면 일을 진행하지 않습니다. 그리고 큰 지각변동이 일어나지 않는 이상 그 절차들이 바뀌는 일도 없습니다. 아니 그런 지각변동이 일어나도 바뀌지 않죠. 그 절차나 프로세스를 통해 일을 잘 해왔고, 큰 문제가 일어나지 않기 때문입니다. 이게 문제가 되는 것은 아닙니다. 하지만 불필요한 부분은 분명히 존재하고 그것을 하지 않는다고 해서 지금과 달라지는 것은 없지만 이유도 없이 그냥 절차니까 해야 한다는 것이 직원들에게는 스트레스이자 이해가 가지 않는 일인 것이죠.제가 알고 있는 보통의 스타트업이라면 불필요한 절차는 무시하고 빠르게 아이디어를 발굴해 그걸 실험하고 정말 사용자에게 필요한 제품을 만들어내는 방식을 택하고 있을 겁니다. 아마 스타트업을 다니고 계시는 많은 분도 이런 절차적인 부분들 때문에 스타트업을 선택해서 일하고 계시지 않을까 싶습니다.많은 스타트업들이 뚜렷한 비즈니스 모델이 없는 상태에서는 빠르게 의사 결정을 하고 제품을 만들어 고객들의 반응을 보는 것이 중요하기 때문에 절차 또는 프로세스보다는 제품을 만들어내는 것에 더 집중하는 것으로 생각합니다. 물론 이렇게 일을 하다 보면 업무의 범위가 명확하지 않아서 한 사람에게 일이 몰리게 되어 번아웃이 오기도 합니다. 그 때문에 Work-Life Balance(워라벨) 를 중요시하게 여기는 사람들도 늘어가고 있는 듯합니다. 저의 개인적인 생각으로 워라벨보다는 Work-Life Integration이 더 중요하다고 생각합니다만, 여기서 할 이야기가 아니니 다른 글에서 정리하도록 하겠습니다.2. 성장저의 전체 경력은 10년이 조금 넘습니다. 그 경력 동안 반절은 스타트업의 특성이 없는 기업에 반절 정도는 스타트업이라고 지칭할 수 있는 기업에서 시간을 보냈습니다. 당연히 눈물을 쏙 뺄 정도로 힘들었던 적도 있고 그래도 어느 정도 저의 일과를 보장해주는 회사에서 일하며 지냈던 적도 있었습니다. 재미있는 부분은 어떤 문화를 가진 회사였든지 저에게 공통으로 찾아오는 것이 바로 급격한 성장이었다는 겁니다.안정적인 기업에서 상사가 정리해서 던져주는 정리된 업무만 하던 쳇바퀴 같은 굴레에서 자발적으로 벗어나 스타트업으로 이직하면서 새로운 도전을 시작했었습니다. 당연히 쉽지 않은 일이었고 새로운 분야였기 때문에 해야 할 공부도 많았었죠. 하지만 그 덕분에 일을 보는 시야의 범위도 달라졌고, 내가 할 수 있는 일이 무엇인지 다시 한번 더 명확하게 볼 수 있었습니다.증명할 수는 없지만, 흔히 스타트업 업계에서 일하시는 분들 얘기를 듣다 보면 “역할이 명확하게 나누어져 있는 곳에서 일할 때보다 더 많은 일을 하게 되면서 압축적으로 배우고 더 많은 일을 하게 된다. 그래서 힘들긴 하지만 더 3년을 넘게 걸려 배울 것을 1년 동안 배우게 된다”라고 얘기를 합니다.저 역시 이 내용에 전적으로 동의합니다. 압축해서 배우는 기간에 대해서는 개인차가 있겠지만, 분명한 건 압축적으로 일을 하며 배우게 된다는 겁니다. 그런 부분들 때문에 스타트업에서 일하며 얻게 되는 성장은 꽤 크다고 생각합니다. 특히 큰 기업을 다니면서는 투자를 받아서 회사가 급격하게 커진다거나 하는 경험은 절대 할 수 없기 때문에 회사가 커졌을 때 어떤 식으로 바뀌어야 하는지 또 어떻게 적응해야 하는지 알게 되는 것은 매우 큰 자산이 된다고 생각합니다. 이런 성장의 경험을 바탕으로 더 큰 성장을 이룰 수 있다고 생각하기도 하고요.제가 생각하는 스타트업 선호의 이유는 이렇게 크게 두 가지 정도인 것 같습니다.불필요한 절차나 프로세스를 지키기 위해 문서작업을 해야 하거나 알 수 없는 이유로 절차니까 해야 해 같은 것들을 할 필요가 없다는 점.짧은 시간 동안 많은 업무를 하면서 빠르게 성장할 수 있다는 점.빛이 있으면 그림자가 있듯이 당연히 이런 장점이 있다면 좋지 않은 부분도 있겠죠. 대표적으로는 일이 많다는 겁니다. 모든 스타트업들은 빠르게 시도하고 결과물을 만들어내야 하므로 단기간에 많은 일을 처리해야 할 수밖에 없습니다. 이 역시 여기에서 필요한 내용은 아니니 자세한 내용은 다른 글에서 또 다루겠습니다.어떠신가요? 동의하시는 분도 있겠지만 또 동의하지 않는 분들도 있으실 거로 생각합니다.어디까지나 저의 개인적인 생각이지만 많은 스타트업 회사에서 나타나는 공통적인 부분이 아닐까 하여 정리해보았습니다.혹시 스타트업에 장점이 뭐가 있을까 궁금하셨던 분들이 조금은 해소되셨다면 좋겠습니다.그러면 다음번에 또 다른 글로 찾아뵙겠습니다.]]></content>
      <categories>
        
          <category> 생각정리 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 스타트업 </tag>
        
          <tag> 큰기업 </tag>
        
          <tag> 절차 </tag>
        
          <tag> 프로세스 </tag>
        
          <tag> 성장 </tag>
        
          <tag> 번아웃 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[회사 이야기] 이직.. 어떤 회사를 가야하는지 고민하는 분들에게..]]></title>
      <url>/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/2020/12/21/moving/</url>
      <content type="text"><![CDATA[안녕하세요. 괴짜 개발자 namedboy 입니다. 😎오늘은 이직에 관련된 내용으로 글을 써볼까 합니다.이직이라고 하면 누군가에게는 처음 경험하는 것일지도 모르고, 누군가에게는 생각만해도 머리아픈 일일지 모릅니다.보통은 이직을 하고자 하면 회사의 조건부터 생각합니다.연봉은 얼만지, 거리는 가까운지 먼지, 회사의 문화는 어떤지, 워라밸은 어떤지, 복지는 어떤것들이 있는지 등등. 물론 중요하죠. 하루에 8시간 이상 정해진 공간에서 일을 해야 하는데 허리가 별로 좋지 않은 저는 의자까지 따지고 싶을 때가 있습니다.가끔 인터넷을 보면 여러가지 조건을 보며 어디로 가야 할지 고민을 하는 이직 고민들들이 보일 때가 있습니다.고민이 되는 것은 당연한 일입니다. 하루 8시간 이상 보내며 일을 해야 하는 곳이니 만큼 이것 저것 따져보아야 하겠지요. 이런 흔한 고민들을 보다 보면 뭔가 하나가 빠져 있다는 것을 느끼게 됩니다.저는 일을 한다는 것은 기본적으로 나의 인생에 방향을 정하는 것이라고 생각합니다. 그러니까 어떤 일을 할지 정하는 것이 내가 추구할 방향을 정하는 것이 됩니다. 내가 어떤 일을 할지에 따라 전문성을 키우는 부분이 달라지는 것이죠. 깊게 알고 싶은 분야가 있는지, 또는 깊게 아는 것 보다 여러가지를 경험해보고 인사이트를 얻는 등. 일에 따라 나의 본질이 달라지는 것이죠.헌데 고민들을 보다 보면 그 본질이 전혀 고려되지 않은 의미 없는 질문들이 많습니다. 어디에서 어떤 일을 하는지 정하는데 정작 본인이 추구하는 방향이나 추구하는 목표는 전혀 없는 것이죠.  “내가 나중에 어떻게 어떻게 하고 싶은데 지금 이런 선택지들을 고민하고 있다 어떤게 더 맞는지 모르겠다”만약 이런식의 질문이라면 미리 목표지점에 도착한 사람이 이 사람의 현재를 보고 조언을 해줄 수 있겠죠. 하지만 보통 올라와 있는 글들은 아래와 같은 형태 입니다.  “A는 연봉이 얼마고 복지는 이정도 인데 이런 일들을 하고, B는 연봉이 얼만데 복지가 좋고 이런 일들을 한다. 어디로 가야 할지 너무 고민 된다.”여기서 과연 어떤 조언을 해줄 수 있을까요? 보통 이런 조건들은 개인이 추구하는 모습에 따라 기준이 너무나도 달라집니다. 어떤 사람은 다른 모든 것들보다 연봉이 가장 중요할 수도 있고, 어떤 사람은 대출 같은 복지가 있는 곳으로 가야할 수도 있죠.이직을 위해 고민을 하고 계시는 분이라면 아래 내용들을 한번쯤 고민해보셨으면 좋겠습니다.#1 나의 현재 상황에 대해 정리해본다.내가 어디로 갈지 정하려면 지금 내 위치부터 정확히 아는 것이 중요합니다. 이건 길찾기와도 비슷합니다. 어디로 갈지 목표를 정하고 지금 내 위치가 어디인지 알아야 어느 방향으로 가고 어떤길로 갈지 정할 수 있습니다.지금의 내가 어떤 상황인지 어느정도 수준인지 가늠할 수 없다면 그것부터 치열하게 고민을 해야 합니다.#2 내가 회사에 무엇을 줄 수 있는가?회사가 채용을 하는 것은 채용하는 사람에게 얻을 수 있는 것이 있기 때문입니다. 내가 회사에 어떤 것을 줄 수 있는지 고민해보고 가능하다면 회사의 상사와도 면접이나 다른 기회들을 통해 얘기를 해보시길 추천드립니다. 내가 무엇을 줄 수 있는지 안다면 그걸 획사에 더 적극적으로 어필 할수도 있고 회사도 직원이 할 수 있는 것을 알수 있어 더 좋은 퍼포먼스를 낼 수 있게 도와줄 수 있습니다.#3 회사에서 얻을 수 있는 것이 무엇인가?나의 상황을 명확히 알았다면 내가 어디로 가야하는지에 대해서도 조금은 알 수 있게 됩니다. 그러면 그 가야할 길에 필요한 것들이 무엇인지 알게 되고, 내가 갈 회사에서 그것을 얻을 수 있는지 알아봐야 합니다. 때로는 눈에 보이는 복지나 연봉보다 내가 가는 길에 필요한 것을 얻기 위해 이직을 하는 것이 앞으로 인생을 살아가는데 더 도움이 될 때가 많습니다.나의 상황을 정리하고 내가 회사에 제공할 수 있는 것들이 무엇이 있을까 생각해보고 그럼 내가 필요한 것들은 무엇이고 회사에서 무엇을 얻을 수 있을지 가늠해본다면 성공적이지는 않아도 실패하지 않는 이직을 할 수 있지 않을까요?한번쯤 생각해보면 좋을 것 같아 이렇게 정리해봅니다.만약 이직을 고려하고 계시다면 꼭 성공하시길 빌겠습니다.]]></content>
      <categories>
        
          <category> 생각정리 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 방향성 </tag>
        
          <tag> 이직 </tag>
        
          <tag> 연봉, </tag>
        
          <tag> 복지, </tag>
        
          <tag> 일, </tag>
        
          <tag> 커뮤니티, </tag>
        
          <tag> 고민 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 밑바닥부터 시작하는 딥러닝 3]]></title>
      <url>/review/2020/12/21/deep-learning-3/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎혹시 딥러닝은 배우기 어려운 분야 라고 생각하시나요? 저도 비슷한 생각을 가지고 있습니다.아무리 책에서 쉽게 설명해도 여러 함수나 용어 자체가 익숙하지 않으면 이해가 어렵고 그만큼 배우기 어려워지죠. 제가 추구하는 것도 무엇이든 배울 때 완전히 이해를 하고 그 이해를 바탕으로 더 나은 것들을 생각할 수 있을 때 제대로 배우고 익혔다라고 생각합니다. 하지만 그렇게 하지 못하는 분야도 많죠.그렇게 하지 못했을 때 할 수 있는 나머지 방법 하나가 결과를 보고 과정을 이해하는 방법인데요. 지금 제가 리뷰할 이 책이 딱 그 방식으로 배우는 접근을 하고 있다고 느꼈습니다.사실 책 초반에 기초 이론을 습득한 사람이 이 책으로 공부하면 적당한 수준이라고 생각한다고 쓰여 있기도 합니다. 몇가지를 써보면 이렇습니다.  파이썬 기본 문법과 객체지향 기초 개념(필수)  밑바닥부터 시작하는 딥러닝 혹은 그에 준하는 딥러닝 기초 이론(필수)최소한 이 두가지 정도는 필요하다고 얘기하고 있습니다. 그 이유가 관련 이론과 함께 수학적인 메커니즘의 이해를 요하고 있기 때문입니다.이 책은 프레임워크를 만드는 방식을 채용했습니다.기술적인 이해와 이론이 워낙 어려우니 변수, 함수, 미분, 재귀, 반복문등을 만들어보면서 딥러닝 자체를 이해하는 시도인거죠.아무런 이해가 없어도 책을 따라서 하나씩 하나씩 만들면서 이해하고 딥러닝 프레임워크가 어떻게 동작하는지 알게 되는 것이죠. 물론 중간 중간 이론적인 내용도 이해를 해야 합니다. 그렇지 않으면 책에서 만들라고 해서 만들었지만 결국 내것이 아니라 책이 시켜서 한 것밖에 되지 않기 때문이죠.어쨌든 책에서 DeZero라는 프레임워크를 만들면서 딥러닝의 모델을 테스트하고 시험해보게 됩니다.처음에 변수를 만들고 그 다음 함수를 만들고 미분 고차 미분등을 처리하는 프로세스를 만들어 신경망처리를 하고 딥러닝을 처리할 수 있게 됩니다.정말 밑바닥부터 만든 딥러닝인것이죠.딥러닝에 대해 잘 몰라도 전체를 만들고 나서 각각 하나 하나의 프로세스가 동작하는 과정의 이해를 하고 나면 딥러닝이라는 분야에 대해 한층 더 이해하고 습득할 수 있지 않을까 생각해봅니다.이 책은 링크 에서 보실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> books </tag>
        
          <tag> programming </tag>
        
          <tag> deeplearning </tag>
        
          <tag> scratch </tag>
        
          <tag> hanbitmedia </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[개발 이야기] CTO의 일]]></title>
      <url>/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/2020/12/07/CTO/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎오늘은 CTO라는 직군이 회사에서 하는 일이 무엇일까에 대해 정리해보려고 합니다.CTO는 한국어로 바꿔보면 최고 기술 책임자 정도로 돌려 말할 수 있겠네요.저는 처음에 CTO는 프로그램을 개발하는 업무 보다는 서류에 대한 업무들이 더 많을 것이라 생각 했었습니다.지금은 막연하게 생각했기 때문에 그런 생각을 하지 않았을까 싶네요. 물론 서류작업도 하겠지만 서류작업이 주 업무일 것이라는 생각이 들지는 않습니다.지금의 생각은 개발조직을 관리하고 개발 조직의 방향성에 대해 다른 C-LEVEL의 임원과 의논해서 사업적으로 수익을 극대화 할 수 있는 방안을 찾는 것. 그리고 개발 조직의 비전을 회사의 다른 사람들에게 제시하는 역할을 할 수 있는 사람이 바로 CTO에 어울리는 사람이 아닐까 합니다.당연하게도 회사마다 CTO의 역할은 다를 것입니다. 10명이 안되는 아주 작은 스타트업 조직의 경우에는 CTO라는 직급의 의미가 일반 개발자와 크게 다르지 않을 것입니다. 실제로 개발 업무를 해야 하기 때문이죠. 그 때는 CTO가 하는 역할이 비전제시나 조직 관리가 아닌 회사의 수익을 책임지는 시스템을 만드는 것이 가장 중요할 것입니다.조금 규모가 커진 회사의 경우에는 당연하게도 개발팀의 관리 그리고 개발하고 있는 시스템의 일정 관리 등 관리적인 측면이 훨씬 더 강하게 필요하게 될 것입니다. 그만큼 팀은 커졌지만 전체적인 방향을 잡아줄 수 있는 사람이 필요하고 그게 CTO의 역할이 될 것이기 때문이죠.팀의 수준이 아닌 조직의 수준으로 회사의 규모가 커졌다면 이 때부터는 개발 업무에 대해서는 CTO가 하는 것이 아니라 다른 개발자들에게 맡기고 회사의 수익을 창출 할 수 있도록 새로운 방향을 찾거나 기술을 도입해서 회사의 수익을 높일 수 있는 방법을 계속해서 찾는 역할을 해야 합니다. 동시에 조직을 관리 하면서 현재 진행중인 시스템이 잘 돌아갈 수 있도록 해야겠죠. 개발프로세스를 사업에 맞게 변화시키거나 미래에 수입을 만들어내기 위해 개발 조직을 어떻게 변경할지 고민하고 실행에 옮기는 역할을 하게 될 것입니다.각 회사의 규모에 맞게 CTO의 역할과 해야 하는 일이 변화되는 것이죠.믈론 결국에 CTO는 기술을 통해 회사의 이익을 극대화 시키는 것이 목표이지 않을까 싶습니다.회사는 수익을 만들어야 유지를 할 수 있기 때문이죠.회사의 사업 방향을 잘 살펴보고 사업에 가속도를 붙이려면 어떤 기술이 필요한지를 고민해야 합니다. 그리고 사업적으로 기술을 적용했을 때 도움이 되는 부분을 찾아 기술적인 비전을 제시하는거죠.결국 CTO는 사업의 모델에서 기술을 사용하지 않았을 때와 기술을 사용했을 때를 비교해보고 어떤 부분에 기술을 사용하여 지원할 때 회사의 이익이 극대화 될 수 있는지 생각하고, 계산해서 현명하게 기술에 투자를 할 수 있도록 돕는 위치라고 생각합니다.간단하게 정리를 해보았는데 정리하면서 아직은 저도 많이 모르고 있다는 생각이 드네요.앞으로 공부할 것이 더 많아진 것 같아 기분은 좋네요.]]></content>
      <categories>
        
          <category> 생각정리 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 시작 </tag>
        
          <tag> CTO </tag>
        
          <tag> 공부 </tag>
        
          <tag> 기술 </tag>
        
          <tag> 비전 </tag>
        
          <tag> 사업 </tag>
        
          <tag> 방향성 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[개발 이야기] 개발, 직업과 취미 그 사이 어딘가.]]></title>
      <url>/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/2020/11/30/%EA%B0%9C%EB%B0%9C-%EC%A7%81%EC%97%85%EA%B3%BC%EC%B7%A8%EB%AF%B8%EA%B7%B8%EC%82%AC%EC%9D%B4/</url>
      <content type="text"><![CDATA[가끔 개발 얘기를 하다 보면 개발을 배우고 싶다고 얘기하시는 분들을 만나게 됩니다.그러면 저는 두 가지 케이스로 얘기를 이어나갑니다.첫 번째는 개발을 시작하려면 평생 공부할 각오를 하고 시작하는게 좋다고.. 그렇지 않으면 기껏 시작한 개발이 어느 순간 무너지게 되고 그간 해온게 아무런 의미가 없어진다고.두 번째는 뭐든 시도하는건 좋다고 한번 해보라고 얘기합니다. 시작이 반이라며 일단 ‘hello world’를 컴퓨터 화면에 찍으면 이미 반은 한거라고 말씀드리죠.일단 첫 번째 개발을 시작하려면 평생을 공부할 각오로 시작하라고 말씀을 드리는 것은 사실 저를 투영시켰기 때문에 그렇게 말씀드리는게 아닐까 싶어요. 너무 어렵게 공부를 했었고 지금도 다른 사람들은 좀 더 편하게 갈 수 있을지도 모르는 길을 어렵게 어렵게 걸어가고 있는 느낌이 드네요.어쨌든 평생을 공부해야 한다고 얘기하는 이유는 제가 지금까지 개발을 해오면서 경험한 일들이 있었기 때문이에요. 일단 컴퓨터 분야는 정말 새로운게 많이 나오는 분야라고 생각해요. 새로운 기술, 제품, 이론, 방식 등등 내용이 부족하다면 다른 업계에서 이미 쓰고 있는 내용을 재편해서 정리해 사용하기도 합니다. 특히나 스타트업의 경우에는 제품을 빠르게 구현하는데 집중하게 되어 기술이 나오는 것보다 더 빠르게 제품이 탄생하기도 합니다.늦으면 1년 빠르면 6개월 안에도 언어는 새로운게 나오거나 변화를 하고 업데이트가 이루어집니다. 정책이 변경되고 그에 따라 회사에서 쓰는 기술의 비용이 증가하기도 하구요. 새로운 기술 때문에 기존의 방식을 탈피하여 새로운 방식으로 넘어갈 수 있게 되어 비용이 줄어들기도 합니다.문제는 이렇게 환경의 변화에 적응 하려면 매번 새로운 기술이 나올 때 마다 공부하고 테스트 해보면서 제품에 적용을 해야 한다는 것이죠. 그렇지 않으면 제품의 경쟁력이 떨어지게 되기 때문에 더 이상 시장에서 찾지 않는 제품을 만들게 됩니다. 만약 회사 입장에서라면 더 이상 시장이 원하는 기술을 제공할 수 없는 개발자는 필요 없어지게 되는거죠.저는 이러한 이유 때문에 죽을 때까지 공부를 해야 한다고 생각하게 되었습니다. 실제로 제 주위에는 열심히 새로운 기술을 찾아보고 익히는 사람과 그렇지 않는 사람으로 나뉘어 지는데 그 둘의 격차는 점점 더 벌어지고 있습니다. 연봉, 회사 수준, 하고 있는 일등 거의 모든 면에서요. 그러니 정말 진지하게 직업으로 삼기 위해 개발을 배우고자 하는 분이 계시다면 죽을 때까지 기술을 공부할 수 있는지 한번 자신에게 물어보셨으면 좋겠습니다.두 번째로 말씀드렸던 한번 시도해보라고 얘기하는 것은 개발은 취미로라도 시작할 수 있는 것이기 때문이죠. 프로그램 개발을 배울 수 있는 국비지원 프로그램부터 학원 그리고 MOOC 같은 무료 강의들도 있고 인터넷을 좀 찾아보면 양질의 컨텐츠들을 충분히 찾을 수 있기 때문이에요.처음에 취미로 시작했다가 전문성을 찾게 되어 전향한 케이스도 있고 내가 상상하는 것을 만들어내는 것 자체는 생각보다 괜찮은 경험이기 때문입니다. 어쨌든 ‘한번 해볼까’라고 얘기하시는 분들은 생각이 있으신 분들이고 그걸 행동으로 옮기기만 하면 되기 때문에 주로 한번 시작해보시라 말씀 드립니다. 시작했다가 이길은 나의 길이 아니구나 하면 원래 하시던 일을 하면 되고 해볼만 하다는 생각이 드시면 좀 더 도전해보아도 좋을테니 말이죠.사실 전 프로그램 개발은 지금부터라도 시작하면 어떻게든 도움이 될꺼라고 생각합니다. 그 이유는 앞으로 프로그램 개발 인력에 대한 수요가 늘어나면 늘어나지 줄어들지 않을 것이기 때문이고, 더구나 성인이 아닌 앞으로의 학생들은 프로그램 개발을 이미 배운 상태로 사회에 나오기 때문에 성인의 경우 프로그램 개발을 모르면 어쩌면 대화를 하기 힘들어지는 세상이 올지도 모르기 때문입니다.마지막으로 개발을 하는 분들 중에 취미+일 모두가 개발인 경우가 있습니다. 저도 그런쪽의 성향을 가지고 있습니다. 새로운 것을 보면 한번쯤 해보고 싶은 마음이 샘솟아서 저에게 딱 맞는 분야라는 생각이 듭니다. 외부에서 보기에 조금 이상하게 보일 수 있겠다 생각이 들지만, 그저 새로운게 좋아서 하다보니 새로운 것(새로운 기술)을 계속 찾게 되더군요.기술 덕후라는 말이 어울릴지도 모르겠네요.ㅎ직업으로서, 그리고 취미로 개발을 배워보는 것은 괜찮은 선택이었던 것 같네요. 여러분도 개발을 한번 시작해보는 것은 어떤가요? 어쩌면 적성에 딱 맞는 일이 될지도 모릅니다.]]></content>
      <categories>
        
          <category> 생각정리 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 시작 </tag>
        
          <tag> 개발자 </tag>
        
          <tag> 공부 </tag>
        
          <tag> 취미 </tag>
        
          <tag> 기술 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[개발 이야기] 어떻게 성장해야 하는가?]]></title>
      <url>/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/2020/11/23/How-to-grow/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎오늘은 개발자가 성장하는 방향에 대해 저의 생각을 정리해볼까 합니다.사실 ‘성장’이라는 단어는 개발자 뿐만 아니라 많은 사람에게 해당되는 내용이라고 생각이 들지만, 어찌되었거나 저는 개발자이고 제일 잘 아는 분야갸 개발이기도 하니 개발자의 성장에 적어보겠습니다.물론 저의 말이 당연히 정답도 아니고 저보다 더 큰 조직에서 일을 하셨던 분이거나 저보다 경력도 더 많고 일을 오래 하신 분들도 계실거라 생각합니다.다만 그저 저의 경험을 정리한 글이라 생각하고 봐주시면 좋을 것 같습니다.제가 그동안 만난 개발자 분들은 성장이라는 키워드를 기준으로 3가지 정도로 크게 나눌 수 있을 것 같습니다.  성장이 멈춘 사람  개발자로 계속해서 성장하려는 사람  개발을 했었지만 개발자가 아닌 방향으로 성장하려는 사람음.. 더 디테일하게 나누고 적으라면 적을 수 있을 것 같은 느낌이 들지만 큰 단위로 나누는 것은 이정도가 맞을 것 같습니다.첫 번째로 성장이 멈춘 사람 입니다.개인적으로 굉장히 안타까운 경우라고 생각합니다. 물론 정작 본인은 성장이 멈췄다고 생각하지도 않고 무엇인가 해야 한다는 것도 알고 있으며, 공부를 하고 있다고 생각합니다. 하지만 현실에서 달라지는 것은 없죠. 나름대로 공부는 하고 있지만 무엇에 도움되는 공부인지 알지 못한채로 하고 있고, 그걸 습득하는 속도 또한 굉장히 느립니다. 결국 공부하다가 다음 단계로 넘어가지 못한 채 또다른 새로운 것을 봐야 하는 상황이 됩니다. 그렇게 반복하게 되죠.본인은 공부해야 하는 것도 잘 알고 주변에서 공부를 하라고 얘기도 합니다만, 현실에서 벗어날 용기가 없거나 이런저런 힘들다는 핑계로 결국 하지 않습니다. 그렇게 시장에서는 더 이상 필요 없는 사람이 되고 도태된 채로 지금 다니는 회사에서 나오는 월급 받으며 생활을 하죠. 그 이상의 무엇은 없습니다.물론 경우에 따라 각성!을 외치며 급격하게 성장하기도 합니다. 그러면 그동안 성장하지 못했던 것을 만회하고 더 승승장구하며 살아갑니다.두 번째는 개발자로 계속해서 성장하려는 사람 입니다.얼마전까지만 해도 저도 이 케이스 였습니다. 평생 개발로 밥먹고 살고 싶다고 얘기하고 다녔었으니까요. 죽을때까지 개발할 수 있었으면 했지요. 지금도 크게 변한 것은 없지만 개발자가 아닌 방향으로 성장하는 것도 필요하겠다는 생각이 들어 지금은 약간 방향이 변경된 상태입니다.개발자로 성장하면서 살아가려는 사람은 개발 공부를 게을리 하지 않습니다. 새로운 기술이 나오면 한번 정도 시도해보고 어떤 부분이 좋은지 나쁜지 나름대로 분석을 합니다. 그 후에 필요한 곳이 생기면 사용하기 위해서죠.더불어 개발자에게 필요한 능력은 정말 많기 때문에 깊고 깊게 공부를 합니다. 제 느낌으로 개발자로 제대로 성장하신 분들은 엥간한 박사 수준이라는 생각이 듭니다. 개발자로 성장한 분들의 특징은 특정 분야에서 회사에 그 분 보다 잘하는 분은 없다는 느낌을 받게 됩니다. 물론 회사 내에서 사용하는 모든 기술이 해당될 수도 있습니다. 그래서 한 회사에서 기술적으로 최고에 달하는게 개발자로 성장하고자 하는 분들의 목표가 아닐까 생각이 듭니다.세 번째로 개발자가 아닌 방향으로 성장하려는 사람 입니다.현재의 제가 개발자 + 비즈니스를 이해하고 그에 맞게 결정을 하는 사람이 되고자 하는 방향을 설정했는데 아마도 완전하게 개발만 하는 개발자로 성장하려는 사람이 아니라면 모두 3번에 해당한다고 할 수 있을 것 같습니다.물론 개발자가 개발만 하면서 살 수도 있습니다. 하지만 특정 상황이 주어지지 않는다면 특히나 국내의 경우에는 개발자로 계속해서 성과를 내며 연봉을 높이며 성장하기란 쉽지 않습니다.실제로 결정 권한이 주어지지 않기 때문이라고 생각합니다. 물론 기술적으로 무엇이 필요하다 필요 없다 정도의 조언을 줄 수는 있겠지만 비즈니스를 모른채 개발만 잘한다고 해서 지속적으로 회사 내에서 인정 받으며 성장할 수 있기란 쉽지 않은 것 같습니다.어느 정도 개발자로서 성장을 해왔다면 자연스레 팀장이나 회사의 더 높은 직책을 생각하게 됩니다. 다만, 그 직책은 보통 개발 직군이 아니죠. 많은 회의를 해야 하거나 관리를 해야 하는 자리인 경우가 많습니다.결국 그 일을 잘 아는 사람이 그 일을 하는 사람을 관리해야 일을 시켜도 잘 시킬 수 있을테니까요.여담사실 저는 욕심이 많아서 2번과 3번을 모두 충족시키고 싶지만 그게 잘 될지는 미지수입니다. 여기에 이렇게 글을 쓰는 이유도 나중에 이런 생각으로 이렇게 살아왔다는 기록이 될 수 있기 때문입니다.어쨌든 성장에 대한 저의 생각을 간단하게 정리해보았습니다. 누구나 성장을 하고 싶다고 생각합니다. 하지만 기본적으로 성장이라는 것이 쉬이 되지는 않는 것이고 많은 노력이 드는 만큼 개인이 가진 방향을 잘 설정하셔서 원하는 모습으로 성장해 나가셨으면 좋겠습니다.]]></content>
      <categories>
        
          <category> 생각정리 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> 성장 </tag>
        
          <tag> 개발자 </tag>
        
          <tag> 관리자 </tag>
        
          <tag> 관리 </tag>
        
          <tag> 공부 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] Learning React]]></title>
      <url>/review/2020/11/23/Learning-React/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다. 😎오늘은 책 Learning React에 대해 얘기해볼까 합니다.React는 요즘 Front 개발에서 많이 사용하고 있는 Javascript 라이브러리 중 하나죠.페이스북이 만들었고 1가지를 제외하고 특유의 쉬운 사용성 덕분에 빠르게 사람들에게 알려진게 아닐까 싶습니다.제가 거르고 싶었던 한가지는 redux와 flux입니다. 개념을 이해하는 것도 쉽지 않고 이해 한다고 해도 제대로 사용하는 것 역시 만만치 않기 때문입니다.React 자체에 대한 설명이나 최신 자바스크립트에 대한 이해를 돕기 위해 앞부분에서 설명하는 부분도 React를 하기 위해 딱 알아야 하는 정도까지 설명하는게 꽤 괜찮았습니다.사실 이책은 2018년 초에 나온 책인데 그 사이에 React가 바뀐 부분이 꽤 되기 때문에 이 책대로 사용한다면 이미 지나간 방식을 사용하게 될겁니다. React 공식 사이트의 내용을 한번 더 찾아봐야 한다는 얘기가 되죠.  React의 버전은 꽤 빠르게 올라가고 있습니다. 거의 매달 업데이트가 이루어지고 개선이 이루어지니 큰 숫자가 변경이 되었을 때는 메소드의 사용방법이나 기능 자체가 변경되는 케이스가 있으니 꼭 한번 살펴 보시길 바랍니다. 공식기본적인 React의 사용법은 전부 다루고 있습니다. 공식 홈페이지의 내용에 이런 저런 히스토리에 대한 내용까지 포함해서 정리한 듯한 내용입니다. 공식 홈페이지의 경우 일부는 한글화가 되어 있지 않아 어려운 부분이 있는데 책에서 개념에 대한 접근이나 더 찾아볼만한 내용을 잘 얘기를 해주고 있어 많은 도움이 되는 편입니다.물론 초보자가 접근하기에는 그래도 여전히 힘들지만 이 책을 훑어보고 나서 공식 홈페이지의 내용을 찾아가며 공부를 한다면 충분히 혼자서 작업할 수 있는 정도가 되지 않을까 생각합니다.리액트 개발자로 전향하려는 분의 경우 프론트 개발자는 이 책 한권 정도만 읽으면 React의 전반적인 개념을 잡으실 수 있을 것입니다.서버 개발자라고 한다면 html, dom, 자바스크립트의 compile 과정 등이 책에 일부 나와 있으니 관련 내용을 충분히 숙지하신 후에 작업을 하시면 도움이 되실꺼라 생각합니다.React의 전반에 대해 설명하는 이 책은 링크 에서 보실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> books </tag>
        
          <tag> programming </tag>
        
          <tag> react </tag>
        
          <tag> learning </tag>
        
          <tag> o'reilly </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[개발 이야기] 스타트업에서 필요한 일을 하는 방식]]></title>
      <url>/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/2020/11/15/method-of-work/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎여러분은 스타트업에서 일하는걸 한번이라도 생각해보신적이 있나요?혹시 생각해보셨다면, 스타트업에서 하는 일은 어떻게 다를지 생각해 보신적도 있나요?저는 이제 스타트업 생활 3년차에 접어들었습니다.스타트업 생활을 시작하기 전 저는 나름대로 안정적인 회사를 다녔었습니다.현재 위치에서 팀장님이 주는 업무를 잘 처리하기만 하면 됐었죠.월급이 밀릴 걱정 같은건 애초에 생각조차 한적도 없습니다.회사가 업계에서는 1위를 하고 있었고 제가 일을 하지 못해도 회사 매출에 아주 큰 영향을 주지도 못했었죠.회사 업무는 바빴고 일도 많았지만 안정적인 회사였고 적당히 야근하면서 적당한 월급을 받을 수 있는 곳이었습니다. 회사를 오래 다닌다면 나쁘지 않은 연봉을 받을 수도 있었구요.제가 그 회사를 그만 둘 때 저에게 메리트가 있던 것은 내가 하고 싶은 일을 할 수 있는가 였어요.회사의 요구 외에도 제가 공부하면서 새로운 기술을 계속해서 공부하고 사용해서 업무에 적용해보고 싶었고 그렇게 하고 싶어 많은 제안을 회사에 했었습니다.요즘 A라는 기술이 많은 사람들이 쓰고 있다고 하는데 검토해서 새로운 프로젝트에 도입해보면 어떻겠냐? 또는 새로운 개발 방법론에 대해 얘기하면서 적용해보자고 얘기했었죠.하지만 돌아온 대답은 없었습니다. 그래서 계속해서 똑같은 기술로 제 시간을 태워서 하는 일만 반복 했었습니다. 그 때문에 일에 대해 굉장한 염증을 느꼈었고 성장하는 느낌도 받을 수 없었죠.지금은 회사가 왜 그렇게 해야 했는지 어느정도 이해가 되지만 지금의 제가 똑같은 얘기를 듣는다면 다르게 대응을 했을 것 같네요.어쨌든 그렇게 염증을 느끼던 차에 작은 스타트업에서의 이직 제안을 받았고 저는 움직였습니다. 그렇게 안정적인 자리를 박차고 야생으로 뛰어들었죠. 그게 저의 첫 스타트업 이었습니다.처음에는 새로운 기술을 할 수 있다는 생각에 마음이 많이 들떴었습니다.하지만, 3개월 동안 그 회사에서 엄청나게 고생하면서 또다른 스타트업으로 이직을 하게 되었죠.새로운 언어, 그리고 새로운 분야에서 일하면서 경험을 쌓았고 그전에는 생각도 하지 못하는 방식으로 일을 했습니다. 모든 것이 새로운 상황에서 해보지 않은 것을 끊임없이 시도해야 했습니다.그리고 시간은 더 부족했죠. 새로운 언어와 새로운 방식으로 개발을 하는데 시간은 더 줄어든 느낌이었습니다. 지금은 왜 그렇게 밖에 할 수 없었는지 너무나 이해하지만 그 때는 나에게 왜 이런 시련이 올까 많은 생각을 했었습니다.그 이후 2번의 이직을 모두 스타트업으로 했고 이제는 스타트업이라는 곳에서 일에 있어 무엇이 중요하고 어떤 부분에 더 초점을 맞추어야 하는지 조금은 알게 된 것 같네요.많은 직군이 있겠지만 저는 개발자이기 때문에 개발자 입장에서 얘기를 풀어보겠습니다.      코드의 퀄리티코드의 퀄리티는 개발자라면 모두가 공감하는 부분이지 않을까 생각합니다.보통 많은 실력있는 개발자들은 일을 할 때 코드의 퀄리티를 포기하지 않습니다.때로는 자식처럼 느껴질 정도로 자기가 짠 코드가 쓰레기 같은 취급을 받는 것을 원하지 않습니다. 그래서 코드의 퀄리티를 중요하게 생각하고 또 높은 수준의 퀄리티를 지키기 위해 노력합니다.경우에 따라 다르겠지만 스타트업 업계에서는 코드의 퀄리티는 뒷전이 될 수 있습니다.무조건 뒷전이다가 아닌 후순위로 밀리는 것이죠. 특히나 회사가 창업한지 얼마 되지 않아 개발 결과물을 투자를 받는데 쓰기 위해서라면 퀄리티가 중요한 것이 아니라 돌아가게 만드는 것이 중요합니다. 물론 퀄리티도 높고 돌아가게 만들 수 있는 개발자라면 퀄리티를 포기하지 않아도 되겠죠.        개발 프로세스와 테스트개발 프로세스는 중요합니다. 특히 여러 사람이 협업하는 상황 속에 놓여진다면 개발 프로세스에 따라 어떻게 일하는지가 달라지고 효율성도 달라지게 됩니다.스타트업 업계에서는 개발 프로세스가 어쩌면 중요하지 않을 수 있습니다. 적은 인원이기 때문에 규칙 자체를 최소화 해야 개발 속도를 낼 수 있기 때문이죠. 그래서 초반에는 개발 프로세스 확립 또는 테스트 등을 거의 하지 않습니다.다만 회사 자체가 그런 것들을 무조건 지켜야 하는 기술 회사라고 한다면 충분히 고려할 수 있을 것 같습니다.  기본적으로 스타트업들은 빠른 호흡으로 일을 하는 것이 보통입니다. 때문에 고민을 많이 해야 하는 경우에는 그 고민을 할 시간에 좀 더 빠르게 움직여 결과물을 만들어내는 것이 훨씬 더 효율적이라고 생각합니다.규모가 있는 기업들에서 하는 일에 대한 경우에 개인이 가져가는 업무의 영역에 대해서는 저는 ‘부속톱니바퀴’라고 표현을 합니다. 저의 경우에는 앞서 얘기한 안정적인 회사가 되겠네요.안정적인 회사에서 요구하는 능력에 비해 작은 스타트업에서는 훨씬 더 많은 능력을 요구합니다. 그 중 하나가 자신의 의견을 전달하는 능력도 굉장히 중요합니다.스타트업 업계에서는 일에 대한 자유도가 높은 만큼 강한 책임감을 가지고 일을 해야 합니다.그 때문에 부속품으로서 일을 하는 것이 아닌 주도적으로 일을 만들고 내가 이끌어가며 일을 해야 합니다. 꼭 팀리더가 아니어도 말이죠.간단히 규모가 있는 조직과 스타트업을 비교해 보았습니다.스타트업 또는 규모가 있는 회사의 선택에 도움이 되셨길 바랍니다.]]></content>
      <categories>
        
          <category> 생각정리 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> organizations </tag>
        
          <tag> 작은 </tag>
        
          <tag> 조직 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[개발 이야기] 스타트업의 결정 권한에 대해..]]></title>
      <url>/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/2020/11/09/effect-to-decide-of-auth/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎스타트업에서 일을 하다 보면 짧은 시간 동안 많은 일을 한꺼번에 경험하게 됩니다.그중 하나가 바로 결정 권한이 아닐까 싶은데요.작은 규모의 조직에서는 한명 한명이 할 수 있는 것들이 제한되는 것보다 다양한 의견을 내고 들으며 그에 따른 다양한 시도를 할 수 있도록 권한을 가지는 것이 더 큰 시너지 효과를 내기 때문일 것 같습니다.물론 큰 규모의 조직에서도 요즘은 다양한 시도를 하고 있고 그것에 맞게 신입사원인데도 불구하고 많은 권한을 가지게 되기도 합니다.하지만 그게 모든 회사에 적용되지는 않지요. 뉴스나 기삿거리가 된다는 것은 그만큼 그 일이 사람들에게 희소가치가 높기 때문일 겁니다. 작은 규모에서는 당연한 일들이 규모가 큰 조직에서는 가십거리의 일인 것이죠.큰 조직에서 시도한다는 것은 그게 그들에게는 일종의 돌파구일 수도 있다는 생각도 듭니다.어쨌든 많은 권한을 가지는 경험을 통해 배우게 되는 것들이 스타트업에서의 장점이 아닐까 생각합니다. 또 내가 더 성장하고 앞으로의 인생을 개척하는 데 도움이 되는 부분들도 분명히 있고요.개발자의 입장에서 생각해보면 이러한 결정 권한들은 어떻게 성장하고 싶은지 그리고 어떤 배경을 가지냐에 따라 약이 되기도 독이 되기도 합니다. 어떤 상황에서 약이 되고 어떤 상황에서 약이 되는지 한번 볼까요?기본적으로 개발자는 할 수 있는 일의 범위를 원하는 만큼 넓힐 수 있는 직군입니다. 처음에야 당연히 제품의 기능 개발만 하게 되겠지만 개발자 자신이 원한다면 기획에 참여할 수도 있고 제품의 기능 테스터 또는 제품의 전체를 책임지는 사람이 될 수도 있죠.보통 아이디어가 제품이 되기까지는 아래 과정을 거치게 됩니다.아이디어 → 기획 → 디자인 → 개발 → 완성 + 공개여기서 개발을 좀 더 확장 시켜 보면 아래처럼 됩니다.요구사항 분석 → 요구사항에 맞는 기능 정의 → 기능 개발 → 테스트 → 제품에 적용 또는 배포물론 이 내용은 너무나도 교과서적인 내용이고 실제 업무는 조금 다를 수도 있습니다. 명확한 부분은 회사가 의도한 기능을 사용자가 쓸 수 있도록 개발을 한다는 것이죠. 사용자가 있기 때문에 편의성이 제공되어야 하고 제품이 제대로 동작하기 위해 버그가 없어야 합니다. 개발 영역에 한해서 생각한다고 해도 꽤 많은 일들을 하게 됩니다. 이러한 이유로 많은 방법론이 생기고 제품을 개발하는 방식이 발전해 왔습니다.스타트업 혹은 작은 규모의 조직에서는 이 모든 것들을 할 시간이 없기 때문에 여러 가지 이유로 요구사항 분석이 제대로 되지 않거나 혹은 테스트가 제대로 되지 않거나 하면서 시행착오를 많이 겪게 됩니다. 그렇게 회사의 전체 프로세스가 만들어지고 지켜야 할 규칙과 방식들이 생겨나죠.문제는 이 프로세스나 규칙들을 정할 권한이 대학을 막 졸업한 신입 개발자에게 주어졌을 때입니다. 이게 제가 생각하는 독이 되는 케이스입니다.신입의 경우 많은 부분을 배워야 합니다. 실제로 업무를 놓치는 경우도 많고 잘 모르기도 합니다. 그 때문에 업무를 장기적으로 생각해서 계획을 세우는 것이 어렵고 당장 해야 하는 일들을 쳐내기에도 바쁩니다. 그럼 프로세스나 규칙들도 큰 관점에서 보고 만들지 못합니다. 애초에 아는 부분도 적지요. 잘못된 규칙이나 프로세스가 만들어지기 쉽고, 그러면 결국 맞지 않은 옷을 입은 것처럼 고민에 빠지게 됩니다.정작 실력은 키우지 못했기 때문에 이직은 꿈도 못 꾸고 회사에서는 시간이 부족하니 개인의 실력보다는 요구사항을 먼저 말할 수밖에 없는 상황이 만들어집니다. 신입 개발자는 어떤 분야를 선택할지 고민하면서 전문가로 성장해야 하는데 그런 고민은 전혀 하지 못한 채 경력 개발자가 됩니다. 나 자신의 전문 분야가 무엇인지도 모른 채 말입니다.결국 더 성장하기 위해 퇴사를 하게 됩니다. 빠르게 퇴사했다면 모르겠지만 1년이상의 경력이 쌓였다면, 퇴사해도 제대로 된 경력을 쌓지 못했으니 이직도 힘들어지고 비슷한 수준의 작은 규모의 회사로 입사하게 됩니다. 회사 입장에서도 실력을 떠나 신입은 부담스럽지만 작은 규모의 회사라도 경험을 해본 경력자라면 나름대로 반겨주기 때문입니다. 이제 시작하는 회사로 다시 들어가는 개발자분은 또다시 비슷한 경험을 비슷하게 합니다. 결국 배우는 것이 없이 경력만 늘어나게 되는 거죠.다만 어쩌다 운 좋게 괜찮은 경력자를 만나게 되면 실력 있는 경력 개발자로 성장하기도 합니다.하지만 늘 그렇듯이 좋은 케이스는 굉장히 드물고 개인에게도 정말 어려운 도전이 됩니다.그래서 가능하면 신입 분들의 경우 꼭 경력자가 있는 회사로 가시길 권하고 싶습니다.반대로 경력자는 어떨까요?사실 경력 개발자들도 전체 프로세스나 규칙에 대한 고민은 많이 하지 않습니다. 실제로 그런 고민을 하는 것이 잘 맞지 않는 분들도 있고요. 그 때문에 프로세스나 규칙이 만들어지지 않은 작은 규모의 회사에서 하나씩 만들어가는 것을 좋아하는 분이 아니라면 가지 않습니다. 가더라도 어느 정도 만들어진 상태의 회사를 가게 되죠. 프로세스나 규칙이 어느 정도 만들어진 회사라면 회사의 규모 또한 아주 작은 상태가 아닙니다. 이미 여러 개발팀이 존재하거나 매출을 만들기 위한 전체 프로세스가 이미 정해진 상태이기도 하죠.여기서 독이 되는 케이스는 프로세스나 규칙이 이미 잘 구성된 상태의 회사만 다니시던 분이 그런 것들이 전혀 없는 바닥부터 시작하는 회사에 입사하게 되는 경우입니다.보통 이름난 대기업에서 다니던 분이 작은 규모의 회사에 입사하게 되는 경우입니다. 이미 만들어진 것들을 하다가 이제는 내가 만들고 싶다는 생각이 들어서 이직을 하게 되는 경우인데 문제는 아무런 준비 기간 없이 이직하게 되었을 때 발생합니다. 이름난 대기업에서 하는 것들은 보통은 작은 규모의 회사에서는 통하지 않기 때문이죠. 제가 생각하는 제일 최악의 케이스는 개발 능력은 뛰어나지만, 협업에 대한 개념이 없고 매니징을 전혀 해보지 않은 10년 이상의 개발자분들이 작은 규모의 회사에서 매니저의 역할로 일을 하게 될 때 나타나는 것 같습니다.매니징과 개발은 전혀 다른 영역이고 개발자가 매니저가 되기 위해서는 또 다른 영역의 문제들을 맞닥뜨리게 됩니다. 가장 기본적인 부분은 커뮤니케이션이죠. 개발자 출신이기 때문에 개발자와 얘기하는 것은 어렵지 않지만 개발한 결과물을 수치로 만들고 그 수치를 기반으로 대표를 설득하는 것은 전혀 다른 새로운 도전이기 때문입니다. 특히나 큰 기업에서의 일하는 방식이 전혀 다른 작은 규모의 스타트업이나 기업들에서 적응하면서 매니징 + 개발을 하는 것은 정말 어렵습니다. 한 명이 할 수 있는 일의 크기가 아니기 때문이죠.이제 시작하는 스타트업이나 작은 규모의 조직으로 이직을 하고자 하시는 고 경력자분들은 “내가 매니징을 잘 할 수 있는가?”에 대한 고민을 한 번쯤 해보고 어떤 방법이든 시도해보고 준비하는 시간을 가지는 것이 최악의 케이스를 피하는 길이라고 생각합니다.개발자라는 측면에서 결정 권한이 얼마나 주어지는지에 따라 개인에게는 어떤 영향을 주는지 한번 생각해보고 정리해봤습니다.말도 많고 탈도 많은 스타트업 업계에서 일하시는 분들이 모두 원하는 목적을 이루며 탈 없이 지내셨으면 좋겠네요.]]></content>
      <categories>
        
          <category> 생각정리 </category>
        
      </categories>
      <tags>
        
          <tag> 개발자 </tag>
        
          <tag> developer </tag>
        
          <tag> authority </tag>
        
          <tag> power </tag>
        
          <tag> 권한 </tag>
        
          <tag> small </tag>
        
          <tag> organizations </tag>
        
          <tag> 작은 </tag>
        
          <tag> 조직 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] WebAssembly in Action]]></title>
      <url>/review/2020/10/26/webassembly-in-action/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다. 😎제가 오늘 리뷰할 책은 웹어셈블리 인 액션 입니다.이 글을 보시는 분은 웹 어셈블리에 대해 어느정도 알고 계신가요?아마 들어보셨을 수도 있고 잘 모르시는 분들도 있을겁니다.웹 어셈블리의 핵심은 C/C++, 러스트 등의 저수준 언어를 사용해서 만들어진 코드를 바이너리로 인코딩 하여 브라우저나 브라우저가 아닌 환경에서도 실행을 시킬 수 있다는 것입니다.기존에 C/C++ 개발자도 Web Assembly를 사용해 기존에 개발해둔 코드를 가지고 기능을 개발하는 것이 가능하다는 얘기죠.웹어셈블리 인 액션에서는 여러 언어 중에 C/C++을 사용하여 웹 어셈블리 모듈로 변경하여 동작할 수 있는 방법에 대해 설명합니다.그 외에도 웹어셈블리를 다루기 위해 필요한 기초 지식과 함께 잘 모를 수 있는 어셈블리에 대한 내용을 앞서 설명해주고 있습니다.webassembly 공식 사이트에 보면 파이어폭스, 크롬, 사파리, 엣지에 모두 webassembly 가 포함되어 있다고 보여주는 만큼 앞으로 nodejs와 함께 웹에서 C/C++같은 언어를 사용해서 개발을 할 수 있고 빠른 실행이 장점인 만큼 웹에서 복잡한 연산을 해야 하는 경우에 대체하여 쓸 수 있는 하나의 수단이 될 수 있을거란 생각이 드네요.특히 더 높은 수준의 성능을 계속해서 요하는 요즘 시대에 webassembly는 성능을 한단계 끌어올릴 수 있는 역할을 할 수 있지 않을까 생각합니다.물론 앞으로 갈길을 많다고 생각이 드는데 그 이유는 꽤 많은 부분 편의성이 좋아져야 개발자 입장에서 편하게 개발을 할 수 있기 때문입니다.추가로 걱정되는 부분은 지금까지도 webassembly가 크게 주목받지 못했던 이유로, 기존의 V8 엔진의 성능을 올리거나 개발하는 방식을 바꾸는 형태가 더 많은 도움이 되는 케이스가 많았던 듯 합니다.그럼에도 불구하고 webassembly는 충분히 매력적인 부분이 존재하고 있습니다. 브라우저에서 C/C++언어를 사용할 수 있다는 사실 자체가 흥미를 끌기도 합니다.이런 내용에 대해 전반적으로 짚어주고 자세하게 설명해준 웹어셈블리 인 액션은 링크에서 확인하실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> books </tag>
        
          <tag> programming </tag>
        
          <tag> unix </tag>
        
          <tag> web </tag>
        
          <tag> assembly </tag>
        
          <tag> developer </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[django 와 mongoDB 연동 (1)]]></title>
      <url>/info/2020/10/11/django-mongodb-1/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎django로 mongoDB를 연동해본적 있으신가요?이번에 프로젝트를 진행하면서 django와 mongoDB를 연동하는데 꽤나 어려움을 겪어서 이렇게 정리해두려고 합니다.django와 mongoDB를 연동 하려면 먼저 django와 mongoDB를 설치해야겠죠?ㅎ일단 저는 mac을 사용하고 있으니 mac을 기준으로 설명하고 다른 운영체제의 경우 참고할 링크를 추가해 두겠습니다.pythondjango를 사용하기 위해서는 python이 설치가 되어 있어야 합니다.Mac에는 python이 기본으로 설치가 되어 있습니다.기본으로 설치된 파이썬의 버전은 2.7인데 저는 3.7.5를 기본으로 세팅해두고 사용하기 위해 pyenv를 설치하고 global 버전dmf 3.7.5로 설정해두었습니다.      보통 python을 쓰는 경우 패키지 관리를 위해 사용하는 라이브러리가 있습니다.    제가 아는 방법만 해도 virtualenv,  pyenv, poetry 등 다양하게 존재하고 사용 방법과 장단점등이 모두 다르기 때문에 “pyhton 의존성 관리” 또는 “python 패키지 관리” 등의 검색을 통해 각자의 방법을 찾으시면 좋겠습니다.    이 포스팅에서는 pyenv와 pyenv-virtualenv를 사용했습니다.  Mac에서는 패키지를 편하게 설치하기 위해 homebrew를 사용하는데 설치해주시면 간단한 명령어로 편하게 패키지들을 설치할 수 있습니다.Homebrew는 아래 명령어를 통해 설치할 수 있습니다.# Homebrew 공식 홈페이지 : https://brew.sh/index_ko/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"homebrew를 설치하면 brew install pyenv pyenv-virtualenv 명령어로 pyenv와 pyenv-virtualenv를 설치 할 수 있습니다.설치 후에는 pyenv 명령어로 설치 되었는지 확인하실 수 있습니다.또 아래 명령어로 설치가 가능한 목록을 확인 할 수 있죠.$ brew install pyenv pyenv-virtualenv$ pyenv install -ll--list그 리스트에서 원하는 버전을 생각하시고 아래 명령어로 설치해주시면 됩니다.$ pyenv install 3.8.5저는 3.8.5로 설치를 했습니다.아래 내용이 보이고 설치가 완료되었네요.python-build: use openssl@1.1 from homebrewpython-build: use readline from homebrewDownloading Python-3.8.5.tar.xz...-&gt; https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tar.xzInstalling Python-3.8.5...python-build: use readline from homebrewpython-build: use zlib from xcode sdkInstalled Python-3.8.5 to /Users/aron/.pyenv/versions/3.8.5설치한 이후에는 아래 처럼 .bashrc 또는 .zshrc 에 터미널을 실행시 자동으로 실행되도록 설정을 해줍니다.# vi ~/.zshrc# pyenv configexport PYENV_PATH=$HOME/.pyenvif which pyenv &gt; /dev/null; then eval "$(pyenv init -)"; fiif which pyenv-virtualenv-init &gt; /dev/null; then eval "$(pyenv virtualenv-init -)"; fi아래 명령어로 현재까지 설치된 python 버전을 확인 하고 세팅할 수 있습니다.# 설치된 python 버전 확인$ pyenv versions# 기본으로 사용하고자 하는 pyhton 버전 선택$ pyenv global 3.8.5# python이 제대로 설치가 되었다면 pip --version 명령어가 실행 가능$ pip --versionpip 20.1.1 from /Users/aron/.pyenv/versions/3.8.5/lib/python3.8/site-packages/pip (python 3.8)pip 까지 설치가 잘 되었다면 이제 Django를 설치할 차례입니다.프로젝트로 사용할 폴더를 하나 생성하고 pip install Django==3.1.2 을 실행시켜 줍니다.# 아래 명령어로 환경에서 사용할 파이썬 버전을 세팅할 수 있습니다.# pyenv virtualenv &lt;python version&gt; &lt;virtualenv name&gt;# 아래 명령어로 python 환경을 세팅해둡니다.$ pyenv virtualenv 3.7.5 django-project$ mkdir django-project$ cd django-project# local 명령어로 해당 프로젝트를 사용할 때 해당 파이썬 버전을 사용하도록 설정해 줍니다.$ pyenv local django-project$ pip install Django==3.1.2django까지 설치 하고 나면 아래 명령어로 내가 원하는 버전으로 설치가 되었는지 확인합니다.$ pythonPython 3.7.5 (default, Dec 10 2019, 12:26:40)[Clang 11.0.0 (clang-1100.0.33.12)] on darwinType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import django&gt;&gt;&gt; print(django.get_version())3.1.2&gt;&gt;&gt; exit()# 또는 아래 명령어로도 확인이 가능합니다.$ python -m django --versiondjango가 설치된 걸 확인하셨으면 이제 django-admin을 사용해 mongodb와 연동할 django 샘플 프로젝트를 생성해봅시다.샘플 프로젝트는 django-admin startproject django_mongodb 명령어로 간단하게 생성할 수 있습니다.더 많은 정보를 알고 싶다면 링크를 방문해 보세요.이제 해당 프로젝트로 이동하여 간단한 django_mongodb 프로젝트 서버를 실행해 봅시다.# 만들어진 프로젝트 폴더로 들어갑니다.$ cd django_mongodb # 먼저 migrate를 해주어야 합니다.# 서버 실행을 위한 관련 데이터베이스와 테이블을 생성해줍니다.$ python [manage.py](http://manage.py/) migrate# 서버 실행$ python manage.py runserverWatching for file changes with StatReloaderPerforming system checks...System check identified no issues (0 silenced).October 10, 2020 - 10:36:11Django version 3.1.2, using settings 'django_mongodb.settings'Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C.마지막 메시지가 뜬다면 성공입니다.메시지 내용 안에 있는 링크로 접속해보면 아래 화면처럼 보여질 겁니다.그럼 다음 포스트에서는 django와 mongodb를 직접적으로 연결하는 내용을 다루겠습니다.궁금하거나 이상한 내용은 댓글로 남겨주세요!]]></content>
      <categories>
        
          <category> info </category>
        
      </categories>
      <tags>
        
          <tag> python </tag>
        
          <tag> django </tag>
        
          <tag> 장고 </tag>
        
          <tag> mongodb </tag>
        
          <tag> mac </tag>
        
          <tag> pyenv </tag>
        
          <tag> virtualenv </tag>
        
          <tag> homebrew </tag>
        
          <tag> bashrc </tag>
        
          <tag> bash_profile </tag>
        
          <tag> poetry </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[크롤링] 크롤링을 할 때 고려해야 하는 것들]]></title>
      <url>/info/2020/10/06/crawling/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎이번 포스팅에서는 데이터를 크롤링할 때 고려해야 하는 부분들에 관해서 얘기해보려고 해요.요즘은 데이터를 다루는 일들이 많아지면서 데이터 크롤링이 개발자의 영역이라기보다는 일반인들도 조금만 배워서 실천해 볼 수 있을 정도로 크롤링에 대한 접근 난도가 굉장히 낮아진 느낌이에요.물론 전문적으로 데이터를 쌓고 정리해야 하는 상황에서의 크롤링과 웹 페이지에서 원하는 데이터의 일부를 CSV 파일이나 TXT 파일로 만들기 위한 크롤링은 크게 다르겠지요.어쨌든 크롤링이 들어가는 부분에서는 동일하니 결국 목적지는 비슷하리라 생각이 드네요.그러면 크롤링을 할 때 고려해야 하는 부분들은 어떤 것들이 있을까요? 몇 가지를 살펴볼게요.언어크롤링을 하는데 어떤 언어를 쓸 것인가에 대한 부분이에요.사실 이건 제 생각에 압도적으로 파이썬이라고 생각이 드는데 그 이유는 상대적으로 다른 언어보다 초보자가 배우기 쉬운 언어이고 성능은 강력하다고 느껴지기 때문이에요. 이러한 경험을 주는 것들은 파이썬에서 크롤링할 때 사용하는 라이브러리인 scrapy와 beautifulsoup가 크게 작용을 했다고 생각해요.꼭 파이썬을 써야 하는 것은 아니고 Node 또는 Java도 크롤링을 할 수 있는 라이브러리들이 있으니 다른 언어로 하고 싶다면 살펴보면 좋을 것 같네요.Java lib  Apache Nutch  stormcrawler  jsoupNode lib  crawler  headless-chrome-crawler위의 링크들은 각각의 lib들의 링크입니다.이외에도 많은 lib들이 존재하니 원하는 기능의 크롤러를 사용하시면 될 것 같습니다.데이터크롤링을 할 때 어떤 데이터를 가져올 것인지 정의하는 것도 정말 중요합니다.원하는 데이터가 크면 클수록 크롤링할 때 고려해야 할 요소들이 많아지기 때문입니다. 크롤링을 할 때 데이터의 정확성 때문에 반복적으로 크롤링해야 하는 경우가 많은데 이런 상황에서는 최대한의 자동화를 해야 합니다. 그런 이유로 크롤링을 할 때는 내가 어떤 데이터를 가져올 것인지 명확하게 정의를 내리고 최대한 자동화를 거쳐야 힘들게 쏟은 에너지가 물거품이 되지 않게 됩니다.지속성마지막으로는 지속해서 가능하게 할 수 있는가입니다.크롤링은 기본적으로 사람이 하지 않고 자동화 하므로 반복적으로 많은 요청을 보내게 됩니다. 동일한 URL에서 변숫값만 바꿔가며 수십 또는 수백 많게는 수천 개의 request를 날리는 거죠. 이게 너무 짧은 시간에 요청을 보내게 된다면 보통 악의적인 공격으로 판단하여 해당 IP를 차단하거나 웹 페이지의 URL을 변경하거나 request의 헤더 값을 보고 판단해서 에러 페이지로 전달해 버리기도 합니다.어찌 보면 컴퓨터가 작업하는 것을 사람이 하는 것처럼 생각하도록 속여야 하죠. 그 때문에 지속해서 데이터를 가져오고자 한다면 최대한 사람인 척 동작하도록 설계를 해야 합니다.앞서 얘기한 3가지도 중요하지만, 크롤링할 때 유의해야 하는 아주 큰 포인트가 하나 더 있습니다.바로 법적인 문제가 없는지 체크하는 것이죠.기본적으로 사이트에 올라가 있는 데이터는 해당 회사의 지적재산입니다. 정보 자체가 돈이 되는 지금 시대에서는 크롤링하는 것 자체만으로도 법적인 분쟁이 일어날 수 있다는 것이죠. 그렇기 때문에 학습을 위한 크롤링을 하는 것은 큰 문제가 되지 않지만, 서비스를 위해 데이터를 크롤링하는 것은 법적인 이슈가 없는지도 잘 살펴보아야 할 것 같습니다.오늘은 크롤링을 할 때 고려해야 하는 부분들을 조금 살펴봤습니다.앞으로 더 발전 가능성이 있는 기술인만큼 여러 고려할 내용을 확인해서 도움이 되셨으면 좋겠습니다.]]></content>
      <categories>
        
          <category> info </category>
        
      </categories>
      <tags>
        
          <tag> 크롤링 </tag>
        
          <tag> crawling </tag>
        
          <tag> scrapy </tag>
        
          <tag> beautifulsoup </tag>
        
          <tag> 언어 </tag>
        
          <tag> 데이터 </tag>
        
          <tag> 속성 </tag>
        
          <tag> 법 </tag>
        
          <tag> request </tag>
        
          <tag> 지적재산 </tag>
        
          <tag> 고려사항 </tag>
        
          <tag> IP차단 </tag>
        
          <tag> 학습 </tag>
        
          <tag> 서비스 </tag>
        
          <tag> 설계 </tag>
        
          <tag> 파이썬 </tag>
        
          <tag> 자바 </tag>
        
          <tag> 노드 </tag>
        
          <tag> 자바스크립트 </tag>
        
          <tag> js </tag>
        
          <tag> javascript </tag>
        
          <tag> java </tag>
        
          <tag> python </tag>
        
          <tag> csv </tag>
        
          <tag> txt </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[팁] 입사할 회사가 힘든 회사인지 파악하는 법]]></title>
      <url>/info/2020/10/05/%ED%9E%98%EB%93%A0-%ED%9A%8C%EC%82%AC-%ED%8C%8C%EC%95%85%ED%95%98%EB%8A%94%EB%B2%95/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎오늘은 내가 입사할 회사가 과연 힘들 것인지 미리 살펴보는 방법에 대해 살짝 알려드리려고 합니다.전 회사를 그만두기도 했고 그 과정에서 뼈저리게 느낀 점이 있어 정리해두려고 합니다. 다만 제가 회사 생활을 하면서 느꼈던 부분이니 다르게 느껴지신다면 저의 부족함 때문이니 그냥 넘어가 주시면 감사하겠습니다. 🙏🤗입사할 회사가 힘든 곳인지 파악하는 방법은 참 많습니다. 요즘은 굉장히 잘 되어 있는 회사 리뷰 정보들을 찾아서 보는 방법, 복지 차원에서 수면실이 제공되는 점(수면실이 제공된다는 것은 밤샘도 많다는 것이겠죠?), 회사의 문화가 어떤지 회사 사이트를 통해 파악하는 방법들이 있죠.제가 말씀드리려는 것은 바로 “커뮤니케이션” 입니다.한국어로 직역하면 대화? 정도가 되겠네요. 회사에 입사하기도 전에 커뮤니케이션을 어떻게 하냐고 생각하시는 분들도 있을 것 같습니다. 입사 전에 커뮤니케이션을 해볼 수 있는 부분이 있죠. 바로 면접입니다. 요즘은 온라인 면접을 많이 활용한다고 들었습니다. 시국이 시국이라 온라인이라는 이점을 활용하는 것 같습니다. 그래도 어쨌든 면접은 대화로 하죠. 대화를 하기 때문에 그 대화를 통해 이 회사가 힘든 곳인지 판단할 수 있습니다.여러분들은 회사 면접을 어떻게 생각하시나요?회사가 나를 판단하는 자리? 아니면 나의 능력을 검증하는 자리? 사실 둘 다 맞습니다. 저는 여기에 한 가지 더 추가하고 싶은데요. 그건 “개인도 회사를 판단하는 자리”라는 겁니다. 보통 면접을 볼 때 주눅 들게 되는 가장 큰 이유가 내가 잘못해서 회사에 입사하지 못하면 어떻게 할까?라는 부분입니다.물론 요즘 같은 시대에 취업이 하늘의 별 따기니 그런 생각을 가질 수 있다고 생각합니다. 면접을 제대로 준비를 해야 하는 것도 맞지요. 좀 전에 말씀드렸듯이 회사가 나의 능력을 검증하는 자리이기도 하기 때문이죠.어쨌든 면접을 볼 때 내가 어느 정도 경력이 있고 회사도 나에게서 가치를 찾을 수 있다고 한다면 개인도 회사를 봐야 합니다. 회사에 입사해서 일을 잘 할 수 있는지 알아봐야겠죠. 그걸 알아보는 것이 면접관과의 커뮤니케이션입니다.보통 면접관으로 들어오는 사람은 채용할 직원과 함께 일을 하는 사람입니다. 실무적으로 질문할 것들도 있고, 채용하게 되면 같이 일을 할 테니 먼저 얼굴을 익혀두기 위해서라도 면접관으로 들어옵니다.이 면접관과의 대화가 정말 중요합니다.면접관이 하는 질문을 유심히 들어보고 내가 한 대답에 어떻게 반응을 보여주는지 잘 캐치해야 합니다. 회사에 입사하게 되면 하루 8시간 이상을 이 사람과 대화를 하며 일을 해야 하는데 대화가 잘 통하지 않는다면..?상상하기도 힘든 엄청나게 끔찍한 고통이 시작될 겁니다… 한국어 같은 경우는 ‘아’ 다르고 ‘어’ 다르다고 하죠. 어감에 따라 욕이 되기도 하고 감사의 표현으로 쓰이기도 하는데 그런 부분이 같이 일하는 사람과 맞지 않는다면 정말 힘든 회사 생활이 되겠지요.1차로 얘기하는 데 큰 문제가 없었다면 질문 찬스를 기다려야 합니다.보통 면접을 진행하고 나면 면접이 끝날 때 즈음 질문이 있으면 하라고 합니다. 만약 질문하라는 얘기를 해주지 않으면 마지막에 물어보고 싶은 것이 있다며 질문을 하면 됩니다. 이런 걸 받아주지 않는다면 그냥 가지 않으면 됩니다.질문하라고 했을 때 절대로 질문할 게 없다고 하지 말고 꼭 실무적인 부분에 관해 설명해달라고 물어보셔야 합니다.왜냐하면 신입이나 경력이나 처음에 회사에 입사한 후에 바로 업무를 시작하지 못합니다. 아무리 경력이 많고 많은 것에 통달해 있다고 해도 회사 고유의 문화나 업무 소통 방식이 있기 때문에 그것을 배우기 위해서는 역시 필수적으로 해당 면접관과 얘기를 해야 하기 때문이죠.자세한 업무 설명을 듣는 것이 편하고 내가 이해해서 행동하는 데 문제가 없겠다 싶으면 일차적으로 커뮤니케이션에 대한 부분은 어느 정도 맞는다고 판단 할 수 있을 것 같습니다.어떠셨나요?내가 입사할 회사가 힘든 곳인지 파악하는 방법으로 제시한 커뮤니케이션!저는 이 커뮤니케이션이 잘 안 되는 곳에서는 일하기가 너무너무 힘들 다는 것을 이번에 아주 뼈저리게 느꼈답니다.제 글이 여러분에게 도움이 되셨길 바라며 이만 마무리 하도록 하겠습니다.]]></content>
      <categories>
        
          <category> info </category>
        
      </categories>
      <tags>
        
          <tag> 회사 </tag>
        
          <tag> 힘든회사 </tag>
        
          <tag> 파악 </tag>
        
          <tag> 판단 </tag>
        
          <tag> 구별 </tag>
        
          <tag> 복지 </tag>
        
          <tag> 리뷰 </tag>
        
          <tag> 회사리뷰 </tag>
        
          <tag> 문화 </tag>
        
          <tag> 정보 </tag>
        
          <tag> 면접 </tag>
        
          <tag> 한국어 </tag>
        
          <tag> 개인 </tag>
        
          <tag> 커뮤니케이션 </tag>
        
          <tag> 수면실 </tag>
        
          <tag> 회사문화 </tag>
        
          <tag> HR </tag>
        
          <tag> 채용 </tag>
        
          <tag> 구인 </tag>
        
          <tag> 설명 </tag>
        
          <tag> 대화 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[정리] 주요 HTTP Method]]></title>
      <url>/info/2020/10/04/http-method/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎이번 포스팅에서는 HTTP 메소드가 어떤 것들이 있는지 그리고 서버를 설계할 때 무엇이 필요한지 정리해 보려고 합니다. 클라이언트에서 서버로 데이터를 요청하는 방법에 대해서는 여러가지 방법이 있지만 이번 포스트에서는 HTTP에 대한 부분만 다룹니다.API 서버를 설계하다 보면 클라이언트의 요청에 따라 서버에서 어떻게 응답해 줄 것인가?에 대해 고민을 하게 됩니다.HTTP 요청 메소드에 대해 보통은 GET과 POST를 제일 많이 들어보셨을 겁니다.하지만 HTTP 요청 메소드는 GET과 POST 외에도 다양한 의미를 가진 여러 메소드 들이 있습니다.해당 메소드들은 HEAD, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH 입니다.각 메소드들의 간단한 내용을 적어보면 아래와 같습니다.            메소드 이름      설명                  CONNECT      요청한 리소스에 대해 양방향 연결을 시작하는 메소드입니다. 이는 터널을 열기 위해서 사용될 수 있습니다.              DELETE      지정한 리소스를 삭제합니다.              GET      특정한 리소스를 가져오도록 요청합니다. GET 요청은 데이터를 가져올 때만 사용해야 합니다.              HEAD      특정 리소스를 GET 메서드로 요청했을 때 돌아올 헤더를 요청합니다.              OPTIONS      목표 리소스와의 통신 옵션을 설명하기 위해 사용됩니다. 클라이언트는 OPTIONS 메소드의 URL을 특정지을 수 있으며, aterisk(*) 를 통해 서버 전체를 선택할 수 있습니다.              PATCH      리소스의 부분적인 수정을 할 때에 사용됩니다.              POST      서버로 데이터를 전송합니다. 요청 본문의 유형은 Content-Type 헤더로 나타냅니다.              PUT      요청 페이로드를 사용해 새로운 리소스를 생성하거나, 대상 리소스를 나타내는 데이터를 대체합니다.              TRACE      목표 리소스와의 루프-백 테스트 메시지를 따라서 유용한 디버깅 방법을 제공합니다.      HTTP 요청 메소드에 대한 자세한 내용은 여기에 보시면 자세하게 나와 있으니 참고하시면 좋을 것 같습니다.우리가 API 서버를 설계할 때에는 이 메소드들과 함께 HTTP 응답 코드를 사용하여 함께 설계를 해야 합니다. 왜냐하면 요청하는 메소드에 따라 클라이언트에서 반응해야 하는 응답코드를 정하여 응답해주어야 하기 때문이죠. 응답 코드에 대한 내용은 여기에서 보시면 전체 내용을 볼 수 있습니다.기본적인 API 서버를 만드는 경우에는 모든 메소드에 신경쓸 필요는 없습니다.HTTP 메소드 중에서 GET과 POST 메소드를 사용하면 됩니다. 당연히 다른 메소드들도 사용할 수 있다면 좋겠지만, DELETE 같은 메소드는 실제로 파일을 삭제할 수 있는 기능을 가지고 있고 PUT 같은 경우에는 파일을 만들어내는 HTTP 호출이 가능한 메소드이기 때문에 외부의 공격에 대비한다고 생각하면 예측하지 못하는 외부 공격을 허용하지 않기 위해서는 GET과 POST 정도만 사용하고 허용하도록 설정하는 것이 좋습니다. 또 위에 나열된 형태를 유지하며 설계를 하게 되면 더 복잡한 형태의 설계 결과물만 나오게 됩니다.그럴려면 GET과 POST가 어떤 내용인지 알아야 겠지요.앞선 링크에 있는 내용 중 GET과 POST만 가져왔습니다.  GET: 특정한 리소스를 가져오도록 요청합니다. GET 요청은 데이터를 가져올 때만 사용해야 합니다.  POST: 서버로 데이터를 전송합니다. 요청 본문의 유형은 Content-Type 헤더로 나타냅니다.간단한 설명만 가져와 봤습니다. GET은 말 그대로 데이터를 가져옵니다 영어 단어 GET이 가지는 의미와 비슷하게 데이터를 가져오는 것이죠. 별다른 설명이 필요 없어 보입니다.POST의 경우에는 내용이 좀 더 붙어 있네요. 요청 본문의 유형은 Content-Type 헤더로 나타낸다고 되어 있네요. Content-Type 헤더는 HTTP의 구조에 포함되는 HEADER 값 중 하나 입니다. API 서버에 POST로 요청하는 경우 body에 데이터를 포함시켜 전송하게 되는데 이 때 해당 값의 형태를 Content-Type 헤더에 넣기 때문에 추가적인 설명이 붙게 된 것입니다.Content-Type에 들어가는 값의 규칙은 다음과 같습니다.type "/" subtype *[";" parameter]예를 들면 아래의 형태 입니다.text/css, text/javascript, text/html, text/plaintext라는 큰 type 아래 css, javascript, html, plain 등의 subtype이 있는거죠.GET과 POST도 알아봤으니 클라이언트에서 요청한 GET과 POST를 API 서버에서 어떻게 응답해줄 것인지만 생각하면 됩니다.클라이언트에서 HTTP 요청을 보냈으니 응답을 주어야 하겠죠. HTTP 응답 코드에는 정말 많은 값이 있지만 크게 나누면 정상 응답, 에러 응답이 있습니다. 그 응답 코드는 200과 500 입니다.웹 서핑을 하다 보면 간간히 보이는 500에러 404에러 라고 얘기하는 것들이 바로 응답 코드입니다.404도 정상이 아니기 때문에 결국은 에러 응답 코드 입니다. 다만 의미가 명확합니다. 요청한 페이지를 찾지 못했을 때 응답하는 코드 값이죠. 그래서 API 서버를 설계할 때 기본으로 200, 404 500 코드를 사용하여 전체 응답 구조를 만들어 나가면 됩니다.여기까지가 기본적인 API 서버 설계에 필요한 간단한 HTTP 메소드 정리 내용입니다.기본적인 설계이기 때문에 꽤 많은 부분을 그냥 넘어가기도 하고 더 필요한 내용이 있으나 기술하지 않았습니다. 기약은 없지만 앞으로의 글에서 더 자세하게 다뤄볼 예정입니다.질문이 있으시다면 남겨주세요!]]></content>
      <categories>
        
          <category> info </category>
        
      </categories>
      <tags>
        
          <tag> http-method </tag>
        
          <tag> api-server </tag>
        
          <tag> architect </tag>
        
          <tag> http-status </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 모던 스타트업 - 팀 생산성을 높여주는 21가지 도구와 서비스]]></title>
      <url>/review/2020/09/27/modern-start-up/</url>
      <content type="text"><![CDATA[안녕하세요 괴짜 개발자 namedboy 입니다. 😎제가 오늘 리뷰할 책은 모던 스타트업 입니다.팀 생산성을 높일 수 있는 21가지의 도구와 서비스를 소개하는 책이죠.소개하는 툴에 대한 내용은 잠시 뒤에 소개하기로 하고 부록으로 제공하는 CTO 인터뷰를 먼저 얘기하고 싶네요.CTO 인터뷰는 책에서 소개하는 도구와 서비스들을 어떤 방법으로 회사에 도입하고 사용하고 있는지에 대해 인터뷰 형태로 질문에 대해 CTO 4분의 이야기가 담겨 있습니다.개인적으로는 21가지 도구를 소개해주는 내용보다 이 인터뷰가 더 도움이 되는 부분이 많았던 것 같아요.각각의 회사에서 어떤용도로 어떤 툴을 쓰게 되었는지 그리고 이전에 어떤 부분이 불편했는지 상세하게 알려주고 있어 지금 내가 속해 있는 회사에서 쓰고 있는 툴의 불편함을 어떤 툴로 해소할 수 있겠구나같은 인사이트를 얻을 수 있었습니다.이 책에서 나오는 툴은 5가지 파트로 나누어서 소개하고 있습니다.  조직관리  프로젝트 관리  인프라 관리  서비스 운영  그로스 해킹각각의 파트에서 어떤 서비스나 도구가 있고 사용할 때 비용과 주의해야 하는 부분들을 다루고 있어 만약에 우리 회사에 도입한다면 어떤 부분을 더 커스터마이징 해야 할지 생각해 볼 수 있습니다.간단하게는 도구나 서비스를 이용하기 위해 필요한 부분을 스크린샷과 함께 상세하게 설명을 하고 있어 사용하려고 마음을 먹는다면 쉽게 도입 할 수 있도록 돕고 있습니다.서비스 도입시에도 개발자나 기획자 입장을 고려해서 시간이 걸리는 부분들도 함께 알려주고 있어 도입하는게 빠르게 가능한지 아니면 시간이 좀 필요한지 분별 할 수 있게 도와줍니다.저는 개인적으로 알고 있는 툴들도 많았고 서비스도 많았지만 하나하나 전부 검색해서 찾는 것이 아니라 책 한권에 꽤 많은 내용의 툴들이 소개 되고 있습니다.이 책에 있는 내용만 알아도 스타트업을 시작할 때 필요한 서비스들 그리고 도움이 될 수 있는 서비스나 도구를 따로 알아보지 않고 바로 사용할 수 있어 시간을 절약할 수 있을 거란 생각이 드네요.보통 CEO 분들은 이런게 왜 필요한지 잘 모르기 때문에 설득하기에도 시간이 많이 필요하지만 이 책의 내용을 같이 얘기하며 설득하면 시간 대비 비용을 절약할 수 있는 방법이 될 수 있겠네요.책이 출간된지 시간이 조금 흘러 책의 내용과 약간 다를 수 있다는 부분은 아쉬운 점이네요.modern start-up은 링크에서 확인하실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> books </tag>
        
          <tag> programming </tag>
        
          <tag> tool </tag>
        
          <tag> developer </tag>
        
          <tag> development-tool </tag>
        
          <tag> 조직관리 </tag>
        
          <tag> 프로젝트관리 </tag>
        
          <tag> 인프라관리 </tag>
        
          <tag> 서비스운영 </tag>
        
          <tag> 그로스해킹 </tag>
        
          <tag> 조직문화 </tag>
        
          <tag> 애자일 </tag>
        
          <tag> G스위트 </tag>
        
          <tag> 구글앱스 </tag>
        
          <tag> 드롭박스 </tag>
        
          <tag> 슬랙 </tag>
        
          <tag> slack </tag>
        
          <tag> 지라 </tag>
        
          <tag> jira </tag>
        
          <tag> 깃허브 </tag>
        
          <tag> git </tag>
        
          <tag> github </tag>
        
          <tag> 제플린 </tag>
        
          <tag> 포스트맨 </tag>
        
          <tag> 트래비스 </tag>
        
          <tag> CI </tag>
        
          <tag> 지속적통합 </tag>
        
          <tag> 자동화 </tag>
        
          <tag> 레스큐타임 </tag>
        
          <tag> 시간관리 </tag>
        
          <tag> AWS </tag>
        
          <tag> 아마존웹서비스 </tag>
        
          <tag> 도커 </tag>
        
          <tag> docker </tag>
        
          <tag> 쿠버네티스 </tag>
        
          <tag> kubernetes </tag>
        
          <tag> 재피어 </tag>
        
          <tag> 앤서블 </tag>
        
          <tag> ansible </tag>
        
          <tag> 페이퍼트레일 </tag>
        
          <tag> 크래시리틱스 </tag>
        
          <tag> 핑돔 </tag>
        
          <tag> 뉴렐릭 </tag>
        
          <tag> 자빅스 </tag>
        
          <tag> 버퍼 </tag>
        
          <tag> 위시폰드 </tag>
        
          <tag> 구글 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 유닉스의 탄생]]></title>
      <url>/review/2020/08/23/The-birth-of-Unix/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다. 😎제가 오늘 리뷰할 책은 유닉스의 탄생 입니다.유닉스는 운영체제 입니다. 컴퓨터 운영체제죠. 윈도우, 맥OS 같은 운영체제의 일종입니다. 다만 1970년에 만들어진 아주 오래된 운영체제 입니다.유닉스의 소개는 이쯤 하고 유닉스의 탄생이란 책에 대해 얘기해보겠습니다.이 책의 내용은 유닉스가 만들어지는 시기에 대한 시대적 배경부터 당사자들이 어떤 이유로 만들게 되었는지도 함께 나오는데 흥미로운 인물들 얘기도 함께 설명을 해줍니다.유닉스에 대한 내용 외에도 각 인물들이 어떤 사람들인지에 대한 내용도 함께 볼 수 있는데 흥미로운 부분이 많습니다.후반부에는 유닉스가 나온 이후에 대해 다루고 있고 어떻게 사업화하게 되었는지에 대해 마무리 합니다.사실 유닉스에 대한 히스토리는 뻔하디 뻔한 부분이 있습니다.분명 유닉스를 개발하신 분의 이야기라는 점이 굉장히 큰 장점이라고 생각합니다만, 결국 같은 얘기일테니 역사책 읽는 것과 뭐가 다를까 라는 생각도 했습니다.읽다 보면서 저는 이책이 개발자라면 무조건 읽어야 하는 책이라는 생각이 들었습니다.그 이유는 개발자가 어떤 자세로 개발을 하는지에 대한 내용이 책에 전반적으로 담기기 때문이죠.브라이언 커니핸은 유닉스를 직접 개발한 사람 중 한명입니다.그가 쓴 이 책을 읽다 보면 어떤 방식으로 개발을 했었는지에 대해 이해할 수 있게 됩니다.개발자가 개발을 하기 위해 가져야 하는 소양에 대해서 설명하고 있다는 생각이 많이 들었습니다.개발을 좋아하고 앞으로도 계속해서 하려고 하는 사람이라면 분명 도움이 될 책이라고 생각합니다.유닉스의 탄생은 링크에서 확인하실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> books </tag>
        
          <tag> programming </tag>
        
          <tag> unix </tag>
        
          <tag> Brian-Wilson-Kernighan </tag>
        
          <tag> OS </tag>
        
          <tag> application </tag>
        
          <tag> architect </tag>
        
          <tag> developer </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] O`REILLY Cloud Native]]></title>
      <url>/review/2020/07/06/CloudNative/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다. 😎제가 오늘 리뷰할 책은 Cloud Native 입니다.이 책은 O’REILLY 에서 나온 책을 번역한 책입니다.O’REILLY 책은 제가 믿고 보는 책 중 하나인데 꽤 많은 개발 서적을 내고 있기도 하고 내용도 괜찮기 때문입니다.그래서 O’REILLY 책이 번역되어 나오면 한번쯤 내용을 훑어 봅니다.이 책 역시 약간은 그런 믿음을 가지고 보기 시작했는데 역시나 책 구성부터 내용까지 좋았던 것 같네요.번역 상태도 괜찮은 느낌입니다.사실 Cloud Native라는 제목 때문에 이제는 대세이다 못해 필수가 되어 버린 Kubernetes를 바닥부터 구성하는 내용을 담고 있나 싶은 생각을 했었지만,책을 펼쳐보고는 인프라를 공부하기에 참 좋은 책이란 생각을 지울 수 없었습니다.보통 인프라를 공부할 수 있는 수단이 많지가 않은데 이 책이 훌륭한 길잡이 역할을 할 수 있겠다는 생각이 들었습니다.클라우드를 구성할 때 필요한 지식과 함께 구성할 때 무엇이 꼭 필요하고 어떤 상황에서 어떻게 쓰는지,그리고 조심해야 할 부분이 어떤 부분인지에 대해 세세하게 다루고 있어 클라우드를 통해 인프라를 구성하고자 하려는 분들에게는 많은 도움이 될 것 같다는 생각이 들었습니다.저 역시도 현재 AWS를 사용해서 인프라를 구성하고 있는 만큼 많은 도움이 되었고 앞으로 내용을 더 읽어 보면서현재 회사의 시스템에서 부족한 부분은 무엇인지 내가 놓치고 있는 것이 또 무엇인지 생각해 볼 수 있었습니다.AWS 또는 GCP를 사용해서 클라우드를 구성하다 보면 막히는 부분이 도대체 지금 규모에서 어느정도로 인프라를 구성하고,어디까지 대비를 해야 하는지 도움을 받을 수 있는 툴은 어떤 것들이 있는지 궁금할 때가 많습니다.책의 저자도 그런 부분을 느꼈었는지 관련된 오픈소스 툴이나 서비스도 함께 소개하고 있어 인프라를 구성하는데 더 많은 도움을 받을 수 있었습니다.클라우드로 인프라를 구성해야 하는데, 내가 클라우드는 정확히 모른다. 하시는 분들은 많은 도움이 되지 않을까 생각합니다.Cloud Native책은 링크에서 확인하실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> books </tag>
        
          <tag> programming </tag>
        
          <tag> cloud </tag>
        
          <tag> native </tag>
        
          <tag> application </tag>
        
          <tag> architect </tag>
        
          <tag> developer </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 배워서 바로 쓰는 스프링 부트 2]]></title>
      <url>/review/2020/06/01/spring-boot2/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다. 😎제가 오늘 리뷰할 책은 배워서 바로 쓰는 스프링 부트 2 입니다.책 초반에 스프링과 스프링 부트를 모르는 독자라면 내용의 수준이 높을 수 있다고 얘기하고 있습니다.책을 읽으면서 난이도를 가늠해보면 확실히 초급자가 읽을만한 수준의 책은 아니라는 생각이 드네요.하지만 본인이 빠르게 배우고 싶고 당장에 실무에서 사용해야 하는 상황이라면 스프링이나 스프링 부트를 겉핥기식으로 배웠더라도 이 책을 보는 게 나쁜 선택은 아닐 것 같다는 생각입니다.초급자를 대상으로 하는 책은 아니지만, 스프링이나 스프링 부트를 아주 잘 알지 못해도 내가 학습하는 속도가 느리지 않다고 한다면 이 책으로 빠르게 실무에서 쓸법한 내용을 학습한 이후에 다듬어 가는 것도 하나의 방법이라는 생각이 듭니다.초급자 대상이 아니기 때문에 예제 코드를 구현하기 위해 필요한 기능이나 구현법에 대해서는 충실히 다루고 있습니다.다만 이론서가 아닌 실무에서 쓸 수 있는 실용서이기 때문에 스프링의 장점이나 스프링부트의 설계 이점이나 그런 이점들을 어떻게 하면 활용할 수 있을지에 관한 내용은 조금 부족한 느낌이 있네요.그래도 좋았던 점은 이전에 발행된 책들에선 빌드 툴로는 Maven을 소개하고 데이터베이스 엑세스용으로는 hibernate 또는 mybatis를 소개했었는데 이 책은 Gradle과 doma라는 빌드툴과 O/R 매퍼를 소개한다는 것입니다.이전의 책들을 보면 항상 다른 대안이 없는 것처럼 나왔었는데 다른 방식에 대한 내용을 소개한다는 부분이 다양성 측면에서 선택지를 넓혀주는 느낌이라 좋았습니다.해당 툴의 소개도 단순히 사용한다고 정하는 게 아니라 그 이유에 대해서도 밝히고 있기 때문에 공부하는 사람 입장에서는 좀 더 도움이 될 것 같네요.더불어 요즘 스프링에서 추천하고 있는 기술과 관련된 내용도 함께 다루고 있는 점도 좋았습니다.새롭게 나오는 기술들에 대해 촉각을 곤두세워 항상 쫓아가야 하는데 이런 부분을 조금이나마 채워주고 있는 느낌도 좋습니다.무엇보다 테스트를 함께 다루고 있는 점을 높이 사고 싶네요.테스트에 대한 철학이나 왜 테스트를 해야 하는지에 관한 내용은 없지만, 전체적인 내용에 테스트를 포함해 이것도 꼭 해야 하는 것처럼 느껴져 좋네요.특히 7번부터 나오는 팀 개발 부분과 운용, 시스템 아키텍처 구성은 개발 실무자가 아닌 관리의 역할을 가지고 있는 사람에게도 도움이 될 수 있을 만큼 구성이 되어 있습니다.물론 아주 여러 케이스를 다루지는 못했지만, 기본적으로 AWS를 쓴다면 해당 아키텍처를 어떤 방식으로 설계해야 하는지부터 배포방식까지 설명이 되어 있어 기본적인 시스템 구성은 아주 잘 알지 못한다고 하더라도 많은 도움을 받을 수 있게 구성되어 있습니다.마지막으로 저자의 의견까지 담겨 있어 인사이트를 얻을 수 있는 부분도 존재하니 ‘네가 뭘 좋아할지 몰라 다 준비했어’의 느낌입니다.배워서 바로 쓰는 스프링 부트 2책은 링크에서 확인하실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> books </tag>
        
          <tag> programming </tag>
        
          <tag> springboot </tag>
        
          <tag> developer </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] bash를 활용한 사이버 보안 운영]]></title>
      <url>/review/2020/05/01/bash%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%82%AC%EC%9D%B4%EB%B2%84-%EB%B3%B4%EC%95%88-%EC%9A%B4%EC%98%81/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다. 😎제가 오늘 리뷰할 책은 bash를 활용한 사이버 보안 운영 입니다.보안 운영 부분은 굉장히 중요한 이슈 중 한가지 입니다.네트워크상에서 데이터가 어떻게 흘러가는지 그리고 시스템에서 놓칠 수 있는 구멍들을 어떻게 막을 수 있는지 잘 알고 있어야 하죠.때문에 각 운영체제에 대해서도 잘 알아햐 하고 그만큼 커맨드를 사용한 명령어에 익숙해야 합니다.그런 의미에서 보면 이 책이 bash를 사용한 사이버 보안 운영이라는 것도 이해가 갑니다.이 책에서는 기본적으로 bash를 사용한 프로그래밍을 합니다.bash 명령어를 통해 시스템에 침투할 수 있는 방법들을 먼저 얘기해주고, 그 공격들을 어떻게 하면 막을 수 있을지에 대해 보안책을 설명합니다.그 모든 것들은 bash로 프로그래밍 된 프로그램을 통해 연습할 수 있도록 해줍니다.때문에 커맨드라인에 익숙해지고 싶은데 명령어를 익히기 위한 배움에 지치신 분들에게는 굉장히 편한 방법이 될 수 있겠네요.먼저 공격자 입장에서 설명을 합니다.정찰, 초기 침투, 거점 확보, 권한 상승, 내부 정찰, 횡적 이동, 존재 유지, 임무 완수 등의 표현으로 시스템에 어떻게 침투 하는지에 대해 자세하게 설명되어 있습니다.이런 침투 방법에 대해 자세하게 설명 한 후 이것들을 어떻게 막는지 어떤 부분의 취약한 부분을 막아야 공격자에 대응을 할 수 있는지를 또 자세히 설명해주고 있습니다.최종적으로는 시스템의 구성을 어떻게 하면 좋을지, 그리고 어떤 부분에 대해 계속해서 모니터링을 하면 좋을지 자세히 설명 되어 있습니다.OREILLY에서 나온 책을 번역했지만 보안 이슈에 대해 기초적으로 필요한 내용은 전부 다루고 있는 느낌을 받았고 이제 막 보안으로 진입하고자 하는 분들에게는 많은 도움이 될 책이라 생각됩니다.Cybersecurity Ops with bash책은 링크에서 확인 하실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> books </tag>
        
          <tag> programming </tag>
        
          <tag> bash </tag>
        
          <tag> security </tag>
        
          <tag> cybersecurity </tag>
        
          <tag> developer </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 개발 7년차, 매니저 1일차]]></title>
      <url>/review/2020/03/28/%EA%B0%9C%EB%B0%9C7%EB%85%84%EC%B0%A8_%EB%A7%A4%EB%8B%88%EC%A0%801%EC%9D%BC%EC%B0%A8/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다. 😎제가 오늘 리뷰할 책은 개발 7년차, 매니저 1일차 라는 책입니다.저는 사실 그동안 왜 이런 책이 국내에 없었을까 싶을 정도로 이런 내용을 다루는 책이 반가웠습니다.책의 내용이 좋고 나쁨을 떠나서 드디어 국내에서도 관리자의 역할에 대해 고민하고 있다는 반증이라는 생각에서 입니다.국내에서 개발자로 일을 하다 보면 언젠가는 팀 관리에 대한 요구사항을 만나게 됩니다.회사에서는 좋든 싫든 관리자 역할을 요구하게 되는 것이지요. 당연히 그 이유는 일을 잘하는 직원은 많지만 관리를 잘하는 직원은 찾기 힘들기 때문이지 않을까 싶은데요.사실 요구사항만 있지 어떻게 해야 관리를 잘 할 수 있는지에 대한 내용은 국내에선 잘 다뤄지지 않는 것 같습니다.특히나 회사에서 관리자라는 역할은 그냥 대충 일 잘하는 사람이면 다들 할 수 있는 것 아닌가?라는 생각을 많이 하시기 때문에 맡은 업무를 잘 하는 직원에게 관리자 역할도 덤으로 주는 것 같네요.하지만 관리자로 하게 되는 일들 또는 “업무” 입니다. 관리자가 하는 업무인거죠. 단순히 일을 잘하니까 다른 사람들 관리도 하세요. 라고 할 수 있는 일이 아니라는 겁니다. 때문에 해외에서는 관리에 대한 자격증도 존재하고 관리를 할 때 어떻게 해야 하는지에 대한 교육도 이루어지고 있습니다. 대기업에서는 HR 부서에서 이런 내용을 다루기도 합니다. 하지만 우리나라 사람들이 가지고 있는 관리자에 대한 개념은 이런 전문적인 일이라는 인식은 많이 떨어지는 것 같습니다.기본적으로 관리자가 되는 과정에 대해 제대로 가르쳐 주는 곳이 잘 없기 때문이기도 합니다.그런 의미에서 이 책이 정말 반가웠고 마음이 들떠서 읽게 되었습니다.개발자로 오랜 기간 일을 하다 보면 팀 리더로 일을 하게 되거나 그냥 현업을 지속하거나 둘 중 하나의 길을 선택하게 됩니다. 개인의 성향 또는 커리어에 따라 결정하게 됩니다.기술직으로 계속해서 경력을 쌓고 싶은 사람이라면 경력이 많아도 기술직으로 일을 할 수 있는 회사에 있어야 할 것입니다. 보통은 그런 커리어를 쌓게 두지 않기 때문입니다. 보통의 회사는 경력이 5년 이상 되면 관리직의 요구사항을 직원에게 요구합니다. 그렇게 되면 반 강제적으로 관리직을 겸해야 하죠. 관리자는 기술직이 아니기 때문에 관리에 대해 전혀 생각해보지 않았다면 그 때부터 지옥이 시작된다고 생각합니다. 이런 상황이 되면 당사자는 완전히 새로운 업무를 하는 것처럼 느껴지게 됩니다. 기술직으로 일을 할 때는 하지 않는 일들을 하게 때문인데요.그런 일들은 상사에게서 욕을 들어가며 배우거나 해보면서 알게 되는 거라며 그런걸 가르쳐 주는 곳이 어디있냐고 얘기를 하는 곳도 있긴 합니다.기존에 힘들게 배웠던 분들이니 그렇게 얘기할 수도 있다고 생각합니다. 하지만 지금은 아니라고 말씀드리고 싶네요.그런 내용이 바로 이책 개발 7년차, 매니저 1일차에 담겨있다고 생각이 듭니다. 내가 관리자의 역량을 키우고 싶거나 CTO 또는 관리직을 생각하고 계시다면 이 책을 읽어보는 것을 강력히 추천드립니다. 정말 피가되고 살이 되는 책일 것이라 자부합니다.저는 개발자로 10년이 넘게 일을 해오고 있습니다. 그렇기 때문에 개발자가 관리직으로 올라서야 할 때 무엇을 해야 하는지에 대해 몇 년 전부터 계속해서 고민을 해오고 워크샵이나 교육들을 들었었는데 이 책에 그런 내용들이 고스란히 담겨 있는 걸 보고 많은 간접 경험을 할 수 있었고 매니징을 어떻게 해야 하는가에 대해 꽤 많은 인사이트를 얻을 수 있었습니다.나중에 관리직으로서 일을 하고 싶으신 분이라면 이 책을 추천드립니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> books </tag>
        
          <tag> programming </tag>
        
          <tag> manager </tag>
        
          <tag> managing </tag>
        
          <tag> mentoring </tag>
        
          <tag> cto </tag>
        
          <tag> developer </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[`개발자 테스트`란 무엇인가?]]></title>
      <url>/basic/2020/03/16/What-is-the-developer-test/</url>
      <content type="text"><![CDATA[나는 개발자로서 테스트의 중요성은 아무리 강조해도 지나치지 않다고 생각한다.개발 업계에서 테스트는 크게 두 가지 의미로 쓰인다고 생각한다.  개발자가 하는 개발자 테스트  QA(Quality Assurance) 부서나 팀에서 하는 품질 보증을 위한 테스트내가 얘기하고자 하는 것은 바로 1번이다.개발자가 만들어낸 결과물에 대해 책임지는 개발자 테스트다.많은 개발자가 얘기하는 TDD(Testing Driven Development)가 있다.개발 전 설계 단계에서 고려하여 생각한 설계 내용을 테스트를 먼저 만들면서 검증하고, 실제 기능이 동작하는 코드를 개발하는 개발 방법론 중 하나다.설계 후 테스트를 먼저 만드는 것이 테스트가 개발 전체를 리드한다는 개념으로 테스트 주도 개발이란 이름이 붙었다.여기서 내가 얘기하고 싶은 내용은 TDD는 아니라고 분명히 얘기하고 싶다.TDD는 내가 얘기하고자 하는 내용에서부터 2~3단계는 더 높은 수준이다.나는 개발하면서 아래 나열한 단계를 밟아가며 개발을 한다.  개발하고자 하는 기능의 요구사항을 정의하고 분석한다.  알고리즘 설계가 필요한가? 필요 없다면 설계가 필요한지 필요 없는지 확인한다.  주요한 핵심 기능을 1차로 설계하고 대략적인 개발 난이도를 평준화한다.  설계가 끝나면 설계한 대로 개발을 시작한다.          여기서 가능하다면 테스트 코드를 작성한다.        개발한 결과물이 정의하고 분석한 내용과 맞는지 확인한다.  마지막으로 기능 전체를 테스트한다.  코드를 리팩토링하면서 개발을 마무리한다.이 글에서 얘기하는 테스트는 바로 6번이다.개발 도중 테스트는 당연하다. 물론 개발 도중 테스트가 제대로 완료된 상태라면 6번에서 큰 문제가 없이 동작해야 한다.하지만 개발하는 도중 기능의 테스트가 제대로 이루어지지 않았다면 6번에서 당연히 막힌다.그러면 해당 기능을 다시 확인하고 수정해야 한다.보통은 5번까지 작업하고 6번은 제대로 수행하지 않고 결과물을 운영 서버에 반영하거나 QA를 하게 된다.이렇게 하면 어떤 문제가 발생할까?일반적인 상황을 가정해보자.  개발자 A가 화면에 필요한 기능 5가지를 개발한다고 생각해보자.  기능을 3개를 만든다. 생각보다 빠르게 진행이 되었고 현재까지는 문제가 없는 것 같다.  나머지 기능 2가지는 예상하는 난도도 높고 실제로 개발하는 기간도 늘어져서 마지막에 마지막까지 개발하게 되었다.  어떻게든 일정을 맞춰서 개발을 완료했다.  하지만 전체 테스트를 못 했다. 앞에서 만든 3개의 기능은 앞서 테스트할 때 잘 동작 했으니 넘어가고 나중에 개발한 기능 2개만 테스트했다.  내가 의도 했던 대로 잘 동작하는 것을 확인했다.여기서 문제점이 무엇이라고 생각하는가?나도 수도 없이 했던 실수였고, 많은 개발자가 이런 부분을 놓친다고 생각한다.다음으로 넘어가기 전에 잠시 생각해보자.개발자 A는 무엇을 실수한 걸까.눈치가 빠른 분은 발견했으리라 싶다.개발 결과물의 기능은 총 5가지인데 3가지는 5개 기능이 모두 개발된 후에 다시 테스트하지 않았다는 것이다.이유는 많았을 것이다.  개발할 시간이 부족해서..  앞에서 테스트했으니 별문제 없겠지..  마지막에 개발한 2개 기능 잘 동작하니까 괜찮겠지..  테스트하다 늦어지면 일정이 꼬이는데…  테스트는 한번 만 하면 되는 거 아닌가??어떤 이유를 대도 전부 핑계다.기능을 5개를 개발하겠다고 했으면 최소한 그 5개는 개발 완료 후 해당 기능이 제대로 동작하는지 전부 테스트하고 확인을 해야 했다.그 테스트가 완료되지 않으면 개발은 끝난 것이 아니다.“테스트는 테스트 부서에서 하는 거 아닌가요?” 라고 하는 분이 계신다면 “최소한 제 기준에서는 아닙니다”라고 말씀드리고 싶다.나는 개발자 테스트를 이렇게 정의한다.  개발자가 만든 결과물에 대해서 요구사항에 부합하게 동작할 수 있도록 테스트하는 것.물론 지금까지 내가 개발한 내용을 보면 저 기준에 부합하지 않는 경우도 많다.지금까지 개발해오면서 개발자 테스트는 저 기준에 준하지 않으면 하지 않는 것이나 다름없다는 것을 알았다.부디 개발자 테스트와 QA를 혼동하는 개발자가 줄어들길 바라며 글을 줄입니다.]]></content>
      <categories>
        
          <category> Basic </category>
        
      </categories>
      <tags>
        
          <tag> test, </tag>
        
          <tag> development, </tag>
        
          <tag> tdd </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[DI와 IoC 개념 정리 #1]]></title>
      <url>/basic/2020/01/24/di-and-ioc_1/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다. 😎오늘은 DI(Dependency Injection) 와 IoC(Inversion of Control) 에 대한 내용을 정리해볼까 합니다.DI와 IoC는 스프링에서 중요하게 쓰이는 개념이고 생각보다 많은 부분을 다루고 있습니다.그래서 이번 글에서는 DI만 다루어 보려고 합니다.그럼 시작해 볼까요?프로그램을 개발하다 보면 Dependency 라는 것이 생깁니다. 바로 의존성이죠.이 의존성을 해결하는 방법에는 여러가지가 있는데 그 중 하나가 바로 코드에 직접적으로 의존하는 객체를 명시하고 해당 객체를 사용하는 것이죠.그 외의 방법으로는 Factory 패턴이나 JNDI 등을 사용해 의존하는 클래스를 검색하는 방법, 외부의 조립기를 사용하는 방법이 있습니다.스프링에서 사용하는 DI는 패턴이며 외부의 조립기를 사용하는 방식입니다.다음은 코드에 직접적으로 명시하는 방법입니다.Taste 라는 클래스가 있다고 생각해봅시다.코드를 보면 fruityGrade와 lightGrade에 기본값이 있고 값을 설정 하거나 불러올 수 있게 되어 있습니다.class Taste {    private int fruityGrade = 1;    private int lightGrade = 1;    public int getFruityGrade() {        return fruityGrade;    }    public int getLightGrade() {        return lightGrade;    }    public void setFruityGrade(int fruityGrade) {        this.fruityGrade = fruityGrade;    }    public void setLightGrade(int lightGrade) {        this.lightGrade = lightGrade;    }}여기 Product라는 클래스도 있습니다.Product에서는 객체 내부에 제품의 이름과 가격 그리고 Taste 클래스를 내부에서 선언해 두었습니다.Taste 클래스와 마찬가지로 getter와 setter 메소드 들이 있지만 여기선 중요하지 않아 생략해두었습니다.public class Product {    private String name = "";    private int price = 0;    private Taste taste;    /**    getter &amp; setter 생략    **/    public void setFruityTasteGrade(int fruityGrade, int lightGrade) {        // Taste 클래스를 사용할 수 있는 객체로 생성합니다.        taste = new Taste();        taste.setFruityGrade(fruityGrade);        taste.setLightGrade(lightGrade);    }}Product라는 클래스에서는 Taste를 맛으로 표현하기 위해 내부에서 선언해서 사용했는데 이 부분이 바로 코드에 직접적으로 명시하는 방법입니다.직접적인 명시를 하는 방법은 가장 큰 불편함이 있습니다.Product클래스에서 주석이 표시되어 있는 taste = new Taste() 부분입니다.Taste 클래스를 객체로 사용하려면 new라는 생성자 명령어를 통해 객체화 시켜주어야 하기 때문에 바로 다음줄에 taste.setFruityGrade(fruityGrade)를 사용하기 위해서는 매번 taste = new Taste(); 를 사용해 주어야 하죠. taste라는 변수도 선언이 되어 있지 않다면 Taste 클래스 타입으로 변수도 선언을 해주어야 합니다.매번 하면 되지 무엇이 문제냐라는 생각이 드실 수 있을꺼라 생각합니다.지금은 어쨌든 Product라는 클래스에서만 쓰고 있으니 매번 생성하면 될 것 같습니다.하지만 Product가 아니라 WineType이나 YearOfWine같은 클래스가 만들어지고 이 3개의 클래스에서 전부 Taste를 쓰는 상황이 만들어지고, 3개의 클래스에 전부 같은 Taste 값이 입력되어야 한다면 어떤가요?3개의 클래스에 모두 Taste를 넣어주고 모두 같은 값을 세팅하도록 호출을 해야 할 것입니다. 심지어 매번 호출해야 하죠. 같은 값이 제대로 입력되었는지 검증하는 단계도 필요하게 될 것입니다.수 많은 작업을 추가로 해야 하는 상황이 발생하죠.이러한 문제점들 때문에 Spring 에서는 DI 패턴을 통해 외부의 조립기로 객체를 사용하는 구조를 가지고 있습니다.그것도 아주 쉽게 어노테이션으로 추가를 할 수 있도록 되어 있죠.Spring에서는 Container와 Bean이라는 개념을 사용해서 DI를 구현해두고 있습니다.Container라는 큰 바구니에 클래스들을 객체화 하여 Bean이라는 이름으로 담아두게 됩니다.그 Container는 Spring 내에서는 @Autowire 라는 어노테이션을 통해 접근을 할 수 있도록 하여 사용할 수 있게 해두는 거죠.아까의 상황에서 3개의 클래스 Product, WineType, YearOfWine 에서 모두 Taste를 사용한다고 해도 데이터의 정확성이나 새롭게 객체를 생성해야 하는 문제를 Container가 Bean이라는 개념으로 객체들을 관리하게 하면서 해결한 겁니다.Spring에서는 이러한 방법으로 비효율적으로 객체를 선언하는 방식에서 벗어나게 되었습니다.다음글에서는 IoC를 한번 다뤄보겠습니다.참고사항으로 이 내용들은 제가 학습하기 위해 작성한 내용으로 틀린 내용이 있을 수 있습니다. :)그럼 저는 이만 뿅!]]></content>
      <categories>
        
          <category> Basic </category>
        
      </categories>
      <tags>
        
          <tag> java </tag>
        
          <tag> spring </tag>
        
          <tag> fundamental </tag>
        
          <tag> concept </tag>
        
          <tag> notion </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 다이내믹 프로그래밍 완전정복]]></title>
      <url>/review/2019/12/16/%EC%84%9C%ED%8F%89-%EB%8B%A4%EC%9D%B4%EB%82%B4%EB%AF%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%99%84%EC%A0%84%EC%A0%95%EB%B3%B5/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다. 😎여러분은 알고리즘을 공부할 때 어떻게 하시나요?지난번 제가 포스팅 했던 게임으로 익히는 코딩 알고리즘 책에 나오는 코딩게임 같은 웹사이트도 좋고 예전부터 알고리즘 연습 사이트로 유명한 leetcode, codility도 좋다고 생각합니다.예전에는 무조건 책을 보고 알고리즘을 연습해야 했는데 요즘은 다양한 방식으로 알고리즘을 풀어볼 수 있는 방법이 많이 있어 프로그램 개발을 처음 접하는 분들에게 좋은 접근방법이 될 수 있다고 생각이 드네요.특히나 아직까지는 알고리즘 문제 해결 능력이 면접이나 코딩 테스트에서 많이 적용되고 있고 실제로 면접 전 코딩 테스트를 하는 회사도 많기 때문에 일종의 취직 준비단계에서 필요한 능력일지도 모르겠네요.이러한 이유들 때문에 많은 분들이 알고리즘 문제 해결 능력을 키우고자 노력한다고 생각합니다. 그런 분들에게 저는 이 책을 추천하고 싶네요.사실 상향식, 하향식 이런 문제풀이 방법에 대해서는 저도 잘 모릅니다.10년이 넘도록 프로그램 개발을 해왔지만 알고리즘 영역보다는 다른 부분에 좀 더 치중했던 저의 경우는 문제풀이를 위한 알고리즘 문제 해결능력은 다른 분들보다 떨어진다고 생각합니다.물론 업무적인 부분의 능력은 다르다고 생각하지만, 언젠가는 저도 필요한 순간이 올꺼라 생각합니다. 이 책은 그런 알고리즘 문제 해결 방법에 대한 책입니다. 그 중에서도 가장 이해하기 힘든 재귀호출의 영역에 대한 부분을 좀 더 집중적으로 다루고 있습니다.상향식이든 하향식이든 무엇이 중요할까 라는 생각이 들긴 하지만 분명 두 부분 다 배우고 이해한다면 본인한테 맞는 방법을 찾을 수 있지 않을까하는 생각합니다.일반적인 알고리즘 책이 그렇듯이 문제를 해결하는 과정에서 특별함은 없어보이지만 상향식 방법을 써서 재귀호출을 설명했다는 점이 다르다면 다른 부분이겠네요.그리고 어떤 부분에서 좀 더 효율적인 알고리즘을 구성하는지 방법에 대한 설명이 있어 문제를 해결함에 있어 좀 더 효율적인 방법을 찾으려고 하는 분이라면 분명히 도움이 될 것입니다.책을 전부 읽어보지는 못했지만, 어떤 상황에서 재귀호출을 쓰면 좋은지 그리고 그 중에 상향식은 어떤 면에서 좋은지를 착실하게 그리고 충분히 설명하고 있다는 생각이 많이 들었습니다.프로그래밍 문제 해결에 대해 익숙하지 않고 어려워하는 분이라면 이러한 부분이 많은 도움이될꺼라는 생각이 많이 들었습니다.사실 알고리즘 문제를 풀어내는 것 역시 현실의 문제를 해결하는 방법에 있어 크게 다르지 않습니다.커다란 문제를 충분히 세분화 하고 충분히 세분화 되었다면 가장 빠른 문제 해결법을 사용해서 풀어내면 일반적인 문제는 거의 다 해결이 가능하다고 생각합니다.그 중 가장 효율적으로 문제를 풀 수 있는 방법이 바로 기존에 만들어진 알고리즘 입니다.알고리즘을 공부하고 싶은데 두꺼운 책을 읽기 힘든 분들에겐 다이나믹 프로그래밍 완전정복이 많은 도움이 되실꺼라 생각합니다.꼼꼼히 보면서 여러번 연습한다면 분명 코딩 테스트에 더이상 두려워하지 않을 것입니다. :)]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> books </tag>
        
          <tag> programming </tag>
        
          <tag> algorithm </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 심플 소프트웨어]]></title>
      <url>/review/2019/11/20/simple-software/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy입니다. 😎오늘은 심플 소프트웨어라는 책에 대해서 리뷰를 해보려구 해요.혹시 여러분이 개발자라면, 개발을 하실 때 철학이 있으신가요?저는 심플 소프트웨어를 읽으면서 이 책이 그 철학이라는 생각이 굉장히 많이 들었습니다.만약에 개발자라면 개발자로서 가져야할 태도와 추구해야 할 것들, 그리고 반드시 지켜야 하는 것들.이런 부분들이 분명히 있는데 내가 아직 어떤식으로 추구해야 할지 모른다면 이 책에 나와 있는 내용들을 곱씹는다면 정말 많은 도움이 될거라는 생각이 들었습니다.큰 목차로 보면 원칙, 복잡성과 원인, 설계, 디버깅, 일하는 방식 이런 부분들이 있습니다.이런 부분들은 사실 짧은 경력의 개발자들에게는 이 것이 정말 중요할까? 라는 생각이 들 수 있지만 실제 경력이 길어지면 길어질수록 더 중요하다는 생각이 듭니다.책을 읽으면서 한가지 드는 생각은 이 책에서 나오는 내용들이 실제로 읽었을 때 보다 훨씬 중요한 것은 읽고나서 생각을 하고 실제 내가 개발을 할 때 적용을 해보고고민을 하면서 내 몸에 배게 해야 제대로 습득 할 수 있겠다는 생각이 듭니다.심플 소프트웨어는 이곳에서 구매하실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> software </tag>
        
          <tag> Tech </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서 리뷰] 10년차 편집 디자이너에게 배우는 편집 디자인!]]></title>
      <url>/review/2019/11/17/design/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy입니다. 😎여러분은 편집 디자인이라는 것에 대해 어떻게 알고 계신가요?책만드는 따분한 일이라 생각하시나요? 아니면 그저 내가 잘 모르는 어려운 영역이라 생각하시나요?편집 디자인이라는 것은 말 그대로 신문, 잡지, 서적등의 지면을 시작적으으로 구성하는 것을 얘기합니다.어떤 내용을 넣을지 고려해서 지면의 일러스트, 활자, 사진등의 편집, 구성, 배치, 인쇄 제본에 이르는 모든 영역을 다루고 있습니다.한빛미디어에서 출판한 편집 디자인 강의라는 책이 있습니다.이책의 제일 앞부분에 보면 종이의 질이나 느낌이 다른 종이 8개가 있는데 책의 이 부분을 보고 참 내가 모르는 새로운 분야구나라는 생각이 제일 먼저 들었습니다.사실 편집디자인이라 하면 정확히 어떤 것인지 모르는 경우도 있고 어떤 일을 하는지 잘 모르는 부분이 있어서 이 직업이 도대체 무슨 일을 하는지도 모르는 사람도 있을 것 같네요.이 책을 쓰신 분은 편집디자인으로 10년동안 일을 해오시면서 어떤 직업인지 물어오는 분이 많았는지 먼저 전체적으로 편집디자인에 대해 설명하십니다.혹시 직업에 대해 먼저 설명해주는 내용이 있어 직업적으로 궁금한 내용이 있다면 해소 시킬수 있을 것 같습니다.편집 디자이너가 어떤 일을 하게 되는지 전체적인 맥락에서 한번 보고, 그 이후에 디테일하게 어떤 부분을 챙겨야 하는지 잘 설명해주십니다.편집 디자이너 자체가 툴을 활용한 부분이 많기 때문에 기본적으로는 인디자인이란 툴을 쓰는 법부터 설명해주시는데 자세하게 설명되어 있어서 처음 툴을 접하는 분들에게 많은 도움이 될 것 같네요!그리고 종종 중간에 현업에서 일을 해야지만 알 수 있는 내용들을 담고 있어 10년차 편집 디자이너의 노하우를 엿볼 수 있었습니다.기본적으론 디자이너가 하는 일들에 편집이라는 요소가 들어가면서 훨씬 더 많은 영역의 일을 하게 되고 그만큼 일에 대한 전문성도 필요해 보였습니다.디자인을 해야 하는 능력도 필요하니까요!개인적으로는 최근에 책도 많이 보면서 책의 구성은 어떻게 만들어지는지 알 수 있어 흥미로운 부분도 있었습니다.책을 보다 보면 참 여러가지 형태의 책을 보게 되는데 무엇 하나 그냥 한 것이 없다는게 그저 신기할 따름이었습니다.한빈미디어에서 나온 책 편집 디자인 강의는 여기서 보실 수 있습니다! :)]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> book </tag>
        
          <tag> Adobe </tag>
        
          <tag> 인디자인 </tag>
        
          <tag> 한빛미디어 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Something]]></title>
      <url>/2019/11/01/something/</url>
      <content type="text"><![CDATA[90년대생이 가진 특성을 분석하고 그 특성에 따라 어떻게 참여할 수 있도록 도와주는 것이 기성세대와 기업체의 숙명90년대생들이 자라온 환경은 원하는 것을 빠르게 얻어낼 수 있는 환경이다.원하는 정보가 있다면 스마트폰으로 빠르게 검색해서 알아낸다.원하는 상품이 있다면 아마존 같은 쇼핑몰에서 구매하고 집에서 배송 받는다.이런 환경에서 자란 사람은 조급한 성격이 강하다.바꿔 얘기하면 무엇인가를 얻어내기 위해 기다릴 줄을 모른다.이 때 기다릴줄 모른다고 다그칠 것이 아니라 기다리는게 무엇인지 알려주고, 얼마나 기다려야 하는지 알려주고 공부든 업무든 적응하는 기간이 필요하다는 것을 인지시켜 지속적으로 참여하도록 이끌어야 한다.일의 종류나 직위에 관계없이, 프론트 데스크 업무까지 모든 직원의 업무 내용을 모두 프로젝트화 한다.모든 사람이 프로젝트 매니저가 된다.월별 업무 목표는 하나의 월별 프로젝트가 되어 엄격한 관리하에 진행된다.사람들이 성장하기 위해서는 새로운 도전과 경험이 필요하다.아직 잘 모르고 있는 임무를 맡겨서 새로운 도전을 할 수 있도록 해야 한다.  아무것도 없는 상황에서 프로젝트를 시작해야 할 때  곤란을 겪는 사업을 시정해야 할 때일을 통해 배울 수 있는 것이 없다면 일하는 시간은 죽은 시간이 되어 버린다.자기 계발과 자기 실현을 근무시간에 할 수 있도록 돕는 것질문들..회고를 재미있게 할 수 있는 방법이 없을까?일을 통해서 배울 것이 있다는 사실을 어떻게 알려줄 것인가내가 성장하기 위해 어떤 업무를 하고 싶은지 생각해보자.이직자를 졸업자로 생각해보자.이직자는 적이 아니다. 영업의 기회를 만들어줄수도 있는 졸업자다.회사에서 퇴사를 했던 사람과 긴밀하고 좋은 관계를 유지한다면 타 회사의 협업에서 좀 더 좋은 이미지를 만들어 낼 수도 있다.어떻게 해야 퇴사가 아닌 졸업이라고 생각하게 할지 고민해보자.기본기가 필요한데… 기본기를 갖출 수 있을 때까지는 시간이 필요한데 그걸 견디지 못하는 직원들에게 이것이 필요하다는 것을 어떻게 인지시킬 것인가.번거로움의 제거와 최소화는 최소한 90년대생들의 소비자들에게는 중요한 요소다.간편하게 식사할 수 있는 가정식 대체 식품을 의미하는 HMR은 간편식이라는 이유 하나만으로 가파르게 성장하는 중이다.불편한거, 모른는거, 어려운거, 복잡한거, 느린거-&gt; 이것을 해결하는게 돈이 되는 시대.90년대는 스마트폰을 태어날 때부터 쓰는 세대다.그만큼 연결되어 있다는 느낌에 강하게 집착한다.]]></content>
      <categories>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[컨퍼런스 리뷰] 테크 크런치 디스럽트 2019 참가 후기]]></title>
      <url>/review/2019/10/20/TechCrunch-Disrupt-2019/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy입니다. 😎오늘은 테크크런치 참가 후기를 작성해 보려고 합니다.발표 세션도 있어서 들을 수 있으면 좋겠다는 생각도 했었습니다만, 회사의 부스를 지켜야 했고세션을 들으려면 더 비싼 입장권이 필요해서 발표 세션은 듣지 못했습니다.먼저 테크크런치 디스럽트 2019를 간단하게 소개하겠습니다.테크크런치 디스럽트 컨퍼런스는 IT 전문 매체인 테크크런치가 매년 개최하는 행사로 매년 3천명이 넘는 기업가, 투자가, 신기술에 관심있는 사람들이 모이는 스타트업 등용문 같은 행사입니다.테크크런치 디스럽트를 통해 발굴된 스타트업중에 대표적인 기업으로는 우버, 드롭박스, 핏빗등이 있습니다.많은 스타트업들과 VC가 참가하는 만큼 스타트업 최대 네트워크의 장으로 발전해가고 있습니다.저희 회사는 Kotra(대한무역투자진흥공사)에서 모집공고를 통해 지원을 받아 행사에 참여했습니다.총 10월 2일부터 4일까지 3일동안 부스를 배정받아 행사에 참여했고, 부족한 영어지만 나름대로 회사 제품을 설명하며 홍보했습니다 :)대규모로 진행되는 행사 답게 사전에 디스럽트 행사 전용 App이 배포 되어 VC와의 만남이나 행사와 관련된 내용을 앱을 통해 확인할 수 있었습니다.미국에서 진행되는 행사이니 만큼 몇가지 인상깊은 것들이 있었습니다.미국답게 살인적인 물가(행사장 근처의 음식점중에 한끼에 15달러 이하의 음식점 찾기가 힘들었습니다.)와공항만큼은 아니었지만 행사장 입구에서 소지품 검사를 하는 모습, 정말 싼 기름 가격(1 갤런에 3달러 정도), 말도 안되는 주거 비용등찾으려고 한다면 정말 많은 부분이 살기 힘든 모습이라면 한편으로는 너무 좋아서 부러웠던 것도 많았습니다.대표적으로 날씨! 샌프란시스코는 다른 주보다 세금이 더 비싼데 날씨 때문에 더 비싸다는 농담이 있을 정도로 날씨가 너무 좋습니다.자세한 내용은 아래 사진들과 함께 설명드리겠습니다.[사진]사진을 보시면 얼마나 좋은지 짐작이 되시리가 생각합니다.저희는 행사가 사직되는 10월 2일이 아닌 9월 30일 오후에 샌프란시스코에 먼저 도착했습니다.10월 1일에 행사 준비와 더불어 약간의 관광을 할 수 있도록 회사에서 배려해주었죠.이 글을 빌어 감사드립니다.덕분에 아래 사진들을 찍을 수 있었습니다.[10월 1일 사진들]애플샵을 빼놓을 수 없겠죠![애플샵]유명한 치즈케이크 팩토리 방문[치즈케이크 팩토리]블루보틀도 다녀오고[블루 보틀 사진]10월 2일부터는 본격적인 행사의 시작이었습니다.행사장에 들어가기전에 등록을 하고![등록 부스 사진]3일동안 회사 제품을 홍보할 부스입니다.[부스 사진]첫날이라 어쩔 수 없이 부실한 아침…[10월 2일 아침 사진]부스 방분객들을 위한 굿즈도 챙기고![굿즈들 사진]열일하는 모습들..[몇개 사진]점심먹으로 고고싱![10월 2일 점심 사진]드디어 첫날 행사 끝![10월 2일 행사 마무리]저녁은 대표님의 추천 맛집![10월 2일 저녁]행사 둘째날의 시작조금은 적응된 모습이네요.[10월 3일 준비]점심과 산책[10월 3일 점심]저녁은 숙소에서![10월 3일 저녁]드디어 마지막날이네요! 숙소도 마지막 날이어서 체크아웃 해야 했습니다.ㅠㅠ[10월 4일 아침][10월 4일 짐을 들고 나오는 모습]행사 마지막날은 나름대로 많이 적응해서 행사를 준비하고 다른 부스도 돌아다녔었습니다.그중 한 곳 인상 깊은 제품을 홍보하는 곳이 있었습니다.장난감인데 저도 하나 가지고 싶더군요.[WOWCube 사진]가내수공업…[가내수공업 사진]마지막 점심[라멘 사진]Kotra관들 중 한 곳, 첫날부터 협의해서 회사 케릭터를 프린트 했으면 했던 아쉬웠던 프린트 회사아침에 맡겨뒀던 짐을 찾고 시애틀로 가는길! 이제부터는 휴가입니다.ㅎ미국까지 왔는데 샌프란시스코에서 4일만으로 끝낼 수는 없었어요.시애틀에서 휴가를 보내며 방문했던 곳은 다시 포스팅 하겠습니다!]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> conference </tag>
        
          <tag> Tech </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 맛있는 디자인 프리미어 프로 CC 2019]]></title>
      <url>/review/2019/10/14/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-%ED%94%84%EB%A6%AC%EB%AF%B8%EC%96%B4%ED%94%84%EB%A1%9CCC2019/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy입니다. 😎오늘은 영상 편집을 위한 툴 중 Adobe Premiere Pro에 입문하기 위한 책을 리뷰하려고 합니다.요즘 유튜브를 시작하려는 분들이나 영상편집에 관심을 두는 분들이 정말 부쩍 늘었죠.이렇게 영상 편집이 많은 사람들에게 관심을 받기 시작한 이유는 아무래도 영상 편집에 대한 접근성이 좋아졌기 때문이 아닐까 싶네요.요즘은 핸드폰이나 저렴한 축에 속하는 카메라를 통해서 4K 영상을 찍고 사람들과 공유하기가 정말 쉬워졌습니다.하지만 영상편집에 대한 수요는 늘어난 반면 요구는 그에 따라가지 못해 많은 사람들이 영상편집에 뛰어들었다가 난이도 때문에 결국 포기하게 되지 않나라는 생각이 드네요.저도 이번에 카메라를 하나 장만하면서 영상편집에 관심이 생기게 되었습니다.마침 리뷰를 하게 된 이 책으로 공부를 하면 괜찮겠다는 생각이 드네요.저는 컴퓨터를 오래 다뤄왔지만 영상 편집은 문외한입니다.그래서 용어나 툴의 사용 방식에 대해 익숙하지 않았는데요.이 책에서는 초반부에 관련 용어 설명부터 자세하게 해주고 있어 이해하는데 많은 도움이 되었습니다.추가로 영상을 편집하거나 영상의 구도를 잡을 때 어떻게 잡는 것이 사람들이 보는데 편해지는지 등,이론적인 부분도 함께 다루고 있어 저처럼 전공이 아닌 사람도 영상을 촬영하고 수정하는데 어떤 방향으로 해야 할지 정하는데 도움이 되는 내용도 있었습니다.의도에 맞게 어떤 방식으로 촬영을 할지 또 어떻게 편집을 진행해야 하는데 큰 도움이 될거라는 생각이 들었습니다.그 외에도 자막, 색 보정, 화면 전환, 템플릿 활용 등 다양한 기능을 활용해서 영상을 편집할 수 있도록 설명해주고 있습니다.물론 아주 고급기능은 본인이 툴을 쓰면서 좀 더 창의적으로 생각을 하며 만들어야 하겠지만 이 책 하나만으로 기본적인 영상 편집과 유튜브 채널 운영까지 공부하는데 어렵지 않을 것 같네요. :)마지막으로 클라우드 서비스를 활용한 프리미어 러시까지 활용하여 태블릿이나 모바일에서 영상을 편집할 수 있도록 가이드를 제공하고 있으니 앞으로 영상 편집으로 진로를 생각하고 계신 분이라면 초반 개념 익히기와 툴의 사용법을 익히는데는 많은 도움이 될거라 생각합니다.이 책은 이곳에서 구매하실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> book </tag>
        
          <tag> Adobe </tag>
        
          <tag> Premiere </tag>
        
          <tag> Pro </tag>
        
          <tag> CC </tag>
        
          <tag> 2019 </tag>
        
          <tag> 한빛미디어 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[VSCode python terminal 에러 출력 해결법]]></title>
      <url>/environment/2019/09/16/visual-code-nvm-prefix-error-solution/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy입니다. 😎오늘은 Visual Studio Code에서 발생하는 에러 중 하나를 해결하는 방법을 포스팅 하려고 합니다.심플한 내용이긴 하지만 저 같이 에러 메시지가 표시되는 것마저 짜증나는 분들을 위해 stackoverflow에 올라와 있는 내용을 가져와서 포스팅합니다.아래에 보면 에러 메시지가 있습니다.저는 아래 메시지를 파이썬 코드를 실행한 후 터미널에서 만나게 되는데요.아래 터미널 창을 닫았다가 열기만 하면 무조건 발생하는 에러여서 항상 눈에 거슬렸었습니다.nvm is not compatible with the npm config "prefix" option: currently set to "/usr/local"Run `npm config delete prefix` or `nvm use --delete-prefix v10.15.3 --silent` to unset it.거슬리는것은 그냥 두면 안되겠지요.😁메시지에 나온대로 동일하게 입력했을 때 문제가 해결된다면 참 좋겠지만, 그렇지 않았기에 열심히 구글링을 해보았습니다.stackoverflow 링크위 링크에 답이 있어 추가해봅니다.아래에 내용이 해당 문제를 해결 할 수 있는 명령어 입니다.물론 [NODE_VERSION]은 에러 메시지에 나오는 버전을 입력해주어야겠죠?새로운 터미널을 열어서 아래 2개 명령어를 입력해주고 Visual Studio Code를 재시작해 주면 됩니다!쉽죠!?$ npm config delete prefix $ npm config set prefix $NVM_DIR/versions/node/[NODE_VERSION]저는 위 명령어로 해결을 했는데, 혹시 해결이 되지 않는 분은 댓글로 소통해 보아요. :)]]></content>
      <categories>
        
          <category> environment </category>
        
      </categories>
      <tags>
        
          <tag> config </tag>
        
          <tag> vscode </tag>
        
          <tag> error </tag>
        
          <tag> fix </tag>
        
          <tag> solution </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 토크노믹스]]></title>
      <url>/review/2019/09/16/%ED%86%A0%ED%81%AC%EB%85%B8%EB%AF%B9%EC%8A%A4/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다.😗오늘은 최근에 읽은 책 토크노믹스라는 책을 리뷰하려고 합니다.저는 블록체인 업계에서 일하고 있습니다.그 이유로 블록체인에 관심도 많고 무엇이 사기인지 제대로 된 내용을 전달하고 있는지 관심이 많습니다.업계가 블록체인의 환상 때문에 불신으로 가득 찬 산업이 되었기 때문이죠.그래서 좀 더 주의 깊게 보고 정확한 사실인지 검증하려고 합니다.최근에는 ICO에 대해서도 어느 정도 필요성을 느끼게 되어 토큰경제에 대해서도 관심을 가지게 되었는데, 이 책을 읽으면서 꽤 많은 정보를 얻을 수 있었습니다.만약에 ICO를 준비하는 회사라면 ICO를 왜 하는지부터 ICO가 가능한 것인지, 법정 제재는 없는 것인지 파악하기에 좋은 길잡이가 되어줄 책이 아닐까 생각합니다.기존의 블록체인 업계가 왜 이렇게 신뢰를 잃게 되었는지 그래서 진정으로 블록체인은 필요 없는 것인지에 대해서도 기준이 될 수 있는 내용을 제시하는 부분이 많은 연구를 했다는 것이 느껴졌습니다.첫 번째 ICO를 했던 회사부터 현재에 이르기까지 해외의 다양한 사례 분석을 통해 ICO를 하기 전에 생각해볼 점들을 생각해볼 수 있게 해줍니다.책의 후반부에는 ICO를 하기 위해서 어떤 준비 작업이 필요한지 진행하면서 꼭 지켜야 하는 것은 무엇인지도 함께 제시합니다.어떻게 해야 투자자들에게 신뢰를 받을 수 있고 ICO를 진행하는 방법이 어떤 것들이 있는지도 상세히 다룹니다.마지막으로 블록체인이 미래 기술들과 함께 어떤 방식으로 동작하게 될지에 대한 내용도 다루고 있습니다.신중하게 책을 끝까지 다 읽었다면 미래에는 블록체인이 어떤 방식으로 쓰이게 될 것인가에 대해 충분한 인사이트를 얻을 수 있으리라 믿어 의심치 않습니다.이 책은 ICO에 대해서 많은 내용을 다루고 있지만, 전반적으로 블록체인의 역사에 대해서도 간단하게 살펴볼 수 있는 부분이 앞에 있어 관련 업계의 사람이라면 이해하는데 어렵지 않을 거라 생각됩니다.업계를 정확히 모르는 사람도 이런 내용의 역사가 있구나라는 느낌으로 읽을 수 있는 교양서이지 않을까 싶습니다.토크노믹스는 이곳에서 구매하실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> book </tag>
        
          <tag> blockchain </tag>
        
          <tag> token </tag>
        
          <tag> coin </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Application Programming Interface Server[1]]]></title>
      <url>/series/2019/08/16/API%EC%84%9C%EB%B2%84%EB%9E%80/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다.😗오늘은 API 서버가 무엇인가에 대해 한번 알아보려고 합니다.API 서버가 무엇인지 알려면 API가 어떤 것인지 먼저 알아야겠지요?모두의 백과사전 위키피디아의 정의에 따르면 API는 Application Programming Interface의 약자 입니다. 한글로 번역하면 응용프로그램 프로그래밍 인터페이스가 되겠네요.인터페이스의 의미를 찾아보면 두 개 이상의 장치 사이에서 정보나 신호를 주고받는 접점이나 경계면이라고 하는데요.역시 국어사전은 어렵네요.제 기준에서 API를 조금 더 풀어 써 보면 이렇습니다.  응용프로그램의 특정 기능을 사용할 수 있도록 제공하는 규정 또는 방법이렇게 정의를 하는 편이 저에게는 더 쉬운 것 같네요.그러면 API 서버는 무엇일까요? 또 어떤 상황에서 사용할까요?개발자 입장에서 생각해보면 API 서버는 클라이언트에서 데이터베이스를 사용하기 위한 용도로 많이 사용되는 것 같습니다.가볍게 생각해보면 덩치가 큰 응용 프로그램에서 기능의 일부분을 사용하기 위해 만들어지는 서버인 것이지요.이메일을 보내고 받는 웹 응용 서비스를 생각해봤을 때 메일을 보내거나 메일을 받거나 하는 기능들을 외부에서 사용하기 위해서는 메일 보내기 API 또는 메일 받기 API가 필요한 것입니다.보통 회사에서 제공하는 서비스는 외부에서 기능을 직접 보거나 코드를 직접 사용할 수는 없기 때문에 외부에서 접근 가능한 API 전용 서버를 따로 마련합니다.그 서버를 통해 사용자는 서비스의 일부 기능을 이용합니다.어떠셨나요? 간단하게 API 서버가 어떤 기능을 하는지 정리해보았습니다.다음은 API 서버를 만드는 방법에 대해 여러 가지 언어로 다뤄볼 예정이니 기대해주세요!그럼 다음에 또 만나요!]]></content>
      <categories>
        
          <category> series </category>
        
      </categories>
      <tags>
        
          <tag> api </tag>
        
          <tag> server </tag>
        
          <tag> describe </tag>
        
          <tag> programming </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 김기현의 자연어 처리 딥러닝 캠프]]></title>
      <url>/review/2019/08/10/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-%EA%B9%80%EA%B8%B0%ED%98%84%EC%9D%98-%EC%9E%90%EC%97%B0%EC%96%B4%EC%B2%98%EB%A6%AC-%EB%94%A5%EB%9F%AC%EB%8B%9D%EC%BA%A0%ED%94%84/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다. 😎오늘은 한창 핫한 딥러닝 책 중 한권인 ‘김기현의 자연어 처리 딥러닝 캠프’를 리뷰하려고 합니다!사실 저는 딥러닝이나 머신러닝은 잘 알지 못합니다.다만, 머신러닝과 딥러닝이 동작하는 기본 방식이나 모델링이라는 것을 한다는 점 등을 조금 알고 있을 뿐입니다.머신러닝과 딥러닝은 주변 사람들이 많은 얘기를 해왔고 쉽지 않은 것은 알고 있기에 항상 어려웠던 기억만 납니다.사실 앞으로 머신러닝과 딥러닝은 어떤 상황이든 데이터를 사용해서 무엇인가를 해야 하는 상황이라면 항상 거론 될 수밖에 없는 분야입니다.그 중에 특히 자연어 처리 라는 것은 머신러닝 또는 딥러닝이 가장 필요로 하는 분야가 아닐까 생각합니다.이 책은 사실 초보자를 위한 책은 아닙니다. 하지만 실제 머신러닝 업무를 하고 계신 저자분이 자연어 처리를 위해 작업을 했던 경험을 책에 녹여주셔서 많은 도움이 되리라 생각되는 책입니다.저 처럼 딥러닝을 경험해보지 않은 사람은 어려운 내용이 많지만 최소한 기본적인 개념을 익히기에는 나쁘지 않은 책이란 생각입니다.그 이유는 어려운 개념이 나올 때마다 항상 설명을 해주고 있고 충분히 따라 해볼 수 있는 부분들이 있기 때문입니다.한참 상승세인 파이토치를 사용한다는 점도 좋은 부분이라 생각됩니다.그 밖에도 자연어를 처리할 때 고려해야 할 다양한 부분을 책에 친절하게 설명해주셔서 저로서는 자연어 처리의 견문을 넓힐 수 있었습니다.딥러닝 기반의 자연어 처리를 하시려는 분이라면 한번쯤 보면 괜찮은 책이라는 생각이 듭니다.패스트 캠퍼스에서도 강의를 하셨던 점과 기업 강연도 나가셨던 점도 좀 더 믿음이 가는 이유 입니다.그간의 강연 경험을 통해 더 쉽게 이해할 수 있도록 책을 쓰셨다는 것도 책을 읽으면서 느낄 수 있었습니다.이 책은 이곳에서 구매하실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> book </tag>
        
          <tag> python </tag>
        
          <tag> pytorch </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] Managing Kubernetes]]></title>
      <url>/review/2019/07/12/Managing-Kubernetes/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다.😁여러분은 혹시 쿠버네티스를 사용해보셨나요? 아니면 혹시 도커를 업무에 쓰고 계신가요?만약 아직 사용하지 않으신다면 최대한 빠르게 배우신 다음에 업무에 하나씩 차근 차근 적용해보시는 것을 강력하게 추천 드립니다.이미 아주 많은 회사가 도커와 쿠버네티스를 사용하면서 엄청난 업무 효율호를 이뤄냈기 때문이죠.도커는 컨테이너라는 개념을 사용하여 개발자가 만들어내는 애플리케이션을 쉽게 패키징하여 구축과 테스트 및 배포를 쉽게 할 수 있도록 지원하는 소프트웨어 플랫폼입니다.패키징하여 관리할 수 있다는 장점 때문에 이미 많은 회사에서 도커를 사용하여 개발을 진행하고 있습니다.패키징된 애플리케이션이라 새롭게 설치하거나 서버를 켜서 세팅할 필요가 전혀 없어지게 되죠.설정이나 OS 환경을 구축하기 위해 매번 동일한 작업을 하지 않아도 되죠. 패키징된 도커 컨테이너를 올리기만 하면 뿜 하고 서버가 실행 되니까요.덕분에 분산시스템에 더 최적화된 개발을 할 수 있게 됩니다.애플리케이션 단위를 좀 더 잘게 나눠서 패키징 하면 각각의 기능에 대해 유지보수를 더 쉽게 할 수 있도록 도와줍니다.대신에 새로운 문제가 생기게 됩니다. 도커를 사용해서 더 작은 단위의 크기로 애플리케이션을 만들면서 더 많은 애플리케이션 컨테이너가 생기게 됩니다.전통적인 소프트웨어 방식은 하나의 애플리케이션에 여러개의 기능을 담아서 처리하도록 만드는 방식이었습니다만, 도커 컨테이너를 도입하면서 그 많은 기능들이 전부 각각 하나의 어플리케이션으로 동작하게 되었습니다.이러한 구조를 사용하는 방식을 마이크로서비스 아키텍처라고 합니다.하지만 언제나 장점과 단점은 공존합니다.이 마이크로서비스 아키텍처도 당연히 장점만 존재하지 않습니다.서비스의 규모에 따라 운영 방식에 따라 작업이 더 늘어나게 되는 경우도 생깁니다.아주 큰 규모가 아니라고 하더라도 여러개의 도커 컨테이너를 관리하는 것 자체는 쉬운일은 아닙니다.컨테이너를 업데이트 하는 일이나 컨테이너에 문제가 발생한 경우 또는 각각의 컨테이너가 통신을 하는 방법도 운영하는 입장에서는 쉽지 않은 문제로 인식됩니다.그래서 컨테이너 오케스트레이션 플랫폼이 생겨나게 됩니다.쿠버네티스는 이 컨테이너 오케스트레이션 플랫폼중 하나인데 구글에서 10년 이상의 시간동안 내부에서 사용하고 외부로 공개한 오픈소스 입니다.구글 내부에서 먼저 테스트하면서 검증을 거치기 때문에 안정성도 높고 운영에 필요한 다양한 기능들을 담고 있습니다.제가 읽은 책 Managing Kubernetes에는 쿠버네티스에서 지원하는 기능들의 상세한 소개와 실제 쿠버네티스 클러스터를 운영할 때 도움이 되는 직접적인 내용들을 다루고 있습니다.쿠버네티스에 대해 다루는 책인 만큼 앞부분에서는 쿠버네티스가 어떤 것인지에 대한 내용도 같이 다루고 있습니다.인프라 엔지니어로 일을 하고 계신 분이라면 쉽게 이해할 수 있을 만한 내용들입니다.저는 개발자지만 배포나 테스트 CI/CD와 관련해서 쿠버네티스를 어떤식으로 활용하면 좋을지에 대해 고민하고 사용했었습니다.그 때는 따로 책을 사지 않고 쿠버네티스의 메뉴얼을 보면서 진행 했습니다.사용해보니 발견 할 수 있었던 문제점들이 많았는데 이 책을 읽다보니 그 때 문제들을 어떻게 풀어야 하는지에 대해 방법적인 많은 해결방법을 찾을 수 있었습니다.정말 실질적으로 도움이 되는 책이라고 생각이 들었습니다.다만 초심자용은 아니기 때문에 초보자라면 개념적인 부분을 충분히 이해하신 뒤에 책을 읽는 것을 추천 드립니다.만약 쿠버네티스를 운영하고 있고 여러 문제점들을 해결해야 하는 상황이라면 이 책이 많은 도움이 되실꺼라 생각합니다.Managing Kubernetes는 이곳에서 구매가 가능합니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> book </tag>
        
          <tag> kubernetes </tag>
        
          <tag> study </tag>
        
          <tag> hanbit </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 혼자 공부하는 파이썬]]></title>
      <url>/review/2019/06/15/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-%ED%98%BC%EC%9E%90%EA%B3%B5%EB%B6%80%ED%95%98%EB%8A%94%ED%8C%8C%EC%9D%B4%EC%8D%AC/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy입니다. 😁오늘은 “혼자 공부하는 파이썬”이라는 책을 리뷰하려고 합니다.사실 이 책은 제가 베타리뷰로 참여를 했던 책이라 좀 더 신경쓰이고 마음이 가는 책입니다.이 책의 주 목적은 프로그래밍 언어를 혼자서 공부하는 사람들이 쉽게 공부 할 수 있도록 하는 것입니다. 초등교육에 코딩교육이 의무화 되면서 프로그래밍 언어를 접하는 나잇대가 엄청나게 낮아졌지만 오히려 성인들은 업으로 IT일을 하는 사람이 아닌 이상 접하기가 힘든게 사실이죠. 이 책은 그런 사람들을 위해 혼자서 프로그래밍 언어의 기초를 쌓을 수 있는 책이라고 할 수 있습니다.그동안에 나왔던 책들은 이미 개발자인 사람들을 위한 책들이 대다수여서 잘 알지 못하는 사람이 책만 보고 공부한다는 것 자체가 쉽지 않았죠. 실제로 어렵기도 합니다.전공 분야가 있다는 것은 그만큼 깊이가 존재하는 학문이라는 것 이니까요. 그래서 이 책은 때로는 자습서가 되기도 하고 때로는 가이드북이 되기도 합니다.내가 잘해도 잘하지 않아도 토닥여주기도 하면서 차근차근 내용을 진행할 수 있게 도와줍니다.10년 가까이 개발을 해오면서 저도 개발자가 아닌 사람을 대상으로 하는 책이 나오지 않는 것에 대해 저도 항상 고민을 가지고 있었는데 이런 책을 만든다고 하여 선뜻 베타리뷰에 신청했었습니다.그 결과물로 꽤 괜찮은 책이 나온 것 같아 기분이 좋네요.저는 “혼자 공부하는 파이썬”만 리뷰 했지만, 자바와 C언어도 있으니 3개 언어중에 기초를 쌓고 싶은 언어가 있다면 책을 한번 찾아보시는 것을 추천드립니다.짧은 리뷰지만 진심으로 적어보았습니다.“혼자 공부하는 파이썬”은이곳에서 구매 하실 수 있습니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> book </tag>
        
          <tag> python </tag>
        
          <tag> study </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[패터슨과 일간 이슬아]]></title>
      <url>/book&movie/2019/06/15/trevari_2/</url>
      <content type="text"><![CDATA[패터슨 그리고 일간 이슬이 수필집패터슨은 참으로 고요한 영화라는 생각이 들었다. 매 순간순간이 빠르게 지나가는 나의 세계 속에서 패터슨이란 영화는 참신하게 다가왔다. 매일 비슷한 시간에 일어나서 출근하고 버스를 운행하기 직전에는 글을 쓴다. 글은 그날 오후에 완성이 되기도 하고 다음 날에 완성이 되기도 한다. 그 와중에는 매번 반복되는 패턴과 쌍둥이가 있다. 같지만 다른 일란성 쌍둥이라 외모는 동일하지만, 전혀 다른 성격을 가진 듯한 모습의 쌍둥이들 그리고 같은 모양이지만 모양이 동일한 것 외에 모든 것이 다른 패턴들이 꾸준하게 나온다. 패터슨처럼 매일 매일 같은 일상을 보내지만, 매번 다른 일상이 되는 것처럼 일상적인 패턴 속의 다름을 나타내고 싶었던 것일까, 알 수 없다. 한 가지 더 영화에는 여성에 대한 시선이 나온다. 패터슨이 운전을 시작하기 전 직원과의 대화에서, 패터슨이 운전하는 도중 남자들이 여성에 대해 마음대로 얘기하는 부분, 패터슨도 술집에서 만난 배우도 여성들의 말은 듣지 않으려는 태도들이 불편했다. 마치 “여성은 발언권이 없어”라고 얘기하는 것처럼. 마빈이 패터슨의 비밀 노트를 완전히 가루로 만들었을 때도 로라가 하는 행동에 대해 나는 이해가 되지 않았다. 내 눈에는 분명 잘못한 것은 패터슨이었지만, 패터슨은 자신의 비밀 노트가 마빈 때문에 찢긴 것이라는 부분에만 집중해서 다른 사람의 잘못이라는 생각만 하는 것 같았다. 사실 지금 시점에서도 나는 영화가 얘기하고자 하는 내용이 무엇인지 모르겠다. 그저 술집의 고무총 소동에서 “사랑이 없으면 대체 사는 이유가 뭐야”라는 문구가 귓가에서 맴돌 뿐이다. 모두에게 물어보고 싶다. 각자의 내가 사는 이유는 무엇일까.일간 이슬아 수필집도 매일 글을 쓴다는 점 그리고 일상에 관해 얘기한다는 점에서 패터슨과 결을 같이 한다. 하지만 이슬아의 일상은 너무나도 다양하다. 본인의 얘기부터 시작해서 부모님 얘기, 남자친구, 사랑 얘기, 심지어 동료 작가들의 얘기도 있다. 참으로 많은 이야기를 다양하게 풀어내는 것이 존경스러울 정도다. 원래 매일 수필을 쓰는 것이 이런 식이 가능한 일이었던가 하는 생각을 할 정도로. 참 낯선 이야기들이지만 결국 우리의 이야기가 아닌가? 일간 이슬아에 존재하는 이슬아는 안쓰럽기도, 신기하기도, 내가 부끄럽기도, 정말 부럽기도 하다. 픽션과 논픽션의 사이 응픽션이라고 소개했지만 지나치게 현실 같은 느낌은 나만의 느낌일까? 다른 이가 느끼는 일간 이슬아가 궁금하다..]]></content>
      <categories>
        
          <category> book&amp;movie </category>
        
      </categories>
      <tags>
        
          <tag> book </tag>
        
          <tag> movie </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[학교 수업에서 알려주지 않는 개발자 직군]]></title>
      <url>/development/2019/06/15/software-engineer/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다.😗 공지입니다.  블로그의 글은 제 개인적인 견해입니다.  개인적으로 경험한 것들의 집합이기 때문에 실제 업계 정보와는 다를 수 있습니다.그럼 시작할께요!오늘은 개발자 직군에 대해서 설명해보려고 합니다.사실 개발자 라고 하면 잘 모르는 사람은 그저 컴퓨터로 코딩하는 사람들이라 생각할 수 있지만세분화 하려고 하면 엄청나게 세분화 할 수 있는 분야 이기도 합니다.헌데 대학교에서도 그렇고 개발자는 그냥 전체를 통틀어서 소프트웨어를 만드는 사람 정도로만 생각을 하죠.하지만 일을 하다 보면 여러 직군이 존재하고 본인의 성향에 따라 일하게 되는 분야가 참 다양해지는데 말이죠.그러면 소프트웨어 개발자 직군이 어떤게 있는지 한번 살펴 봅시다!먼저 방금 얘기했듯이 소프트웨어 개발자라는 큰 범주가 있습니다.소프트웨어 개발자라는 큰 범주 안에서 세부적으로 클라이언트 개발자, 서버 개발자, 인프라 개발자 등으로 나뉘어 집니다.먼저 클라이언트 개발자부터 살펴봅시다.- 클라이언트 개발자클라이언트 개발자는 아래 세부 직군으로 나누어 집니다.  웹 개발자  모바일 앱 개발자웹 개발자는 기본적으로 웹 기술을 활용해서 개발을 하는 사람을 얘기합니다.웹 개발자는 세부직군으로 프론트엔드와 백엔드로 나뉘어지죠.프론트엔드 개발자프론트엔드 개발자는 사용자와의 접점에 대한 부분을 개발합니다.경우에 따라서는 UI/UX를 같이 다루기도 합니다.  HTML, CSS, javascript, Reactjs, Vuejs, Angularjs, typescript백엔드 개발자백엔드는 화면보다는 데이터를 처리하는 부분에 더 집중하여 개발하는 직군입니다.서비스를 통해 생성되는 데이터를 저장하거나 사용자에게 제공되는 데이터를 프론트엔드 개발자가 사용하기 쉽게 API로 만들어서 제공하거나 알고리즘을 통해 계산하는 로직을 만들어내기도 합니다.데이터를 관리하기 때문에 데이터베이스에 데이터를 저장하거나 데이터를 읽어 오는 부분도 같이 개발 합니다.주로 사용하는 언어는 굉장히 다양합니다.  PHP, JAVA, Kotlin, javascript, Python, Ruby, C#, Go각 언어들은 서버개발자가 개발할 때 함께 사용하는 프레임워크도 존재합니다.프레임워크를 쓰게 되면 프론트엔드 개발자는 각 언어에 맞게 해당 프레임워크를 사용해 프론트를 개발하게 됩니다.모바일 개발자 입니다.- 모바일 개발자모바일 개발자는 iOS와 Android OS를 기반으로한 APP을 개발하는 사람들을 얘기합니다.현재 iOS의 경우는 Swift 언어를 사용하고 Android OS의 경우는kotlin 을 사용해서 개발하는 경우가 많습니다.이전에는 iOS는 Objective-c, Android OS는 java를 사용했었죠.개발 언어의 변화로 인해 이전과 비교해서 환경이 많이 나아졌습니다.다른 직군의 개발자보다는 수가 적은 편입니다.서버개발자 입니다.- 서버 개발자서버 개발자는 백엔드 개발자가 데이터를 처리하기 위해 필요한 서버를 제공하기 위한 개발을 하는 직군입니다.머신러닝 처리를 하는 개발자나, 빅데이터를 처리하는 개발자 또는 영상 처리를 위한 서버나 미디어 서비스를 위한 음원 처리 서버등 서버 개발자는 다양한 분야에서 일하게 됩니다.주로 사용자와 접점이 없고 네트워크 상에서 데이터를 받아서 처리 해주는 부분을 개발합니다.어떤 언어를 쓰던지 상관 없지만 보통은 백엔드개발에서 쓰는 언어와 동일한 언어를 사용합니다.마지막으로 인프라 개발자 입니다.- 인프라 개발자인프라 개발자의 경우에는 최근에서야 개발에 대한 중요성이 높아지는 직군 입니다.Cloud 시스템이 도입되기 전에는 IDC(Internet Data Center)라는 곳에 서버를 들여다 놓고 관리를 해야 했기 때문에 개발자 보다는 엔지니어에 가까웠습니다.하지만 Cloud의 강력한 서버 큐레이팅 덕분에 서버들을 구성하고 유지보수 하는데 들어가는 비용이 굉장히 많이 축소 되면서 역할이 줄어들게 되었습니다.때문에, Cloud 서비스를 쓰면서 새롭게 CI/CD 개념을 사용해서 쉽게 통합하고 배포할 수 있도록 서버의 구조를 어떻게 가져가야 하는가에 대한 고민이 더해져서 개발이 필요하게 되었습니다.사용하는 언어도 서버 개발자의 영역을 점점 더 가져가고 있습니다.간략하게 적긴 했는데 어떻게 도움이 되셨을지 모르겠네요.2019년 6월 현재 기준입니다.혹시 틀린 부분이 있다면 kkokey@gmail.com로 메일 주시면 바로 적용하도록 하겠습니다.아직 댓글 등록 기능을 붙이지 않았어요.. 하핫;;;어서 붙이고 댓글을 통해 소통 할 수 있도록 하겠습니다!다음에 또 만나요!! 😁😁]]></content>
      <categories>
        
          <category> development </category>
        
      </categories>
      <tags>
        
          <tag> software_Engineer </tag>
        
          <tag> developer </tag>
        
          <tag> development </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰]게임으로 익히는 코딩 알고리즘]]></title>
      <url>/review/2019/06/10/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-%EA%B2%8C%EC%9E%84%EC%9C%BC%EB%A1%9C-%EC%9D%B5%ED%9E%88%EB%8A%94-%EC%BD%94%EB%94%A9-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다.😗너무너무 오랜만에 글을 쓰네요. 4월에 글을 쓰고 난 후 처음이니 40일 이상 걸렸네요.그동안 러닝 커브에 관한 글을 하나 쓰는 데 너무 오래 걸려 지금껏 블로그 관리가 소홀해졌네요.앞으로 블로그에 학습과 관련한 내용을 좀 더 다룰 예정이니 관심 있게 봐주시면 감사하겠습니다.오늘은 게임으로 익히는 코딩 알고리즘이란 책 리뷰 포스팅입니다.여러분은 알고리즘 공부를 위해 어떤 방법을 쓰시나요?코딩 알고리즘 학습 사이트에서 연습하거나 어려운 알고리즘 책을 읽으면서 공부하시나요?저도 알고리즘 문제가 빽빽하게 나열된 보곤 했었는데요.이 책을 알고 나서부터 그럴 필요가 전혀 없겠다는 생각이 듭니다.물론 코딩게임이라는 사이트를 알았다면 독학하는 것도 더 쉽게 할 수 있지 않았을까 하는 생각도 드네요.코딩게임 서는 게임을 하는 것처럼 코딩 알고리즘을 공부할 수 있습니다.제가 이 코딩게임 사이트가 정말 좋다고 생각했던 이유가 어려운 알고리즘을 배우는데 게임만큼 좋은 방법이 없다는 생각 때문입니다.꽤 오래전에 저도 비슷한 생각을 하면서 알고리즘을 배울 때 게임 알고리즘을 적용하면 어떨까 생각을 하기도 했는데, 그걸 그대로 옮겨놓은 듯한 느낌이었습니다. 그래서 사실 굳이 책이 없어도 게임을 즐겨 하던 사람이라면 코딩게임 사이트에 금방 익숙해지실 거라 생각합니다.하지만 사이트의 모든 내용이 영어로 되어 있고, 난 기초에 기초도 전혀 모르겠다 하시는 분은 이 책 게임으로 익히는 코딩 알고리즘을 사서 보시면 많은 도움이 되실꺼라 생각합니다.왜냐하면 이 책은 단순히 알고리즘만 가르쳐주는 것이 아니라, 디테일하게 사이트에 어떻게 접속하고 각 난이도마다 어떤 알고리즘을 써야 하는지 쉽게 한국어로 안내를 해주는 책이니까요!더불어 알고리즘뿐 아니라 IT에서 흔하게 쓰이는 유머같은 것도 설명을 해주고 있어 단순히 알고리즘만 배우는 딱딱한 서적들보다는 말랑말랑 한 느낌입니다.전문적으로 코딩을 하고 알고리즘을 익혀야 하는 분들에게는 어떨지 모르겠지만, 기존의 서적들이 너무 어려워서 배우기 힘들다 하시는 분들에게는 최고의 대용품이 되지 않을까 싶습니다.책의 마지막 부분에는 현직 대표님이나 먼저 공부하고 취업에 성공한 선배님들의 인터뷰 내용도 실려 있어 알고리즘 테스트 외에도 면접을 준비하는 데 도움을 받을 수 있는 내용 또한 충실하게 포함되어 있습니다.저 역시도 취업에 대해 준비하던 시절이 있었는데, 그때 이런 책이 있었다면 얼마나 좋았을까 하는 생각이 들 정도네요!생생한 현장경험에 대한 내용은 어디서 쉽게 얻을 수 없는 내용이기에 더 귀중한 내용이란 생각입니다~!혹시 나는 중급자 레벨인데 겉으로 보기에 이 책이 너무 초급자 내용만 포함하고 있는 게 아닐까? 한다면 섭섭한 생각입니다!현직 개발자인 저도 쉽게 접근하기 어려운 문제들을 어떤 알고리즘을 써야 풀 수 있는지 차근차근 설명해주는 데 문제에 따라 어떤 알고리즘을 써야 하는가에 대해 쉽게 이해할 수 있게 설명이 되어 있어 책 내용을 이해하면서 따라 하다 보면 어느새 고급에 와있는 자신을 보시게 될 거란 생각이 강하게 듭니다.특히 게임을 만들기를 원하는 취업준비생의 경우 실제 게임에 적용해볼 수 있는 수학적 내용도 함께 다루고 있으니 최적인 것 같네요.조금 아쉽다면 알고리즘이라는 분야를 초보자도 이해할 수 있을 정도로 쉽게 설명하기 위해 문제 하나 하나당 장수가 상당히 많은 분량을 차지하는 것 같아 많은 문제를 풀어보고 싶은 분에게는 조금 부족할 수 있겠다는 생각이 듭니다.그래도 이 책을 통해 충분히 연습한 후 코딩게임에서 좀 더 연습한다면 훌륭한 알고리즘 풀이 능력을 기를 수 있을 거라 생각합니다.이 책 [게임으로 익히는 코딩 알고리즘]은 링크를 통해 구매가능합니다!지금까지 제 경험으로 봐서 코딩은 꾸준하게 하는 것 말고는 방법이 없는 것 같습니다.꾸준한 노력을 통해 취업뽀개기에 성공하시길 빌겠습니다!모두 화이팅하세요!]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> algorithm </tag>
        
          <tag> book </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰]알고리즘이 욕망하는 것들]]></title>
      <url>/review/2019/04/21/algorithm-want-to-it/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다.😗오늘은 한빛미디어의 나는 리뷰어다 이벤트로 받은 책 알고리즘이 욕망하는 것들에 대해 리뷰를 하려고 합니다.이미 리뷰일은 한참 지나버려서 담당자분에게는 죄송하네요.그래도 어쨌든! 약속은 지켜야 하니, 리뷰 시작하겠습니다.[도서리뷰] 알고리즘이 욕망하는 것들여러분은 ‘알고리즘’이라고 하면 떠오르는 것이 무엇인가요? 저는 컴퓨터 전공이고 관련 업계에서 일을 오래 해서 그런지 컴퓨터를 구성하는 요소 중 한가지의 의미가 강하게 떠오릅니다.이 책에서는 ‘알고리즘’이라는 것이 그렇게 단순하게 생각할 수 있는 것은 아니라고 얘기하고 있습니다.일례로 들어준 것을 보면 주식시장, 작곡, 운전, 뉴스 기사 작성, 수학 명제 증명으로 실제 사람이 하기에도 쉬이 되지 않는 일들입니다.이 모든 것들이 가능한 것에 있어 핵심으로 얘기하는 것은 바로 알고리즘이 무조건 의도한 대로 작동한다는 점이라고 얘기합니다.알고리즘은 사용자가 설계하여 만들어집니다. 많은 기업이 복잡계의 현실에서의 문제를 정의하고 그것을 해결하기 위한 용도로 알고리즘을 개발합니다.그리고 만들어낸 알고리즘을 ‘실행’ 함으로써 기계적 계산과 현실 문화 사이의 간극 속에서 존재한다. 더불어 알고리즘이 기계적 계산에서 끝나지 않고, 현실에 녹아드는 현상을 현실의 문화 현상으로 만들어 냅니다.이러한 문화 현상은 결국 사람과 다르지 않은 유기체처럼 존재하게 해주며, 결국 알고리즘이 처음 만들어질 때 포함된 의도로 인해 현실 세계에서 사람의 행동까지 강제할 수 있는 힘을 가지게 됩니다. 마치 우리가 원하는 정보를 얻기 위해 구글에서 좀 더 잘 검색이 되도록 검색할 문장을 변경하거나, 게임의 정해진 알고리즘의 흐름과 목적에 따라 그에 맞춰 게임을 플레이하는 것들이 가장 흔한 예입니다.세계적인 기업의 큰 성공의 이면에는 철저하게 계산된 알고리즘이 존재하며, 동시에 그 알고리즘을 통해 현실과 기계적 간극사이에서 인터페이스 계층의 역할을 수행하게 한다. 현실과 기계 사이를 유기적으로 연결하면서 사람들에게 편의성을 제공하는 것이 기업의 큰 성공으로 이어졌다는게 책의 설명입니다.알고리즘은 사람이 만든 것이고 만든 사람에 따라 의도가 담기게 됩니다. 그 의도에 따라 동작하게 될 것입니다. 결국엔 의도에 따라 행동을 해야 하고 그러한 문화가 기계적인 계산과 합쳐지면 사람은 더 이상 자신의 뜻대로 행동한다기 보다는 계산된 알고리즘에 의해 움직여진다라고 하는 것이 맞는 세상이 오게 될지도 모르겠습니다.알고리즘에 의해 움직이는 삶을 살고 있는 지금 우리가 알고리즘을 잘 이해하는 것이 삶의 지혜를 터득하는 길이 아닌가 라는 생각도 드네요.컴퓨터라는 틀에 갇혀서 항상 계산이라는 개념만 가지고 있었던 저에게는 컴퓨터가 만들어지기 이전의 개념부터 설명한 점이 신선하게 다가왔습니다.알고리즘이라는 단어의 기원부터 현재의 상황 그리고 알고리즘이 그려가는 미래까지 생각해보고 싶으신 분에게는 이 책[링크] “알고리즘이 욕망하는 것들”을 추천해 드립니다.]]></content>
      <categories>
        
          <category> review </category>
        
      </categories>
      <tags>
        
          <tag> algorithm </tag>
        
          <tag> book </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Swift로 API 호출 함수 테스트 하기]]></title>
      <url>/tutorial/2019/04/04/Swift-start/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다.😗오랜만의 포스팅이네요.회사일에 놀러가는 것 까지 겹치니 블로그를 전혀 신경 못쓰고 다시 버려두고 있네요.올해는 블로그를 다시 버리지 않기로 작정했기 때문에 여러가지 내용들을 포스팅 하려고 합니다!그중에 요즘은 ios 개발을 시작하게 되어 그와 관련된 내용을 적어보고자 합니다.같이 공부해요~!! 😆먼저 개발환경은 이렇습니다.  OS: MacOS Mojave v10.14.4  Tool: xCode, AppCode  Version: Swift 5최근에 나온 Swift 5를 사용해서 작업을 해보고 있어요.먼저 기본적인 세팅을 해야 하는데 이 부분은 다음에 다시 다루기로 하고 오늘은 코드 조각을 가지고 얘기를 해보려고 합니다.일단 호출할 API URL은 http://date.jsontest.com/?service=ip 입니다.간단하게 내 IP값을 JSON 형태로 반환시켜주는 URL 입니다.위 URL을 복사해서 curl로 요청해보면 아래와 같은 리턴 값을 줍니다.$ curl -i http://date.jsontest.com/?service=ipHTTP/1.1 200 OKAccess-Control-Allow-Origin: *Content-Type: application/jsonX-Cloud-Trace-Context: 0215469bca9a9b0db2fe0c0ec0155ad5Date: Tue, 09 Apr 2019 14:53:28 GMTServer: Google FrontendContent-Length: 26{"ip": "211.177.225.234"}바로 위에 ip값이 json 데이터 형태로 리턴된게 보이시나요?ㅎ그럼 본격적으로 Swift에서 호출하는 코드조각을 볼까요?func getMyIP(compilationHandler: @escaping (UserInfo) -&gt; Void) {        guard let url:URL = URL(string: "http://date.jsontest.com/?service=ip") else {            return        }        var urlReq:URLRequest = URLRequest.init(url: url)                urlReq.httpMethod = "GET"        urlReq.allHTTPHeaderFields = ["Content-Type":"application/json"]                let IPTask = URLSession.shared.dataTask(with: urlReq) { (data, res, err) in            if let data = data {                let jsonData = try? JSONDecoder().decode(UserInfo.self, from: data)                guard let rsData = jsonData else {                    return                }                compilationHandler(rsData)            }        }                IPTask.resume()    }위와 같은 형태의 코드로 API를 호출 합니다. 대략적으로 코드가 읽히시나요?guard를 사용해서 scope를 지정해주고 URLRequest를 사용해서 method type 세팅과 header 값을 지정해 줍니다.그 이후에는 url을 호출하기 위해 URLSession이란 것을 사용해 Task로 만들어 data 값을 받았을 때 JSONDecoder()를 사용해 UserInfo라는 모델에 데이터를 바인딩합니다.에러는 JSONDecoder()의 바로 아래 guard에서 다시 잡아줍니다.실제로 실행은 제일 하단의 IPTask가 가진 메소드 resume()를 실행하면서 내부 프로세스로 실행 됩니다.아래는 구조체로 사용한 UserInfo입니다.import Foundationpublic struct UserInfo: Codable {    public let ip: String}위 코드가 제대로 실행이 되었다면 UserInfo.ip에 사용자의 IP가 들어가게 됩니다.코드만 가지고 간단하게 설명하려고 하니 꽤 많은 부분이 생략 되었습니다.어려운 부분은 아니나 Swift를 잘 모르시는 분이라면 하나하나 메소드나 사용된 클래스들의 의미를 곱씹으면서 보시다 보면 분명 API를 호출하는 것을 만드는데 무리 없이 하실 수 있으실 겁니다!P.S 아래 코드는 info.plist에 추가된 코드 입니다. 이 부분이 없으면 https가 아닌 url은 실행되지 않는다고 하네요~ 참고하시고 즐거운 코딩라이프 되세요!&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;	&lt;dict&gt;		&lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;		&lt;true/&gt;	&lt;/dict&gt;오늘은 여기까지 입니다!도움이 되었길 바라며 저는 이만 뿅!]]></content>
      <categories>
        
          <category> tutorial </category>
        
      </categories>
      <tags>
        
          <tag> swift </tag>
        
          <tag> ios </tag>
        
          <tag> TIL </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[`ssh-agent`와 `ssh-add`를 사용해서 RSA PRIVATE KEY 등록하기]]></title>
      <url>/tutorial/2019/03/29/ssh-add/</url>
      <content type="text"><![CDATA[안녕하세요, 괴짜 개발자 namedboy 입니다.오늘은 ssh-agent와 ssh-add를 사용하여 RSA PRIVATE KEY를 등록하여 비밀번호 없이 ssh를 사용해서 로그인 하도록 하는 방법에 대해 정리하려고 합니다.모두들 git 잘 쓰고 계시죠? 만약에 안쓰시고 계시면.. 어서 계정을 만드시고 repository를 하나 만드신 다음에 사용해보세요.개발자에게는 천국과도 같은 곳입니다. 후훗.보통 git을 사용하실 때 git clone을 사용할 때 https://...를 사용하시나요 git@...형태를 사용하시나요?저는 절대적으로 후자를 사용합니다. 애초에 제 계정을 통해 접속하면 문제가 생길 요지도 있고, 무엇보다 commit에 Verified 뱃지를 달 수 있습니다! 뭐 그것 외에도 보안 이슈 때문에 사용합니다만, 기본적으로 불편하죠 매번 계정과 비밀번호를 입력해야 하는 https://...그래서 ssh-agent 명령어와 ssh-add 명령어를 사용해서 등록을 해놓고 사용합니다.보통은 ssh-agent와 ssh-add를 사용할 일은 없지만 키를 여러개 사용하시는 경우에는 필요하죠.간단하게 명령어를 정리해보면 이렇습니다.  아래 명령어로 agent daemon을 실행시켜줍니다.    $ eval `ssh-agent`        #ResultAgent pid 31289        아래 명령어로 RSA PRIVATE KEY를 등록해줍니다.    $ ssh-add ~/.ssh/id_rsa      2번에서는 보다시피 실제 등록할 id_rsa 키의 경로를 넣어주면 됩니다.그럼 아래처럼 비밀번호를 물어보는 화면이 나옵니다.Enter passphrase for /root/.ssh/id_rsa_hexo:  비밀번호를 제대로 입력해주면?! 아래와 같은 메시지가 뜨면서 등록이 됩니다.    Identity added: /root/.ssh/id_rsa_hexo (/root/.ssh/id_rsa_hexo)        그 다음은 그냥 RSA Key를 사용하는 서비스를 사용하시면 됩니다!저는 이렇게 사용하는 서비스가 바로 github입니다.가끔 RSA 키를 번갈아 가면서 사용해야 하는 경우가 생기거든요.그렇게 alias를 bash에 등록해놓고 사용하고 있습니다.쓰다보니 보시면서 모르는 내용이 있으실 수도 있겠다는 생각이 드네요.추가로 alias 등록하는법 bash 기본 설정법 등을 나중에 또 포스팅 하겠습니다!그럼 더 좋은 글로 나중에 다시 찾아오겠습니다!안녕~~ 뿅!출처는 이렇습니다! :)  https://docs.oracle.com/cd/E19683-01/806-4078/6jd6cjru9/index.html]]></content>
      <categories>
        
          <category> tutorial </category>
        
      </categories>
      <tags>
        
          <tag> shell </tag>
        
          <tag> command </tag>
        
          <tag> ssh </tag>
        
          <tag> git </tag>
        
          <tag> tutorial </tag>
        
          <tag> ssh-add </tag>
        
          <tag> ssh-agent </tag>
        
          <tag> RSA </tag>
        
          <tag> PRIVATE </tag>
        
          <tag> KEY </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 나도 영어 잘하면 소원이 없겠네]]></title>
      <url>/books/2019/03/25/%EC%84%9C%ED%8F%89-%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-%EB%82%98%EB%8F%84-%EC%98%81%EC%96%B4-%EC%9E%98%ED%95%98%EB%A9%B4-%EC%86%8C%EC%9B%90%EC%9D%B4-%EC%97%86%EA%B2%A0%EB%84%A4/</url>
      <content type="text"><![CDATA[여러분은 영어공부 어떻게 하시나요? 저는 영어공부 하면 실제 생활하면서 배우는게 제일 빠르다고 생각해요!그래서 유학을 가는게 제일 빠른 길이긴 한데, 현실적으로 돈이 많이 들어가니 쉽지가 않죠.. 그래서 저도 한국에서 영어 공부를 하고 있답니다. 최근에는 유튜브에 영어 자막과 한글 자막이 아주 잘 지원을 해줘서 그나마 손쉽게 공부를 하고 있네요.열심히 공부 하는 것은 좋은데 공부를 하다 보면 이게 과연 자주 쓰는 용어일까?실제로 사용할 때는 어떻게 해야 하는걸까? 이런 고민들을 하게 되는데, 이번에 한빛미디어에서 책 “나도 영어 잘하면 소원이 없겠네”를 보니 이런 고민을 한방에 해결해주네요!책 상단에 소원풀이 시리즈라고 적혀 있고, 한빛미디어 홈페이지에서도 관련 이벤트를 하고 있으니 관심 있으신 분들은 한번 찾아가 보시면 좋을 것 같네요.그럼 이제 본격적으로 책 얘기를 해볼까요?이 책은 총 40일 8주 과정의 단어집이에요.표지에도 나와 있듯이 인기 미드 100종(1만개 에치소드)를 분석해서 제일 많이 사용된 2000개 영단어와 예문을 실었지요.그래서 그런가 아는 단어들도 꽤 많이 보였습니다. I, my, me, mine 이런거요!다들 초등학교 때 한번씩 외우셨었죠? 전 그 덕분에 이거 하나는 아주 잘 기억하네요.책을 읽다보면 난이도도 어려워지고 한번에 외워지지 않는 단어들도 나오는데 그 때는 WEEK의 첫 번째 페이지 오른쪽 상단에 위치한 QR코드를 찍으면 한빛미디어에서 제공하는 MP3를 들을 수 있는 페이지로 갈 수 있어서 네이티브로 들으면서 단어를 외울 수 있어 도움이 많이 된답니다.더구나 예문도 함께 녹음되어 있어 말하기 연습도 동시에 할 수 있지요! 😄그 외에도 알아두면 좋은 감탄사나 INDEX 페이지 그리고 역시 한빛미디어에서 제공하는 스마트 인덱스를 볼 수 있어영어 공부하는데 여러모로 도움을 줄 수 있도록 많이 신경 쓴 티가 나는 것 같습니다!영어 공부하는게 쉽지 않고 너무 어려운 것만 하다가 지친 분들께 좋은 초중급용 단어장으로 좋을 것 같네요.[나도 영어 잘하면 소원이 없겠네]는 [링크]에서 구매할 수 있습니다.벌써 4분의 1이 지나간 올 한해 남은 기간에라도 이 책고 함께 영어 공부에 다시 도전해보는 건 어떨까요??2019년에 다같이 영어 잘해보자구요!]]></content>
      <categories>
        
          <category> books </category>
        
      </categories>
      <tags>
        
          <tag> review </tag>
        
          <tag> 도서리뷰 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/03/24(일)]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/03/25/daily-log-%EC%9D%BC/</url>
      <content type="text"><![CDATA[2019/03/24 (일) 라이프로그 입니다.안녕하세요, 너무 오랜만에 포스팅이라 슬프네요.여러가지 일들로 바쁘게 지내서 DailyLog를 계속 작성하지 못했네요.그래도 Blog의 테마 변경 작업과 좀 더 편하게 포스팅 하기 위한 장치를 마련하였답니다!이제 원격으로도 포스팅이 가능하고, github의 markdown을 제대로 지원하게 되었네요! 짝짝짝!!좀 더 힘내서 도메인도 달고 해야겠습니다!  운동          주말은 쉬었습니다!      지난 목요일과 금요일은 20층 계단오르기 완료!        영어 공부          오늘의 단어 입니다.        weird (형용사, ADJECTIVE)                  Suggesting something supernatural; unearthly.          이상한 어떤 것을 생각나게 하다; 비현실적인                    예문입니다.                  They’ve been acting really weird lately.          그들은 최근에 정말 이상하게 행동하고 있어요.                          독서 로그“나도 영어잘하면 소원이 없겠네”라는 책을 리뷰를 하기 위해 읽었습니다.    추가로 책 내용을 작성해야 하는 책도 있지만.. 일단은 이 책의 리뷰가 급하기 때문에!먼저 읽었네요!    요즘 책을 사는게 늘어서 더 빨리 읽어야 하는데 읽는 속도는 나지 않아 걱정이네요.    그래도 올해는 절대 포기 하지 않을껍니다!    이 블로그를 하는 것처럼 말이죠!  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> weird </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/03/20(수)]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/03/21/Daily-LifeLog-2019-03-20-%EC%88%98/</url>
      <content type="text"><![CDATA[2019/03/20 (수) 라이프로그 입니다.  운동오늘도 20층 걷기 성공!!      영어 공부    오늘의 단어입니다.          gotta(축약어, CONTRACTION)        -&gt; Have got a      Have got a 의 줄임말이라고 합니다~!      evaluate(동사, VERB)        -&gt; Form an idea of the amount, number, or value of; assess      가치, 수, 양에 대한 아이디어를 평가하는 것        예문입니다.          -&gt; I gotta go to work, but you wanna get some dinner later?      나는 일하러 가야 해, 나중에 저녁 먹을래?      -&gt; the study will assist in evaluating the impact of recent changes      이 연구는 최근 변경사항의 영향 평가에 대해 도움이 될 것입니다.        이상입니다.        독서 로그    스탠퍼드식 최고의 피로회복법을 계속 읽고 있습니다.    지금 속도라면 내일 다 읽을 수 있을 것 같네요.    좀 더 힘내 보겠습니다!  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> gotta </tag>
        
          <tag> evaluate </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/03/19(화)]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/03/20/Daily-LifeLog-2019-03-19-%ED%99%94/</url>
      <content type="text"><![CDATA[2019/03/19 라이프로그 입니다.      운동    화요일 이네요.어제는 여행을 다녀온 여독으로 뻗었습니다.ㅠ역시 여행 다녀온 후에는 하루는 쉬어야 하나 봅니다.그래도 20층 걷기는 어제도 잘 했답니다!오늘도 20층 걷기 완료!        영어 공부    오늘의 단어입니다.          vision(명사, NOUN)        -&gt; The faculty or state of being able to see.      볼 수 있는 능력이나 상태.      genteel(형용사, ADJECTIVE)        -&gt; Characterized by exaggerated or affected politeness, refinement, or respectability      과장되거나 만들어진 정중함, 세련, 또는 존경할 만함        예문입니다.          -&gt; she had defective vision      그녀는 시력이 좋지 않았다      -&gt; Her genteel upbringing      그녀의 고상한 가정교육        이상입니다.        독서 로그    스탠퍼드식 최고의 피로회복법을 계속 읽고 있습니다.    오늘 정리한 내용입니다.  스탠퍼드식 최고의 피로 회복법  키가 큰 사람이 되자.-&gt;실제 키보다 더 커 보이는 사람이 되라는 말.  등이 굽지 않았다.  허리르 뒤로 젖히고 있지 않는다.  몸을 움츠리고 있지 않는다.7시간 푹 잤는데 왜 피로가 풀리지 않는가?→ 부족한 잠을 몰아서 잔다고 해도 피로를 해소할 수 없다.→ 오히려 가만히 있으면 피로가 더 쌓인다.신체가 비대칭이기 때문이다.우리 몸의 좌우 밸런스는 모두 다르기 때문에 오래동안 방치하면 몸의 전체 균형이 무너져내린다.즉, 조치를 취하지 않으면 누구나 피로에 약한 몸이 된다.움직이지 않는 하루가 피로를 부추긴다안데르스 한센: 뇌는 본래 몸을 움직이게끔 만들어졌으며 이러한 뇌의 구조는 원시시대와 크게 달라지지 않았다.→ 사람은 본래 끊임없이 움직이도록 설계되었다.몸이 너무 피곤해 아무것도 하기 싫은 날일수록 20~30분 정도의 달리기나 수영같은 가벼운 유산소 운동을 해야 뇌를 자극해 피로 해소에 도움을 준다.혈액순환을 촉진시켜 뇌와 근육에 산소를 공급하고 피로 물질이 쌓이는 것을 막는다.피로를 풀기 위해서는 가볍게 움직여 주는 것이 좋다.2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> vision </tag>
        
          <tag> genteel </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/03/14(목)]]></title>
      <url>/2019/03/15/Daily-LifeLog-2019-03-14-%EB%AA%A9/</url>
      <content type="text"><![CDATA[2019/03/14 라이프로그 입니다.      운동20층 걷기 완료했습니다!회사 워크샵에서 술을 먹고 오후를 완전히 쉬었는데도 몸에 무리가 가나 보네요.체력이 떨어져 힘들었습니다. :(              영어 공부        오늘의 단어입니다.        paltry (형용사, ADJECTIVE)        -&gt; (of an amount) very small or meagre      양적으로 아주 적거나 빈약한  umbrage (명사, NOUN)  -&gt; Offence or annoyance.      공격 또는 짜증      예문입니다.        -&gt; Players should not have to sell their marketing rights for paltry sums.      플레이어들은 적은 금액으로 그들의 마케팅 권리를 팔지 않아야 합니다.  -&gt; she took umbrage at his remarks      그녀는 그의 비평에 불만을 표했다.  오늘은 여기까지 입니다! 😎            독서 로그  스탠퍼드식 최고의 피로회복법이란 책을 읽고 있습니다.  정리한 내용 아래에 적겠습니다 :)        스탠퍼드식 최고의 피로회복법    MINDSET : 목표를 설정하고 검증받은 지식을 수집한 다음, 목표를 달성하기 위해 지혜를 짜낸다HARD WORK : 최선을 다해 훈련과 경기에 임한다.RECOVERY : 회복을 위한 시간을 갖는다.피로란 신경과 몸의 연계가 무너져 생기는 현상피로를 관리하는데 중요한 요소들→ 근육, 관절, 뇌, 호흡, 영양피로는 젖산이 아니다.자율신경과 중추신경자율신경은 의식하지 않고 자연스럽게 이루어지는 맥박, 호흡, 소화같은 활동을 담당낮에는 교감신경이, 밤에는 부교감신경이 우위를 차지해야 한다.중추신경은 신체의 각 부분에 명령을 내리는 사령탑역할을 담당몸을 움직인다는 것은 뇌와 척수에 있는 중추신경과 신체 각 부위에 위치한 말초신경이 함께 이룬 팀플레이의 결과다.몸의 균형이 틀어지면 중추신경과 말초신경 사이의 소통에 차질이 생겨 몸이 뜻대로 움직이지 않게 된다.  이때 ‘어쩐지 몸이 무겁다’ ‘나른하다’ 같은 감각이 뇌로 전해진다.자세가 틀어진 몸은 뇌가 틀어진 몸을 보안하기 위해 무리한 공작을 반복하게 하여 조금만 움직여도 몸에 불필요한 부담이 가해진다.그렇기 때문에 피로에 약한몸은 자세가 틀어진 몸인 것이다.신체의 균형을 바로잡아 중추신경이 제대로 기능하도록 하면 피로에 강인한 몸을 만들 수 있는 것이다.피로는 개인마다 다양한 형태로 나타나기 때문에 내가 느끼는 피로의 신호를 제대로 파악하여 만만하게 보지 않고 집중해서 관리해야 한다.몸의 피로를 파악하는 네가지 포인트맥박이 평소와 다르다.수면시간이 불규칙하다.허리가 아프다.가슴만으로 호흡한다.  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> paltry </tag>
        
          <tag> umbrage </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/03/11]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/03/12/Daily-LifeLog-2019-03-11/</url>
      <content type="text"><![CDATA[2019년 3월 11일 라이프로그 입니다.      운동    11일에도 20층 계단 오르기 완료 했습니다!        영어 공부    오늘의 단어입니다.          rarely (부사, ADVERB)        -&gt; Not often; seldom.      가끔, 드물게      pros and cons(숙어, PHRASE)        -&gt; strength and weakness      장점과 단점        예문입니다.          -&gt; I rarely drive above 50 mph      나는 50 mph로 운전한적이 거의 없다.      -&gt; Here are some more of the pros and cons of technology to think about and discuss.      여기 기술에 대한 몇가지 장점과 단점에 대해 생각하고 논의 해보자.        이상입니다.        독서 로그    프로그래머를 위한 기초 해석학을 다시 초반부 부터 읽고 있습니다.약간 설렁설렁 읽었더니 뒷부분에서 전혀 이해가 가지 않는 초유의 사태가….그래서 제대로 이해하면서 다시 읽고 있습니다!    이건 정리하면서 읽어야 할것 같네요.조만간 정리하는 내용을 포스팅 하겠습니다!    어제는 그냥 뻗어버리는 바람에 지금 이 글은 11일이 아닌 12일에 쓰고 있네요.오늘과 내일에 걸쳐서 회사에서 워크샵을 갑니다!가능하면 쓰겠지만, 쓰지 못할 확률이 높네요  쓰지 못하면 워크샵 다녀와서 작성 하도록 하겠습니다!  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> rarely </tag>
        
          <tag> 'pros </tag>
        
          <tag> and </tag>
        
          <tag> cons' </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/03/10]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/03/11/Daily-LifeLog-2019-03-10/</url>
      <content type="text"><![CDATA[2019년 3월 10일자 라이프로그 입니다.      운동    주말 운동은 쉽니다!        영어 공부    오늘의 단어입니다.          accusing (형용사, ADJECTIVE)        -&gt; (of an expression, gesture, or tone of voice) indicating a belief in someone`s guilt or culpability.      누군가의 죄나 과실(표현의, 행동, 목소리의 어조)에 대해 확고한 믿음을 보이는 것      hoaxes (명사, NOUN)        -&gt; A humorous or malicious deception.      유머러스 또는 악의적인 속임수.        예문입니다.          -&gt; The president has been at war with news outlets, accusing any negative comment about him and his campaign of being “fake news”.      대통령은 그에 관한 부정적 논평과 가짜 뉴스에 대해 비난하며, 뉴스 매체와 전쟁 중이다.      -&gt; Fake news is deliberately published hoaxes      가짜 뉴스는 고의적인 거짓 뉴스입니다.        이상입니다.        독서 로그    오늘도 읽은 책은 없습니다.  충분히 쉬었으니 내일 부터는 또 달려볼께요!  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> accusing </tag>
        
          <tag> hoaxes </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/03/09]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/03/10/Daily-LifeLog-2019-03-09/</url>
      <content type="text"><![CDATA[2019년 3월 9일자 라이프로그 입니다.      운동    주말 운동은 쉽니다!  대신 여행에서 엄청나게 걸었는데 증명할 방법이 없네요.        영어 공부    오늘의 단어입니다.          competent(형용사, ADJECTIVE)      -&gt; Having the necessary ability, knowledge, or skill to do something successfully.      어떤 것을 성공적으로 하기 위한 필수적인 역량, 지식, 또는 기술을 가지고 있다.      lie(동사, verb)      -&gt; (of a person or animal) be in or assume a horizontal or resting position on a supporting surface.      사람이나 동물이 표면이나 바닥에 수평 또는 편한 자세를 취한다.        예문입니다.          -&gt; Workers experience autonomy within the work organization when they feel competent to act alone.      근로자들은 조직 내에서 단독으로 행동 하는 것이 가능하다고 느낄 때 자율성을 경험합니다.      -&gt; Lily lie on the pillows and watched him.      릴리는 배게 위에 누워서 그를 보았다.        이상입니다.        독서 로그  오늘은 읽은 책은 없습니다.  대신, 글을 하나 썼네요. 나중에 발행되면 링크를 추가하겠습니다.  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> competent </tag>
        
          <tag> lie </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/03/04]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/03/05/Daily-LifeLog-2019-03-04/</url>
      <content type="text"><![CDATA[2019년 3월 4일자 라이프로그 입니다.      운동    다시 평일이네요!오늘도 20층 오르기 완료!        영어 공부    오늘의 단어입니다.          Intentions(명사, noun)        -&gt; A thing intended; an aim or plan.      의도된 것; 목표 또는 계획      express(동사, verb)        -&gt; Convey (a thought or feeling) in words or by gestures and conduct.      단어 또는 몸짓이나 행동으로 (생각이나 느낌) 전하는 것      예문입니다.        -&gt; What is your intention?      당신의 의도는 무엇입니까?      -&gt; He expressed complete satisfaction.      그는 완전한 만족을 표현했다.        이상입니다.        독서 로그  프로그래머를 위한 기초 해석학 책의 서평 작성은 완료 했으나, 제대로 읽으려면 멀었네요..ㅠㅠ  제가 서평에도 적었듯이 필기구와 함께 제대로 이해하면서 넘어가야 제대로 내 것으로 만들 수 있을 것 같네요.  이 책은 주말에 읽는 것으로 하고 평일에는 조금 가벼운 책을 읽어야겠습니다.ㅠ  제가 5일부터 9일까지는 일본으로 여행을 갑니다!다카마쓰라는 곳인데 우동면이라는 지역이름이 있을 정도로 우동으로 그렇게 유명하다고 하네요.혹시 블로그에 글이 올라오지 않으면 뻗어서 아무것도 못하는구나 라고 생각해주시면 감사하겠습니다 ( _ _)그래도 매일 하루 하나씩 블로깅 하는 것을 지키기 위해 노력하겠습니다!2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> Intentions </tag>
        
          <tag> express </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[서평][개발자리뷰]프로그래머를 위한 기초 해석학]]></title>
      <url>/books/2019/03/05/%EC%84%9C%ED%8F%89-%EB%B2%A0%ED%83%80%EB%A6%AC%EB%B7%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EA%B8%B0%EC%B4%88-%ED%95%B4%EC%84%9D%ED%95%99/</url>
      <content type="text"><![CDATA[여러분은 수학에 대해 어떻게 생각하시나요?누군가에게는 너무너무 재미있어서 계속해서 보고 싶은 학문이겠지만, 누군가에게는 숫자만 봐도 머리가 어지러운 그런 학문이겠죠?최근에 개발자에게는 꼭 필요한 학문이 되어가고 있습니다. 머신 러닝, 게임 개발, 통계 처리들만 봐도 그 영역이 적지 않거든요. 거기에 코딩 수업이 초등학교에서 의무화가 되면서 프로그램을 공부하는 사람들이 늘어날 일만 남았네요.코딩을 잘하는 어린아이들이 늘어나면 늘어날수록 우리 직장인들의 입지도 작아지겠죠. 수학 잘하는 어린 친구들이 많아지면 그만큼 수학을 등하시 했던 개발자들은 밀려날 수밖에 없어지니, 공부해야 할 것은 더 많아지네요.그런 우리에게 조금이라도 도움이 되고자 길벗에서 프로그래머를 위한 기초 해석학이란 책을 출간해주셨습니다!!고등학교 수학까지만 배우고 그 이후에 수학의 ㅅ자로 제대로 공부하지 못했던 직장인 프로그래머들에게 좀 더 쉽게 업무에서 필요한 최소한의 수학을 가르쳐주는 책이에요!물론 해석학이 아닌 선형대수학, 확률과 통계학은 다루지 않지만, 해석학을 다루면서 미적분을 바닥부터 제대로 공부할 수 있으니 이것도 어디냐라는 생각이..이 책을 제가 쭉 읽어보면서 장단점을 짚어보겠습니다. 도움이 될 것 같다는 생각이 드는 분들은 과감하게 지르셔서 고등학교 때 못했던 수학 공부를 더 미루지 말고 하시면 될 것 같습니다!일단 장점부터 말씀드리면 고등학교 수학을 마치고 대학교 수학을 배우고자 하는 분들에겐 이만한 책이 흔하지는 않을 것 같네요.수학 용어나 관련 지식이 있는 상태에서 1장부터 차근차근 이해하면서 따라가다 보면 확실히 이해하기가 쉽습니다.다만 고등학교까지의 수학지식이 부족하거나 그때까지의 수학 공부를 게을리했던 분이라면 조금 버거울 수 있을 것 같아요.대신 책 내용을 찬찬히 읽으면서 각 장에 나온 정리나 정의를 손으로 다시 써보면서 제대로 이해하고 넘어가다 보면 그래도 충분히 따라갈 수 있을 거라고 생각이 드는 책입니다.그만큼 쉽게 쓰려고 저자분께서 노력하신 부분도 보입니다.단점이라고 말하기도 모호한 단점은 이 책 서문에도 쓰여있지만 1장부터 시간을 들여서 읽어야 한다는 점이에요.그리고 이건 개인적인 생각이지만, 필기구가 없이 책을 읽기만 하는 것은 내용을 제대로 이해하기가 훨씬 힘들다는 느낌이 들었어요.그러니 이 책으로 공부를 하고자 하시는 분들은 꼭! 제대로 필기구의 도움을 받아서 책에 나온 정리나 정의를 충분한 시간을 들여 이해하고 넘어가시길 바랄게요!대학교 수학이 부족해서 고생하시는 직장인분들, 대학교 학생들 우리 모두 이책으로 열심히 공부해서 수포자가 아닌 수뽀자(수학을 뽀개는 자)가 됩시다!]]></content>
      <categories>
        
          <category> books </category>
        
      </categories>
      <tags>
        
          <tag> review </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/03/03]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/03/04/Daily-LifeLog-2019-03-03/</url>
      <content type="text"><![CDATA[2019년 3월 3일자 라이프로그 입니다.  운동주말 운동은 쉽니다!      영어 공부    오늘의 단어입니다.          improve(동사, verb)        -&gt; Make or become better.      더 좋게 하다 또는 만들다.      suggest(동사, verb)        -&gt; Put forward for consideration.      고려할 것을 내놓다.      예문입니다.        -&gt; I subscribed to two magazines to improve my mind      나는 나의 지성을 향상시키기 위해 두개의 잡지를 구동했다.      -&gt; I always suggest learning how to study.      나는 항상 공부하는 법을 배우라고 제안합니다.        이상입니다.  이전에 썼던 글들을 보니 형태가 제각각이네요.  앞으로는 좀 일정한 형태를 유지하려고 합니다.  그래야 보는 분도 편할테니 말이죠! :)        독서 로그  프로그래머를 위한 기초 해석학을 읽는 중입니다.  지금은 함수의 기본 특성 부분을 읽고 있지만,  서평을 위해 빠르게 읽은 후 서평을 먼저 작성하고 나서 계속 읽어야 겠습니다. :)  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> improve </tag>
        
          <tag> suggest </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/03/02]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/03/03/Daily-LifeLog-2019-03-02/</url>
      <content type="text"><![CDATA[2019년 3월 2일자 라이프로그 입니다.      운동    오늘은 휴일이니까!운동은 쉴께요!        영어 공부          오늘의 단어입니다.      metacognition (명사, noun)        → Awareness and understanding of one`s own thought processes.      자신의 생각을 어느정도 이해하고 있는 것인지 알고 있는 것.      intention (명사, noun)        → a thing intended; an aim or plan.      의도된 것; 목표 또는 계획.        예문입니다.  I think he is want to work with anyone because he has good metacognition.  → 나는 그가 훌륭한 메타인지 능력을 가지고 있기 때문에 누구와도 일하고 싶은 사람이라고 생각합니다.    This comment doesn`t have intention.  The method or function name should have intention then that code has more readability and easy to understand.  → 이 주석에는 의도가 없습니다.  메소드나 함수 이름은 가독성이 뛰어나고 이해하기 쉽도록 의도되어야 합니다.    오늘은 이상한모임의 컨퍼런스 99콘에 다녀왔습니다.  거기서 말씀해주신 것들중 메타인지와 의도적인 연습에 대한 내용이 나와서 관련해서 영어 단어를 찾아보았습니다.    아래는 pick, select, choose의 예문입니다.    He picked a snack that looked better delicious.  → 그는 더 맛있게 보이는 스낵을 골랐다.    I respect his select.  → 나는 그의 선택을 존중한다.    You should choose it because getting lucky for your life.  → 당신의 인생에 운이 좋아지기 때문에 그것을 선택해야 합니다.    오늘은 어제 못적었던 내용까지 같이 적으려고 하니 양이 많군요!    그래도 약속은 약속이니 추가로 예문을 더 작성해보았습니다.  pick, select, choose는 굉장히 많은 의미를 가지고 있다보니 일상생활에서 자주 사용할 수 있는 표현이 많은 것 같네요.        독서 로그    프로그래머를 위한 기초 해석학을 읽는 중입니다.    조만간 리뷰를 써야 하기에 오늘은 밤을 새서라도 꾸역꾸역 끝까지 읽어야겠네요.  수학의 기초 개념의 주요 정리 요약을 여기에 적어봅니다.    정리.1) 유리수의 조밀성  임의의 다른 두 유리수 a &gt; b에 대해 a &gt; c &gt; b를 만족하는 유리수 c가 무수히 존재합니다.    정의.1) 데데킨트 절단  A ∪ B = R, A ∩ B = ø  a ∈ A, b ∈ B ⇒ a &lt; b  이때 집합 조합 (A, B)를 실수의 하나의 절단이라고 부릅니다.    정리.2) 실수의 완비성  실수의 임의의 절단 (A, B)에 대해 다음 중 하나가 성립합니다.  A에 최댓값이 존재하면 B에 최솟값이 존재하지 않습니다.  B에 최솟값이 존재하면 A에 최댓값이 존재하지 않습니다.    정리.3) 상한 하한의 존재    정의.2) 가산무한집합    정리.4) 자연수, 정수, 유리수의 농도    정리.5) 실수의 농도    정의.3) 수열의 극한    정리.6) 실수의 무한소수 전개    정리.7) 아르키메데스 원리    정리.8) 두 개의 실수 간에 존재하는 유리수    내용은 계속 채우도록 하겠습니다.  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> metacognition </tag>
        
          <tag> intention </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/03/01]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/03/02/Daily-LifeLog-2019-03-01/</url>
      <content type="text"><![CDATA[2019년 3월 1일자 라이프로그 입니다.  운동오늘은 휴일이니까!운동은 쉴께요!  영어 공부오늘의 단어입니다.여러분 혹시 pick me up. 이라는 가사를 기억하시나요?오늘은 이 가사에 나오는 pick 이라는 단어와 미슷한 의미를 가진 choose, select에 대해 알아보겠습니다.pick (명사)	→ an act or the right of selecting something from among a group of alternatives.	: 대체제의 그룹중에서 어떤것을 선택할 수 있는 행위 또는 권리.pick (동사)	→ take hold of and remove (a flower, fruit, or vegetable) from where it is growing.	: 그것이 자라는 곳에서 제거하거나 붙들고 있는 것.	→ Detach and remove (a flower, fruit, or vegetable) from where it is growing.	: 그것이 자라는 곳에서 떼어내거나 제거하는 것.choose (동사)	→ pick out or select (someone or something) as being the best or most appropriate of two or more alternatives.	: 두개 또는 그 이상의 선택지에서 가장 적합한 것으로 골라내거나 선택하는 것select (동사)	→ carefully choose as being the best or most suitable.	: 최선이거나 적합한 것으로 신중하게 선택하는 것음.. 3개의 단어를 찾아보고 번역을 하는 과정에서 구글 번역과 옥스포드 사전을 찾아보았는데,  구글 번역에서 단어를 선택 했을 때 나오는 내용이 어떤 사전인지는 알 수 없지만 아직은 옥스포드 사전이  훨씬 의미적으로 명확한 듯 하네요! 오늘의 예문은 내일! 마무리 할께요!      독서 로그    프로그래머를 위한 기초 해석학을 읽는 중입니다.    계속해서 실수를 읽고 있습니다.  개념을 완전히 이해하고 넘어가려고 하고 있는데 어렵네요. 그래도 화이팅 입니다!  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> pick </tag>
        
          <tag> choose </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/28]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/03/01/DailyLog-2019-02-28/</url>
      <content type="text"><![CDATA[2019년 2월 28일자 라이프로그 입니다.      운동성공!  →오늘도 20층 계단 오르기 완료!        영어 공부    오늘의 단어입니다.vulnerable (형용사)→Exposed to the possibility of being attacked or harmed, either physically or emotionally  :신체적으로나 정서적으로 공격당하기 쉬운것에 대해 얘기하는 단어입니다.    entry (명사)→A place of entrance, such as a door or lobby.:입구, 문이나 로비등을 얘기합니다.    예문입니다.He is a status of vulnerable, because too many attack about emotionally from his boss. → 그는 상사에게 정신적으로 너무 많은 공격을 받았기 때문에 취약한 상태입니다.    This system have an only one entry. → 이 시스템은 단 하나의 진입점만 가지고 있습니다.    entry의 경우 좀 더 많은 뜻이 있었지만 하나만 가져왔네요.혹시 그럴리는 없겠지만 하나의 뜻만 공부하지 마시고 여러개의 뜻을 같이 보시면 더 좋아요!        독서 로그    프로그래머를 위한 기초 해석학을 읽는 중입니다.    유리수의 도입부분을 읽고 있습니다! 매번 책을 읽는다 읽지 않는다 정도만 쓰니 진도가 나가는지 나가지 않는지 알수가 없네요. 좀 더 디테일하게 작성하려고 합니다! 할 수 있으면 내용도 같이 적을 수 있도록 할께요!  2019년에는 모두 같이 성장합시다!  ]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> vulnerable </tag>
        
          <tag> entry </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/27]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/28/Daily-LifeLog-2019-02-27/</url>
      <content type="text"><![CDATA[2019년 2월 27일자 라이프로그 입니다.      운동성공!→ 오늘도 20층 계단 오르기 완료!        영어 공부오늘은 3개의 단어를 가져와봤어요.아래는 각 단어의 사전적인 의미에요.          mundane (형용사)         → Lacking interest or excitement;      흥미나 흥분이 부족한 상태에 대해 얘기합니다.      pinpoint (형용사)       → Find or identify with great accuracy or precision. (with object)      정확하게 찝어내거나 찾아내는 것을 뜻합니다.      half-ass (동사)         → Do (something) with little effort or care.      적은 힘을 들여 또는 적은 노력으로 무엇인가를 하는것에 얘기합니다.        예문입니다.    When I was college student, I had felt mundane and boring to from my life routine.  내가 대학생이었을 때 나는 내 삶이 평범하고 지루하다고 느꼈다.    At finally, I found pinpoint why I could not solve that problem.  마침내 나는 왜 그 문제를 햐결하지 못했는지 정확하게 찾았습니다.    Please, At this time never half-ass. You should concentrate that solve the problem.  제발 이번에는 건성으로 하지마. 너는 이 문제를 푸는데 집중해야 해.    오늘은 여기까지입니다!  오늘은 단어를 찾고 관련된 문장을 만들어봤어요. 시간은 조금 더 걸리는데 할만하네요!  더 도움이 되기도 하는거 같구요!  앞으로도 이렇게 해볼 생각입니다.          독서 로그  프로그래머를 위한 기초 해석학을 읽는 중입니다.      2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> mundane </tag>
        
          <tag> pinpoint </tag>
        
          <tag> half-ass </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/26]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/27/Daily-LifeLog-2019-02-26/</url>
      <content type="text"><![CDATA[2019년 2월 26일자 라이프로그 입니다.      운동다시 평일이네요!오늘도 열심히 20층 걷기를 실천했습니다!        영어 공부    오늘은 부사와 형용사로 쓰일 수 있는 hard에 대해 찾아봤어요.    아래는 예문입니다!It is hard for me.  -&gt; 그건 나한테 너무 어려워.    I always hard to succeed.  -&gt; 나는 성공을 위해 항상 열심히 한다.    오늘은 짧고 강렬하게!        독서 로그프로그래머를 위한 기초 해석학을 읽는 중입니다.이책 외에도 오늘은 직원분이 추천해주신 책을 하나 더 읽었어요!조지 소로스라는 세계적인 해지펀드 투기가에 대한 내용인데. 철학에 대해 얘기하는 부분과 조지 소로스의 일생이 흥미로웠습니다.  오늘은 조금 짧네요. 월요일에 글을 못써서 더 길게 쓰고 싶었는데, 오늘도 약속이 제 발목을 잡았네요.우리 모두 같이 더 나은 내일을 위해 노력해요!2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> hard </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/24]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/25/Daily-LifeLog-2019-02-24/</url>
      <content type="text"><![CDATA[2019년 2월 24일자 라이프로그 입니다.      운동    주말 운동은 쉽니다!        영어 공부    오늘은 행복하다는 것을 표현하는 여러 방법에 대해 찾아봤습니다.  보통은 ‘나는 행복해’라고 얘기할 때 I am happy 라고 많이 하죠!  하지만 한국어의 경우 행복하다고 말하는 방법이 여러가지죠. 수식하는 말도 많구요.    영어에서도 동일하게 행복하다는 표현들중 정도가 다른 표현 몇가지를 찾아봤습니다.                  Flying high  -&gt; 의미는 아주 행복하다는 뜻이에요. 영어로는 ‘very happy.’라고 하네요!                    Pumped up  -&gt; 의미는 굉장히 신나한다는 것이네요.                    Fool’s paradise  -&gt; 한국도 흔히 파라다이스라는 단어는 굉장히 좋은 의미로 쓰이죠.  이 숙어는 조금은 다른 의미로 사용되었어요.  문제에 대해서 알지 못하거나 무시하면서 행복해 한다는 것의 의미로 사용되었습니다.              아래는 예문이에요.    She is flying high after the successful product launch.  -&gt; 그녀는 제품을 성공적으로 출시한 후 아주 행복해 합니다.    He is pumped up for his first half-marathon race this weekend.  -&gt; 그는 이번 주말에 있는 그의 첫번째 하프 마라톤으로 굉장히 신나합니다.    He is been living in fool’s paradise since he started trading stocks, expecting to make millions even though he doesn`t have investing experience.  -&gt; 그는 투자 경험이 없는데도 불구하고 주식을 시작한 이후 수백만 달러를 벌어들일 것을 기대하면서 살고 있습니다.        독서 로그  프로그래머를 위한 기초 해석학을 읽는 중입니다.  정해놓은 시간이 많이 남지 않았는데 역시나 진도가 안나가서 큰일이네요.  투자하는 시간을 늘려야겠네요. :)  오늘은 약간 반성을 추가합니다.음… 요즘 이 블로그를 하는 덕분에 거의 매일 매일 회고를 하게 되고 있네요.문제는, 아주아주 게으르다는게 문제네요. 저 자신을 계속해서 단련하려고 블로깅을 하고 있는데, 영어 말고는 딱히 매일 매일  연습이나 공부하고 있다는 생각이 들지 않는 경우가 많네요.무엇이 문제인지 고민하고 차근차근 개선해나가야겠습니다.당분간 고민하는 동안은 지금 체제를 유지할 것 같네요.어쨌든 하루하루 더 나아지려는 제 목표는 달라지지 않으니, 우리 모두 같이 더 나은 내일을 위해 노력해요!2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> 'Flying </tag>
        
          <tag> high' </tag>
        
          <tag> 'Pumped </tag>
        
          <tag> up' </tag>
        
          <tag> 'Fool’s </tag>
        
          <tag> paradise' </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/23]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/24/Daily-LifeLog-2019-02-23/</url>
      <content type="text"><![CDATA[2019년 2월 23일자 라이프로그 입니다.      운동    주말 운동은 쉽니다!        영어 공부    오늘은 사역동사에 대해서 찾아봤어요.make, have, let 입니다.make는 강제로, 억지로의 의미를 가지고 있습니다.have는 당연히, 의무로서 의미를 가지고 있습니다.let은 하고 싶어 하는 것의 의미를 가지고 있습니다.    예문입니다.    I made him learn a new language for work.-&gt; 나는 그에게 회사 업무를 위한 새로운 언어를 배우게 했다.    I have him learn a new language for work.-&gt; 나는 그에게 회사 업무를 위한 새로운 언어를 배우게 했다.    I let him learn a new language for work.-&gt; 나는 그에게 회사 업무를 위한 새로운 언어를 배우게 했다.    모두 동일한 문장이고, 동일한 해석이지만 사역동사가 가지는 의미가 다르기 때문에 각각 다른 의미로 사용됩니다. 보이지 않는 의미인거죠!    한국어는 어투나 발음하는 방식에 따라 달라지지만 영어는 그런것이 없어 동사를 사용해서 표현하는 것도 있네요.        독서 로그    프로그래머를 위한 기초 해석학을 읽는 중입니다. 주말에 약속이 있어서 밖에 나오니 책읽는 시간이 많이 확보가 안되네요.ㅎ시간을 좀 더 쪼개야할 것 같아요.  어제는 현 회사의 퇴사자와의 긴긴 얘기로 글을 못올렸네요..ㅠㅠ앞으로는 더 열심히 하겠습니다!여러분들도 같이 힘내요!2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> make </tag>
        
          <tag> have </tag>
        
          <tag> let </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/21]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/22/Daily-LifeLog-2019-02-21/</url>
      <content type="text"><![CDATA[2019년 2월 21일자 라이프로그 입니다.      운동  2월 21일자 기본 운동 완료  -&gt; 20층 걸어 올라가기.        영어 공부  회사에서 일을 하다 보면 엄청 바쁠 때가 있기 마련이죠!  오늘은 그 때 쓰면 좋은 문장을 공부했습니다.  재미있는 표현인거 같아서 오늘자 내용으로 적습니다!  그냥 문장만 보면, 벌처럼 바빠! 라는 표현인걸로 보여지네요.    I`m as busy as a bee.  -&gt; 나 엄청 바빠!    보통 일반적인 표현으로는 아래와 같이 씁니다.  I`m really busy.    하지만 가끔 재미있는 표현으로 쓰면 어떨까 하네요~!    오늘은 여기까지입니다.  최대한 비즈니스 상황에서 쓸 수 있는 예문을 만들려고 노력하는데 항상 어렵네요.  아직은 더 연습해야겠어요!        독서 로그  프로그래머를 위한 기초 해석학을 읽는 중입니다.  보다보니 제대로 이해하고 넘어가려고 하다보니 시간이 오래걸리네요.  오늘은 엄청나게 두꺼운 책 샀던걸 받았습니다!엄청 두껍지만 그래도 나중에는 전부 완독할껍니다~!여러분들도 같이 힘내요!2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/20]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/21/Daily-LifeLog-2019-02-20/</url>
      <content type="text"><![CDATA[2019년 2월 20일자 라이프로그 입니다.      운동2월 20일자 기본 운동 완료  -&gt; 20층 걸어 올라가기.        영어 공부  18일에 꽤 라는 의미로 pretty라는 부사를 공부했었는데요.  오늘 다른 곳에서 fairly 라는 부사를 보게 되었습니다.    이 부사도 “꽤, 아주, 상당히” 라는 의미로 사용이 된다고 하네요.    예문입니다.    This soup is fairly hot.  이 스프는 꽤 뜨겁다.    His presentation is fairly understand to me.  그의 프레젠테이션은 나에게 꽤 이해가 된다.    I fairly much trust him.  나는 그를 꽤 신임한다.    오늘은 여기까지입니다.  최대한 비즈니스 상황에서 쓸 수 있는 예문을 만들려고 노력하는데 항상 어렵네요.  아직은 더 연습해야겠어요!        독서 로그  프로그래머를 위한 기초 해석학을 읽는 중입니다.  고등학교 때 수학공부를 게을리 한 덕에 쉽지 않은 내용이네요.  책 자체는 쉽게 쓰려고 노력했다고 적혀 있으니 열심히 읽어보겠습니다.  오늘은 조금은 일찍 글을 썼어요!좋은 내용을 더 많이 쓰고 싶은데 쉽지 않네요.그래도 올 한해는 꾸준히! 열심히! 해보겠습니다.2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> fairly </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/19]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/20/Dail-LifeLog-2019-02-19/</url>
      <content type="text"><![CDATA[2019년 2월 19일자 라이프로그 입니다.      운동오늘도 운동을 거르지 않고 했습니다.  당연히 운동은 20층 계단 오르기 입니다. :)        영어 공부오늘은 “focus on”이란 숙어에 대해 공부했습니다.  focus on은 기본적으로 ~에 집중하다라는 뜻을 가지고 있습니다.    사람들끼리 어떤 주제에 대해 얘기를 할 때 이야기가 먼산으로 흘러갈 때 이렇게 말할 수 있을 것 같네요.  We have to focus on talk about to Korean traditional food.  -&gt; 우리는 한국의 전통 음식 이야기에 집중해야 합니다.    이번주에 우리가 중요한 업무를 해야 한다면 이렇게 얘기할 수도 있을 것 같구요.  This week, we have to focus on do this work.  -&gt; 이번주에 우리는 이 일에 집중해야 합니다.    간단한 표현이지만 무엇인가에 집중해야 하는 상황이나 집중하는 것에 대해 표현하기 좋으니   활용도가 높은 숙어라는 생각이 드네요 :)        독서 로그  프로그래밍 수련법과 프로그래머를 위한 기초 해석학을 읽는 중이에요!  프로그래머를 위한 기초 해석학은 길벗 출판사에서 진행하는 개발자 리뷰어에 당첨되어 책을 받게 되었네요.  조만간 리뷰를 하도록 하겠습니다!    요즘 계속해서 늦게 끝나거나 일을 하다보니 새벽시간까지 이러고 있네요.  좀 더 일찍 하루를 마무리 하는 습관을 들여야 할것 같아요!  여러분도 일찍 주무세요! :)  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> 'focus </tag>
        
          <tag> on' </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/18]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/19/Daily-LifeLog-2019-02-18/</url>
      <content type="text"><![CDATA[2019년 2월 18일자 라이프로그 입니다.      운동다시 평일이니, 운동을 했습니다.요새는 미세먼지 때문에 옥상가서 스트레칭을 못하네요.덕분에 올라간 직후에는 사무실에서 헉헉대고 있네요.ㅎ        영어 공부오늘은 pretty라는 부사에 대해 공부했습니다.    흔히들 pretty girl 정도로 예쁘다는 의미로 많이 사용합니다.    pretty는 예쁘다는 표현 외에도 꽤, 강한 이라는 의미도 동시에 가지고 있어서 아래 같은 표현도 사용합니다.It is pretty good.-&gt; 그거 꽤 좋아.    It is pretty cold today.-&gt; 오늘 날씨가 꽤 추워.    It`s a pretty bad breakup-&gt; 꽤 나쁜 이별이네.    이런 용도로 사용이 가능합니다.느낌을 표현할 때 살짝 강한 느낌을 주는 용도로 쓰이는 것 같네요!        독서 로그프로그래밍 수련법을 읽는 중입니다!음… 분명 초보 개발자들에게 좋은 책이지만, 어렵긴 어렵다는 생각이 드네요.그리고 사실 수련법은 아닙니다.ㅎㅎ이렇게 개발하세요 정도의 느낌이네요.어쨌든! 계속 읽겠습니다!  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> pretty </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/17]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/18/Daily-LifeLog-2019-02-17/</url>
      <content type="text"><![CDATA[2019년 2월 17일자 라이프로그 입니다.      운동오늘은 주말이니까! 운동은 쉽니다!        영어 공부오늘 공부한 표현은 I couldn`t agree more. 입니다.    전적으로 동감합니다. 라는 내용인데, 직역하면 더이상 동의하지 못하겠어 라고 표현하는 것과 같습니다.    I couldn`t agree more about your opinion.나는 너의 의견에 전적으로 동의해!        독서 로그  프로그래밍 수련법을 읽는 중입니다!  개발자의 기초를 쌓기에 굉장히 좋은 책이네요.  학교에서 배우지 못하는 것들에 대해 많은 것을 알려주고 있습니다.  전부 읽고 이 내용 역시 자세하게 다루겠습니다.  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/16]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/17/Daily-LifeLog-2019-02-16/</url>
      <content type="text"><![CDATA[2019년 2월 16일자 라이프로그 입니다.      운동  오늘은 주말이니까! 운동은 쉽니다!        영어 공부  영어도 오늘 하루는 쉽니다..ㅠ        독서 로그프로그래밍 수련법을 읽는 중입니다!    2019년에는 모두 같이 성장합시다!  ]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/15]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/16/Daily-LifeLog-2019-02-15/</url>
      <content type="text"><![CDATA[2019년 2월 15일자 라이프로그 입니다.      운동이번주는 부지런히 운동한 결과 5일 전부 운동을 했네요!몸이 좋아지는게 느껴지는 것이 좋네요.우리 모두 운동 합시다!        영어 공부오늘 제가 공부한 표현은 ‘in 10 or 20 years time’ 이란 표현이에요.    10년에서 20년 사이에~ 정도의 표현입니다.    Perhaps I think you will be your dream come true in 10 or 20 years time.-&gt; 아마 내 생각에 너는 10년에서 20년사이에 꿈을 이룰 수 있을꺼야.    이런식의 표현을 사용 할 수 있습니다!        독서 로그  핑계지만, 오늘은 업무를 해야해서 독서를 하지 못했네요.  원래는 좀 더 빠르게 업무를 마무리 하고 책을 읽으려 했것만…  아, 읽을 책은 프로그래밍 수련법이란 책입니다 :)  2019년에는 모두 같이 성장합시다!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> 'in </tag>
        
          <tag> 10 </tag>
        
          <tag> or </tag>
        
          <tag> 20 </tag>
        
          <tag> years </tag>
        
          <tag> time' </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/14]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/15/Daily-LifeLog-2019-02-14/</url>
      <content type="text"><![CDATA[2019년 2월 14일자 라이프로그 입니다.      운동  오늘이 목요일이니까 이번주는 총 4일동안 이어서 20층 계단 오르기를 했네요!  처음에는 20층을 걸어 올라가면서 대화하는건 너무 힘들었는데,   이제는 짧은 대화는 무리 없이 할 수 있게 되었네요! 무엇인가 좋아지는 것 같아 좋네요!  우리 모두 운동 합시다!        영어 공부  오늘 제가 공부한 표현은 ‘무엇인가에 열중해 있다. 무언가에 빠져있다.’에요.    난 최근 모바일 게임에 빠져있어.  I am crazy about the mobile game recently.    나는 블록체인 기술에 빠져있습니다.  I am hooked on the blockchain technology.    단순히 영작 하는 것 말고도 말하는 것과 입에 붙게 연습해야 할 것 같은데,  어떻게 해야 할지 방법에 대해서는 고민이 되네요.  일단은 꾸준히 영작하는 것만 해야겠습니다.        독서 로그  드디어 ‘세상에서 가장 쉬운 양자역학 수업’을 다 읽었습니다!! Yay~~!!  이번주 안에 관련 내용을 정리해서 Book 카테고리에 올릴 예정입니다!  혹시 책을 사서 읽으시려는 분에게 도움이 되었으면 좋겠네요!  ]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/13]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/14/Daily-LifeLog-2019-02-13/</url>
      <content type="text"><![CDATA[2019년 2월 13일자 라이프로그 입니다.      운동  계획했던 20층 계단 오르기를 오늘도 수행 했습니다.  오늘은 점심 먹고 얘기하는 자리가 길어져서 급하게 걸억느라 좀 더 힘들었던 것 같네요.        영어 공부  오늘은 driving factor 라는 숙어에 대해 얘기를 해볼까 합니다.    Fame is driving force whose want be an actor.  -&gt; 배우가 되고 싶은 사람은 명성이 원동력입니다.    Money is the driving force in finding a new job.  -&gt; 새로운 직장을 찾는 것의 원동력은 돈입니다.    이렇게 원동력이라는 말을 쓰고 싶은 경우 사용할 수 있습니다.        독서 로그  양자역학 수업을 계속 읽고 있습니다.  바쁜 탓에 속도가 나지를 않네요.  오늘은 좀 늦게 자더라도 다 읽고 자야겠습니다.  여러분 2019년에는 같이 성장해보아요!]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/12]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/13/Daily-LifeLog-2019-02-12/</url>
      <content type="text"><![CDATA[2019년 2월 12일자 라이프로그 입니다.      운동  계획했던 20층 계단 오르기를 오늘도 수행 했습니다.  시간이 여유가 있는 날은 옥상까지 마저 걸어 올라가서 스트레칭을 하곤 합니다.  허리가 엄청 안좋았을 때 나름의 운동하는 방식을 만들어서 덕분에 많이 괜찮아졌던 기억이 납니다.  2019년에는 우리 모두 운동합시다!        영어 공부오늘은 sharp 라는 부사를 배워봅시다.    sharp를 부사로 사용할 때는 우리가  정각이라는 말을 하려고 할 때 사용합니다.  예를 들어 봅시다~    The meet will start at 14:00 sharp.  -&gt; 그 회의는 14:00시 정각에 시작할 겁니다.    이렇게 정각이라는 말을 써야 할 때 사용 할 수 있습니다.        독서 로그역시나 세상에서 가장 쉬운 양자역학 수업을 읽고 있습니다.  쉽게 읽히는 양자역학 책이니 양자역학을 잘 몰라도 입문하기에 좋은 책인 것 같습니다.  어서 다 읽고 내용 정리를 올리겠습니다 ( ..);;    오늘은 영어 공부가 조금 부족해보이네요.  다음번엔 좀 더!    여러분 2019년에는 같이 성장해보아요!  ]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> sharp </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/11]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/12/Daily-LifeLog-2019-02-11/</url>
      <content type="text"><![CDATA[2019년 2월 11일자 라이프로그 입니다.      운동  오늘은 원래 계획 했던 20층 계단 오르기를 성공 했습니다!  처음 계단을 오를 때 보다 숨은 더 차고, 허벅지가 더 튼튼해지는 느낌이었습니다.  얘기를 많이 해서 그런가 싶기도 합니다.  운동 합시다!        영어 공부lately 와 recently 의 차이점.  lately와 recently는 모두 최근, 요즘, 요새 라는 비슷한 의미로 사용합니다.    lately : 예전부터 현재까지 있었던 일들에 대해서 얘기 할 때 사용합니다.    recently : 과거에는 없었지만 최근에 새롭게 있었던 일들에 대해 얘기 할 때 사용합니다.    문장을 만들어 봅시다!  Recently I developed mobile application using by react native.  -&gt; 최근에 나는 react native를 사용해서 모바일 어플리케이션을 개발합니다.    I study english hard lately because I will preparing to work in abroad the country.  -&gt; 나는 해외에서 일하는 것을 준비하고 있기 때문에  최근에 영어공부를 열심히 합니다.    예문을 만드는 것은 어렵네요.    라이브아카데미 Youtube 채널에서 참고 하였습니다.        독서 로그음… 오늘은 독서를 하지 않았습니다.  자연스럽게 반성이 되네요.  오늘은 집에 들어가서 조금이라도 읽어야 겠습니다.  ]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
          <tag> lately </tag>
        
          <tag> recently </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Daily LifeLog] 2019/02/10]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/11/Daily-Log-2019-02-10/</url>
      <content type="text"><![CDATA[##오늘의 DailyLog 입니다.      운동오늘은 주말이다.  운동은 주중에만 로깅을 하겠다.        영어공부연초이다 보니 계획을 세울 일들이 많다. 아래 표현들은 계획을 실행하는 정도에 따라 다른 표현법이다.    아주 단단한 계획   I planning to    가능하면 이루고 싶은 계획  I want to    이루고 싶지만 현실적으로 어려운 계획  I would really like    내가 세운 계획을 통해 예제 문장으로 연습 해보자.I planning to exercise every weekday.	  -&gt; 나는 평일에 운동을 할 계획이다.    I want to read 50 books in this year and will write my opinion of book in my blog.  -&gt; 나는 올해 50권의 책을 읽고 내 블로그에 책에 대한 제 의견을 쓸 것입니다.    I would really like earn a lot of money.  -&gt; 나는 정말로 많은 돈을 벌고 싶습니다.    마지막 문장은 약간 어색하지만.. 별다른 예문이 생각나지 않네요.  좋은 예가 있으면 나중에 수정하겠습니다. :)        독서 로그지금은 ‘세상에서 가장 쉬운 양자역학 수업’을 읽고 있습니다.  3/2 정도 읽은 것 같네요.  완독 후에 내용을 정리하고 어떤 사람이 읽으면 좋을지 적겠습니다.  올해는 다들 계획하신 일을 모두 이루셨으면 좋겠습니다! 화이팅! :)]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[2019년 회고 & 계획]]></title>
      <url>/%EB%9D%BC%EC%9D%B4%ED%94%84%EB%A1%9C%EA%B7%B8/2019/02/11/2019%EB%85%84%ED%9A%8C%EA%B3%A0-%EA%B3%84%ED%9A%8D/</url>
      <content type="text"><![CDATA[여러분은 계획을 세울 때 어떻게 세우는가?나는 항상 10년이나 20년 후에 이루어야 할 것을 정해 놓고 디테일한 계획은 그 때 그 때 변경하면서 지내왔었다.이번에 아샬님이 열어주신 신년회를 다녀오고 반 강제로(?) 올해는 큰 계획은 그대로 두고 1년 정도의 상세한 계획에 대해 좀 더 디테일한 계획을 세워서 실천하게 되었다.2019년 초에 컨퍼런스나 세미나를 좀 더 자주 다녀야 겠다고 다짐한 후그 일환으로 컨퍼런스나 세미나에 좀 더 적극적으로 참여하려고 하고 있다, 더불어 가능하다면 발표도..그런 연유로 어제, 그러니까 2019년 2월 9일에 강남역 마이캠퍼스에서 아샬님이 진행하신 신년회에 다녀왔다.2018년 회고에 이어서 2019년에는 계획한 것의 일부분이라도 성취를 해보자라는 마음으로 회고에 썼던 내용을 리마인드 하면서 참석 했다.그 동안에는 그냥 하면 하고 말면 말고 였지만.. 강제성이 떨어져서 이룰 수 있는게 거의 없었던 것 같다. 그리 하여, 현재의 게으른 나에게 매일 매일의 숙제를 주는 편이 좀 더 잘 실천할 수 있는 방안이지 않을까생각이 들었다.덕분에 회사 업무를 제외 하고 매일 하루치의 숙제가 주어졌다.  운동  영어 공부  책 읽은 내용 정리책을 읽는 것은 2018년 회고에서 2019년 한 해 50권 읽기로, 영어 공부는 절대 포기 하지 않는 것으로 정했으나, 좀 더 구체적으로 변화 되었다.운동의 경우는 최근 회사에서 20층 정도를 계단으로 올라가는 것으로 퉁치기로 마음 먹었다. 농담이 아니라 일주일 정도만에 성과가 나타났다. 모두 운동하자! 건강하니 마음도 안정된다.영어 공부는 일단 학원을 등록했다. 아직은 자주 가지 못하고 있지만 점차 늘릴 예정이다. 여러 이유로 영어는 포기할 수 없는 것이 되었으니 올해부터는 정말 꾸준히 하려고 한다.현재 상황에서 나에게 가장 어려운 도전이 바로 읽은 책의 내용 정리다. 처음에 책의 내용을 정리하는 것은 시간이 엄청나게 걸렸다. 어려운 책이라서 그랬을지는 모르겠지만.. 어쨌든 보름 이상 걸렸다. 그 이후 엄청난 변화를 주었기에 몇 백배의 이득을 보고 있지만, 다시 동일하게 하려고 하니 쉽지 않다. 그래도 내 기억에 제대로 각인 시키려면 꾸준히 기록해야 한다. 최근 뼈저리게 느꼈다. 그래서 블로그에 기록하기 위한 컨텐츠로 추가 했다. 가능하면 영어 버전도.이러한 이유로 매일 매일 그날의 운동과, 영어 공부한 내용, 읽은 책에 대해 정리해서라이프로그 카테고리에 꾸준히 올릴 예정이다. 포기하지 않는 것이 제일 중요할 것 같다. 읽은 책 내용 정리는 매일 올라올 수는 없겠지만 중간 중간 정리해서 올릴 계획이다.이런 기회를 주신 아샬님에게 감사를 드리고 싶다. 이 글을 보실지는 모르겠지만.. 감사 드립니다.]]></content>
      <categories>
        
          <category> 라이프로그 </category>
        
      </categories>
      <tags>
        
          <tag> DailyLog </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰]기계는 어떻게 생각하고 학습하는가]]></title>
      <url>/books/2019/01/11/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-%EA%B8%B0%EA%B3%84%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%83%9D%EA%B0%81%ED%95%98%EA%B3%A0-%ED%95%99%EC%8A%B5%ED%95%98%EB%8A%94%EA%B0%80/</url>
      <content type="text"><![CDATA[4차 산업혁명이라고 일컬어지며 나타난 AI 현시대의 사람들은 과연 이 AI에 얼마나 알고 있고, 어떻게 생각할까? 많은 매체에서 AI와 머신러닝에 대해 수없이 떠들지만 정작 그런 것들에 대해 피부로 느끼는 사람은 많지 않다.이 책은 AI가 무엇인지 주변에서 수없이 떠들지만 정작 정확히 알지 못하는 사람들을 위해 만들어졌다. 전 세계에서 연구중인 현재 프로젝트와 그 프로젝트들이 이루고자 하는 목표지점 그리고 AI 프로젝트들이 진행되면서 발생할 수 있는 여러가지 문제들을 한꺼번에 다루고 있다. AI가 단순히 어떤 것이다라는 것을 넘어서 책의 제목 답게 기계가 학습하는 방식부터 시작해서 과거부터 지금까지 어떻게 해왔는지 앞으로 진행되면서 어떤 방식으로 기계학습을 하게 될지 광범위한 내용을 다루고 있다. 덕분에 AI가 무엇인지 하나도 모르는 사람이 읽어도 전혀 부담스럽지 않은 내용이다.물론 전문용어가 많고 이해하기 쉽지 않은 개념들이 있지만 이쪽 분야의 지식이 조금 있다고 한다면 이 책을 읽으면서 새로운 인사이트를 발견 할 수 있을 것이다.AI라는 것이 분명 새로운 기술이고 우리를 미래로 데려다 줄 기술이긴 하지만 책을 읽다보면 밝은 미래만 기다리고 있는 것은 아니다 아직 인간이 예측하여 제대로 활용하고 있는 기술이 아니다보니 예측하지 못하는 무서운 내용들도 나온다.기계의 가장 무서운 것이 무엇이라 생각하는가? 기계의 가장 무서운 점은 사람이 아니라는 점이다.예를 들어 자동차 운전수가 사람이라면 갑자기 뛰어든 사람을 보고 차를 멈추거나 핸들을 틀어 갑자기 뛰어든 사람이 다치지 않도록 할 것이다. 만약 멈추지 못하는 순간이고 핸들을 돌렸을 때 더 큰 사고가 날 수 있다면 어떻게 되겠는가? 사람은 상황에 따라 사람을 우선시 하기도 하거나 자신이 탄 차가 사고가 나는 쪽을 택할지도 모른다. 하지만 기계는 다르다. 두가지 경우에서 덜 손해가 나는쪽으로 행할 것이다. 그게 사람을 치고 달리는 방향이어도 말이다. 운전수가 사람이라면 절대 생각할 수 없는 부분이나 기계가 운전한다면 충분히 일어날 수 있을 법한 일이다.심지어 기계가 어떻게 결론을 내는지 사람이 프로그래밍했음에도 불구하고 알지 못하는 경우도 있다. 알 수 없는 미래가 펼쳐지고 있는 것이다. 컴퓨터가 정확한 결론을 내고 사람이 기대한 것 보다 더 높은 정확성을 보여주지만 사람은 그것이 어떤 원리로 나오는지 알지 못하는 것이다. 미래가 어떻게 다가올지 모르지만 언젠가 사람이 이해하지 못하는 기계는 나올 것이다.다만 어떻게 준비하느냐의 문제이며 그건 결국 그 분야와 기술에 대한 깊은 이해가 없이는 힘들 것이다.아주 먼 미래가 아니다. 바로 목전이다. 기계 학습에 대해 AI에 대해 조금이라도 이해를 하고자 하는 사람은 이 책이 도움이 될 것이다.“기계는 어떻게 생각하고 학습하는가”는[링크] 에서 확인 할 수 있다.]]></content>
      <categories>
        
          <category> books </category>
        
      </categories>
      <tags>
        
          <tag> review </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 처음 시작하는 R 데이터 분석]]></title>
      <url>/books/2018/10/12/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-%EC%B2%98%EC%9D%8C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-R-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/</url>
      <content type="text"><![CDATA[[도서리뷰] 처음 시작하는 R 데이터 분석R을 처음 시작하는 또는 통계를 사용해 무엇인가 수치를 측정해보고 싶은 사람에게 딱 맞는 책이라 할 수 있다. 처음을 시작하게 도와주는 책 답게 앞으로 사용하게 될 프로그램의 기능이나 각 메뉴에 대해 자세히 설명하고 한글이 깨지는 문제 상황에 대해서도 적어주었다.분석에 사용될 데이터의 정의나 데이터 분석이 왜 필요한지 데이터 분석의 일련의 과정을 먼저 설명해주면서 데이터 분석을 왜 해야 하는지 데이터 분석이 어떤 상황에서 필요한지에 대해 잘 설명해주고 있다. 문과라면 어려울 수 있는 명칭이나 개념들은 그림을 사용해 설명하여 문과 계열의 전공자도 데이터 분석을 접하는 데 도움이 될 수 있도록 책을 구성한 점은, 실제 비즈니스를 하는 사람이나 경영을 하는 사람도 데이터 분석이 무엇인지 알 수 있게 해주고 더 나아가 기본적인 데이터 분석을 할 수 있도록 도움을 준다.책의 중반부부터는 데이터를 가공하는 과정에서 사용되는 기능들에 대해서 예를 들면서 보여주고 있다. 초보자를 위한 책답게 꼼꼼한 설명이 들어가 있어 독자의 이해를 돕고 있다.다만 초보자 위주의 책이고 실습 위주의 내용이 많다 보니 좀 더 어려운 기능이나 책에 없는 기능들에 대해서는 어떤 내용을 참고하면 좋을지에 대한 내용이 많지 않아 R이란 데이터 분석 언어에 대해 더 깊게 공부하고자 하는 사람에게는 오히려 정보가 부족해 정말 필요한 정보는 없다고 생각이 들 수도 있다는 느낌을 받았다.그래도 초보자가 보기에 충분한 예제들과 프로젝트로 진행하는 것들에 대해서는 데이터를 어디서 얻으면 되는지에 대한 안내와 더불어 가공하는 방법들도 상세히 다루고 있어 초보자가 접하여 R 언어를 익히기 위한 입문서로 좋은 책이란 것은 의심할 여지 없이 분명하다.[처음 시작하는 R 데이터 분석] 책의 자세한 내용은 [링크]에서 확인할 수 있다.]]></content>
      <categories>
        
          <category> Books </category>
        
      </categories>
      <tags>
        
          <tag> review </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰][서평]Django로 배우는 쉽고 빠른 웹 개발 파이썬 웹프로그래밍]]></title>
      <url>/books/2018/09/01/%EC%9B%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</url>
      <content type="text"><![CDATA[Django로 배우는 쉽고 빠른 웹 개발 파이썬 웹프로그래밍이책의 대상은 철저히 초보자로 제한된다. 챕터 1의 내용이 웹 프로그래밍의 이해라는 것이 그 반증이다. 대신 그만큼 웹 프로그래밍을 처음 시작하는 초보자가 알아야 하는 웹의 개념이나 웹이 동작하는 방식에 대해 자세히 다루고 있다. 많은 웹 개발자가 웹의 동작 방식이나 HTTP 프로토콜에서 상태 코드가 의미하는 바가 무엇인지 모르는 경우가 많은데, 이 책은 그 부분의 가려운 부분을 정확히 긁어주고 있다. 이런 부분을 자세히 다루려면 네트워크 부터 시작해서 자칫 내용이 방대해지기 쉬운데 이 책에서는 웹 프로그래밍을 시작하기에 적당한 내용을 잘 정리해서 담은 느낌이다.2장은 파이썬의 라이브러리 소개가 주를 이룬다. Django 프레임워크를 알기 위해서 웹서버의 구조를 설명하고 파이썬을 사용해 웹 서버를 개발 할 수 있는 웹 서버 라이브러리에 대한 내용을 제공하고 파이썬에서 웹 서버를 구축하는데 필요한 라이브러리로 CGI와 WSGI를 소개한다. 웹 서버를 사용하기 위한 기본적인 개념을 이해하고 난 후면 이제 Django에 대한 내용을 다루기 시작한다.기본적으로 Django는 프레임워크다. 아무리 파이썬이 러닝 커브가 낮고 쉽게 배워서 쉽게 쓰는 것이 장점이라고는 해도 웹 프로그래밍과 프레임워크가 운영되기 위한 기본적인 지식이 없으면 프레임워크를 써서 개발하는 것은 쉬운 것이 아니다. 그런 면에서 이 책은 상당 부분 부족한 부분을 채워 주고 있다고 얘기할 수 있다.초급 개발자들을 위해 친절한 면은 그뿐이 아니다, Django를 쓰기 위해 설치를 해야 하는 부분도 상세하게 나와 있어 어렵지 않게 따라 할 수 있는 것도 큰 장점이다. 디자인 패턴이나, ORM 같은 개발 기법들도 함께 설명하고 있다. 디자인 패턴이나 개발 기법들은 그런 방법들을 설명하기 위해서 따로 책이 나올 정도로 방대한 내용이지만 이 책에서 파이썬으로 개발하기 위해 필요한 내용을 가볍게 다루고 있다. 이러한 내용이 있다는 것을 알게 되는 것만으로도 초급 개발자에게는 상당히 도움이 될 수 있다. 다음에 필요하다면 공부를 따로 하는 것도 하나의 방법이다.이 책은 파이썬과 Django라는 프레임워크를 사용하기 위해 필요한 웹의 베이스가 되는 지식과 파이썬에서 활용 가능한 많은 라이브러리와 데이터베이스와 연동 방법 등 웹 프로그래밍을 하기 위해 필요한 모든 것을 총망라했다고 볼 수 있다. 그만큼 초급 개발자, 특히 웹을 오래 하지 않은 개발자는 여러 면에서 도움이 될 수 있으리라 생각이 든다.이 책 “Django로 배우는 쉽고 빠른 웹 개발 파이썬 웹프로그래밍” 는 [링크] 에서 확인할 수 있다.]]></content>
      <categories>
        
          <category> Books </category>
        
      </categories>
      <tags>
        
          <tag> review </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[서평][도서리뷰] 9가지 사례로 익히는 고급 스파크 분석(2판)]]></title>
      <url>/books/2018/04/13/%EC%84%9C%ED%8F%89-%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-9%EA%B0%80%EC%A7%80-%EC%82%AC%EB%A1%80%EB%A1%9C-%EC%9D%B5%ED%9E%88%EB%8A%94-%EA%B3%A0%EA%B8%89-%EC%8A%A4%ED%8C%8C%ED%81%AC-%EB%B6%84%EC%84%9D-2%ED%8C%90/</url>
      <content type="text"><![CDATA[9가지 사례로 익히는 고급 스파크 분석(2판)스파크를 경험해봤거나 사용 중이지만 좀 더 다양한 방식을 통해 데이터 분석을 하고자 하는 사람이라면 이 책을 읽어보는 것을 적극적으로 추천한다.데이터 분석을 위해서 아파치 스파크에 입문하긴 했으나, 매일 비슷한 상황에서의 분석으로 지쳐 있는 사람이라면, 이 책에 나온 9가지 사례에 대한 내용을 보다 보면 새로운 시각으로 데이터를 볼 수 있는 눈을 키우는 데 도움이 될 거라 생각된다.보통은 하나의 시스템에서 데이터를 분석하므로 매번 쓰던 방식만 사용하고, 데이터의 분석보다는 어떻게 하면 더 잘 가공할 수 있을지에 대한 고민을 더 하게 된다.이러한 고민이 틀린 것은 아니나 때로는 새로운 기준을 세우고 다른 시각에서 데이터를 보는 것도 필요하다고 생각한다.엉뚱한 곳에서 다른 시각으로 데이터 분석을 하다 보면 우연히 원하던 데이터를 얻을 수 있는 새로운 인사이트를 얻기도 한다.그러기 위해서는 여러 가지 기능을 사용해보고 다양한 방식으로 데이터를 분석해보아야 하는데 보통 생각하기도 쉽지 않고 경험하기도 어려운 것이 사실이다.이 책에 나오는 9가지 분석 사례는 각각의 데이터가 가지는 특성과 분석 방향이 모두 다르기 때문에 스파크에 존재하는 여러 분석 기능들을 경험해 볼 수 있도록 도움을 준다.타깃으로 하는 데이터도 샘플 데이터지만 적지 않은 양이고 각각의 분석 목적에 맞도록 준비할 수 있도록 하고 있어 실제 데이터 분석에 가깝도록 데이터 분석을 할 수 있게 해준다.책의 제목처럼 내용 자체가 고급 분석이기 때문에 데이터 분석이 무엇인지 잘 모르는 사람에게는 어려운 부분이 많다.하지만 데이터 분석을 위한 환경 구성도 책의 앞부분의 일부를 할애하여 설명하고 있기 때문에 스파크가 아닌 다른 시스템이나 언어를 사용해서 분석하던 사람도 접근할 수 있도록 배려하였다.더불어 스파크가 1.0에서 2.0으로 변경되면서 추가되거나 변경된 기능들에 대한 내용도 포함되어 있어 최신의 내용도 놓치지 않고 익힐 수 있도록 하고 있다.좋은 내용이 많은 책임에도 불구하고 내용 자체가 쉽지 않아 스파크를 처음 익히는 사람들은 이 책으로 시작하기에는 상당히 많은 시간과 노력이 필요하다. 그만큼 데이터 분석이라는 분야가 어렵고 어려운 것으로 생각된다.지금까지 하던 방식과 다른 방식으로 데이터 분석을 하고 싶은 사람.내가 사용하고 있는 기능 외에 스파크의 다른 기능들을 알고 싶은 사람.스파크를 스파크답게 제대로 사용해보고 싶은 사람.다른 언어나 시스템에서 이미 데이터 분석을 해봤으나 스파크를 사용해보고 싶은 사람.그 외 본인이 한빛 미디어와 O’REILLY 책이 잘 맞는다는 분들에게는 이 책을 적극적으로 추천한다.이 책 9가지 사례로 익히는 고급 스파크 분석(2판)” 는  [링크] 에서 확인할 수 있다.]]></content>
      <categories>
        
          <category> books </category>
        
      </categories>
      <tags>
        
          <tag> review </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[서평][도서리뷰] 스프링4 입문]]></title>
      <url>/books/2018/02/19/%EC%84%9C%ED%8F%89-%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-%EC%8A%A4%ED%94%84%EB%A7%814-%EC%9E%85%EB%AC%B8/</url>
      <content type="text"><![CDATA[스프링은 현재 5가 공식적으로는 최종 버전이다. 이 책은 스프링4를 다루고 있어 사실은 한발 늦었다고 생각하고 있지만, 스프링의 많은 기반이 되는 것이 현재까지는 3.2나 4에 맞춰져 있는 상황이어서 사실 지금부터 스프링을 공부하는 사람에겐 많은 변화를 가져온 5부터 공부하는 것보다는 스프링4를 먼저 공부하는 것이 좀 더 쉽게 공부하는 방법이 아닐까 생각한다.그런 관점에서 보면 이 책은 실 업무에서 스프링을 다루는데 필요한 거의 모든 부분을 다루고 있다고 생각이 든다.스프링 하면 보통 다들 생각하는 책은 Toby Lee 님의 스프링 책일 것이다.하지만 그 책은 스프링의 모든 것을 다루다 보니 정말 어마어마할 정도로 양이 많다.그 책은 공부하기 위해서 보다는 작업을 하다 reference를 찾는 용도로 사용하는 것이 더 적합하다는 생각이 들 정도로 자세하고, 스프링에 대해 자세히 다루고 있다.스프링을 실 업무에서 사용하고 있으나, 2% 부족함을 느끼는 개발자라면 적극적으로 이 책을 추천한다. 이 책은 Toby 님의 스프링 책만큼 많은 내용을 다루지는 못하고 있지만, 업무를 하면서 필요로 하는 기본적인 내용은 빠지지 않고 담아 두었다고 생각된다.스프링에서 가장 중요한 DI(Dependency Injection)와 AOP(Aspect oriented programming)에 대해서는 이해하기 어렵지 않도록 친절한 설명과 함께 적절한 예제로 기술되어 있어 확실하게 개념을 잡고 넘어가기에 좋다.이번 “스프링4 입문” 책을 보면서 한빛 미디어의 개발 서적이 점점 좋아지고 있다고 느끼게 된 점이 하나 있는데, 코드의 설명에 대한 부분이다.물론 이 부분은 지극히 개인적인 관점이라 다른 독자들은 어떻게 생각할지 모르겠다.이전의 한빛 책들을 보면 “코드에서 몇번째 줄” 이라고 기술되어 있는 경우가 많았다. 하지만 이번 책에서는 친절하게 코드별로 설명하고 있는 부분에 대해 따로 표시를 해주는 친절함을 발견할 수 있었다.코드가 들어간 개발 서적을 보면서 항상 불편하다고 생각했던 부분인데 적극적으로 개선해주는 모습을 보여주는 한빛 미디어의 서적을 보니 문득 편집자분의 노고가 느껴졌다.스프링의 전체적인 부분을 입문자의 입장에서 빠짐없이 설명하고 있다는 장점 외에도, 책을 쓰신 분의 Know-How 나 아키텍터 관점에서 프로그램을 볼 때 어떤 부분을 봐야 하는지어떤 부분을 신경 써야 하는지도 기술되어 있어 커리어의 목표를 아키텍터로 잡고 있는 분들에게도 많은 도움이 될 거로 생각한다.한 가지 아쉬운 점이라면 번역서다 보니 2017년 11월이 초판이지만 실제 책이 쓰였던 시기는 2015년도라는 점이다. 물론 스프링 자체가 5.0으로 넘어가기 전까지는 많은 변화가 있는 프레임워크가 아니고 현재까지도 스프링 4가 주력으로 사용되고 있기 때문에 당장 스프링 5를 공부하려는 사람이 아닌 이상 스프링이 가지는 코어 시스템의 개념을 익히고 스프링이란 프레임워크를 알아가기 위해서는 더할 나위 없는 책이라 생각된다.이 책 “IT 트렌드 스페셜 리포트” 는  [링크] 에서 확인할 수 있다.]]></content>
      <categories>
        
          <category> books </category>
        
      </categories>
      <tags>
        
          <tag> review </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[번역] Spring schema references 에는 버전을 정확히 명시하지 않는 것이 좋다.]]></title>
      <url>/translate/2018/01/08/%EB%B2%88%EC%97%AD-Spring-schema-references-%EC%97%90%EB%8A%94-%EB%B2%84%EC%A0%84%EC%9D%84-%EC%A0%95%ED%99%95%ED%9E%88-%EB%AA%85%EC%8B%9C%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%A2%8B%EB%8B%A4/</url>
      <content type="text"><![CDATA[먼저 이 글은 do-not-specify-version-numbers-in-spring-schema-references을 번역한 글임을 밝혀둡니다.혹시 문제가 될 경우 즉시 삭제 하겠습니다.Spring schema references 에는 버전을 정확히 명시하지 않는 것이 좋다.만약 당신이 스프링 프로젝트 기반에서 일을 하고 있다면 스프링 설정파일의 헤더 부분에 있는스프링 모듈에 대한 schema references를 보았을 것이다.스키마 레퍼런스에서 우리는 xml namespace와 버전 번호에 대한 얘기를 하고자 한다.버전 번호를 명확하게 하는 것은 필수가 아니다, 그리고 당신은 그것을 뺄 수 있다.여기 예제를 보면 사실, 버전은 제거 해야 한다.스프링은 자동적으로 프로젝트에서 사용 가능한 가장 높은 버전의 모듈을 선택합니다.또, 스프링 버전이 업데이트 되거나 프로젝트의 환경이 좋아지는 경우 새로운 기능을 위해 모든 xml 설정을 유지할 필요는 없습니다.버전을 사용하지 않는 스프링 설정 파일의 사용 예제&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd       http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;&lt;!-- Other bean definitions--&gt;&lt;/beans&gt;이건 아래처럼 사용 될 수 있습니다.&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;!-- Other bean definitions--&gt; &lt;/beans&gt;의견을 덧붙이면..개인적으로 스프링은 책으로 공부한 것보다 인터넷에서 찾아보며 공부한 시간이 더 많네요.책에 이런 내용들이 담겨져 있다면 좋을 것 같다고 생각이 드네요.기술적인 부분이라기 보다는 개발 편의성에 관련된 내용이라고 생각되지만,그래도 모르는 것보다는 아는 것이 더 좋을 것 같아 이렇게 정리해 둡니다.더불어 번역을 허락해주신 HowToDoInJava 의 주인이신 Lokesh Gupta 에게 감사 드립니다.]]></content>
      <categories>
        
          <category> translate </category>
        
      </categories>
      <tags>
        
          <tag> 번역 </tag>
        
          <tag> Spring </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[프로그램 개발과 관련된 영문 글의 번역에 대해]]></title>
      <url>/translate/2018/01/02/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EA%B0%9C%EB%B0%9C%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EC%98%81%EB%AC%B8-%EA%B8%80%EC%9D%98-%EB%B2%88%EC%97%AD%EC%97%90-%EB%8C%80%ED%95%B4/</url>
      <content type="text"><![CDATA[[프로그램 개발과 관련된 영문 글의 번역에 대해]먼저 영어 원문을 번역하기 전에 정의를 해두고 싶어서 글을 쓰게 되었다.일단 개인적인 목표로 인해 프로그램 개발 영역에서 영어로 내용을 풀어서 설명하고 영어로 된 내용을 이해하기 위해서 영어공부가 선택이 아닌 필수가 되었다.사회 초년생 때에 다녔던 회사의 오너분은 개발하는 데 영어는 필요치 하지 않다고 했었다.그때에는 나도 동의를 했었고, 그랬기 때문에 그 회사에 몸담고 일을 할 수 있었다.하지만 지금은 아니다, 아니 그때도 아니었다.개발자로서 성장하고자 하는 생각을 하고 있다면 영어는 당연히 해야 하는 분야다.그 이유는 프로그램 개발이라는 것은 해외에서 시작됐고, 새로운 기술도 해외에서 더 먼저 발표되고 영어로 먼저 공유되기 때문이다.영어를 쓰지 않아도 되는 날은 오지 않는다.가령 번역기술이 아주 좋아져서 인터넷의 모든 글에 대해 실시간으로 번역할 수 있다 하더라도, 영어문장이 가지는 의미와 한국어가 가지는 의미는 다르기 때문에 같은 문장이어도영어로 읽을 때와 번역된 한국어로 읽을 때의 내용은 다르다.그렇기 때문에 개발자라면 영어는 당연히 해야 하는 영역이며, 하지 않으면 그 순간부터 도태되는 것이다.그리 하여 나는 영어 공부를 시작했고, 이제는 내가 가진 기술에 대해 영어로 설명할 수 있어야 하고,상대방이 영어로 설명하는 기술적인 내용에 대해 내가 이해할 수 있어야 한다.2018년 새해가 밝기도 했고, 매번 미루고 미루었던 IT 기술에 대한 영문의 번역을 이제는 시작하려고 한다.목표는 한 달에 1개의 프로그램 개발 업계의 영문을 번역하는 것이 목표지만, 지키든 지키지 못하든 꾸준히 작업 할 생각이다.– 2018년 1월 1일을 시작하며..#2018_새해_다짐]]></content>
      <categories>
        
          <category> translate </category>
        
      </categories>
      <tags>
        
          <tag> article </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[이상한모임, 연말정산, 회고, 이직]]></title>
      <url>/%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/2017/12/21/%EC%9D%B4%EC%83%81%ED%95%9C%EB%AA%A8%EC%9E%84-%EC%97%B0%EB%A7%90%EC%A0%95%EC%82%B0-%ED%9A%8C%EA%B3%A0-%EC%9D%B4%EC%A7%81/</url>
      <content type="text"><![CDATA[올해는 참 이래저래 힘든 한해였던 것 같다.이상한모임의 마지막 연말정산의 주제를 회고로 정한 덕분에,이렇게 글을 써본다.물론 누군가 볼일은 없을테지만.원래 목표대로라면 한단계 더 성장하고, 원하는 모습을 하고 있어야 하는데,무엇이 나를 성장하지 못하게 한건지 곰곰히 생각해본다.그 무엇 하나 내 마음처럼 안됐고, 그로 인해 만들어지는 그 힘든 마음을 애써 다잡으려고 수십번도 더 노력 했던 것 같다.그나마 위안이 되는건 새로운 목표를 다시 찾았다는 것?!.현재의 경력보다 실력이 현저하게 낮다는 점을 뼈저리게 느꼈고,더 위로 올라가고자 하는 욕구와 힘들고 지쳐서 심신이 피로한 상태가 지속되면서 찾아오는 공허함도 느꼈고,번 아웃이란 것도 제대로 경험 해보고, 엄청난 무기력감으로 아무것도 할 수 없는 지경까지 가보기도 하고,여러가지로 자괴감 느껴지는 한해였다.이제 정말 쉽지 않은 단계에 온 것 같아 마음이 무겁다.하지만 또 걸어가고 앞으로 나아가기 위해 하루를 살아가지만,지친 몸은 쉽게 회복되지는 않는 것 같다.올해 느꼈던 명예욕과 새로운 목표.이 두가지를 이루기 위해 한발씩 걸음마 배우듯이 하고는 있지만..더디다.발이 깊고 깊은 늪에 빠진 듯이 너무나도 더디다.천천히 한발씩이라도 앞으로 걸어가면많이 더디고 힘들더라도 나아갈 수는 있겠지.결국에는 나아가고 뒤를 돌아볼 날이 오겠지.2017년의 마지막 21일 새벽.]]></content>
      <categories>
        
          <category> 생각정리 </category>
        
      </categories>
      <tags>
        
          <tag> 준비 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] IT 트렌드 스페셜 리포트 2018]]></title>
      <url>/books/2017/12/18/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-IT-%ED%8A%B8%EB%A0%8C%EB%93%9C-%EC%8A%A4%ED%8E%98%EC%85%9C-%EB%A6%AC%ED%8F%AC%ED%8A%B8-2018/</url>
      <content type="text"><![CDATA[[서평][도서리뷰] IT 트렌드 스페셜 리포트사실 이 책을 처음 받고 나서 어차피 다 아는 내용일 거로 생각하며 다소 우습게 봤던 경향이 있다.하지만 첫 페이지부터 시작해서 계속해서 읽어나갈수록 그 생각은 나의 오만이 불러온 착각이었다는 것을 알기까지 오래 걸리지 않았다.나는 개발자다, 그 때문에 트렌드에 뒤처지지 않기 위해 관심을 항상 가지고 있고,새로운 기술이나 새로운 제품이 나오면 항상 인사이트 또는 아이디어를 얻기 위해 사용해 보곤 했고 또,생소한 내용도 아니었기 때문에 오만하게 생각했는지도 모르겠다.주제는 단순하다. 가트너의 10대 트렌드처럼 국내 상황에 맞게 2018년의 7가지 트렌드에 대해지금까지 발전해온 역사, 현 기술의 상황, 그리고 미래에는 어떻게 변화할지에 대한 글쓴이들의 고견이 담겨있다.책 내용에 나왔던 것 중에 가트너의 10대 트렌드같은 경우 국내의 상황과 맞지 않는다는 것에 대한 부분은 나도 상당히 동의하는 점이다.매번 10대 트렌드를 보고 있지만 실제로 그다음 해에 모든 트렌드가 주목받지는 않았으니까.IT 트렌드 스페셜 리포트는 압축하고 압축한 7가지 트렌드 기술에 대해 철저하게 국내 관점에서 다루고 있다.단점이 아니다. 구글이나 아마존 같은 거대 공룡기업이 앞서 기술의 트렌드를 이끌어 가고 시장을 지배하고 있긴 하지만국내의 특이한 구조 때문에 그런 세계적인 기업도 국내에선 절반을 넘는 것조차도 힘든 지배력을 가지고 있다.그 이유는 여러 가지 조건이 있다는 것을 독자도 잘 알고 있을 것이다.그 때문에 국내 상황에 맞게 기술력을 어느 정도로 유지해야 하는지 시장에 뛰어들기 좋은 시점이 언제인지에 대한 부분은가트너의 10대 트렌드 같은 리포트에서는 쉽게 찾기 힘든 것이 사실이다.국내의 환경을 제대로 설명해주고 해외의 거대기업들이 가지고 있는 전략과 앞으로 지향해야 하는 기술 수준에 대해서아주 상세히 다루면서 이 책은 그러한 부분의 갈증을 시원하게 해소해주고 있다.이 책을 적절한 조언자로 활용하여 국내의 상황에 맞게 기업들이 대응하고 틈새시장을 노린다면아무리 해외의 거대 공룡 기업이 날고 긴다 하더라도 분명 국내 대기업이 아닌 중소기업에도 승산이 있다고 생각이 든다.다만 개인적으로 아쉬웠던 점은 책의 취지에 따라 기술 얘기보다는 비즈니스적인 좀 더 넓게 보는 능력이 필요하다는 점이다.개인에 능력 여하에 따라 다르겠지만, 본인이 기술과 비즈니스의 융합 또는 비즈니스적인 그림을 그리기 힘든 사람이라면이 책의 활용도는 현저히 떨어질 것이다.사람에 따라서는 전혀 다른 세상의 얘기가 될 수도 있을 것이다.나의 경우 개발자로서 앞으로 어떤 새로운 기술을 익혀야 할지에 대한 인사이트를 얻고자 책을 보았지만,아주 큰 충격과 함께 “이건 무조건 해야 하겠다. “라는 정도의 느낌은 아니었기에 2% 부족한 느낌을 지울 수는 없었다.그런데도 미래의 비즈니스 전략을 세우려는 사람이나 기술적으로 어떤 부분이 향후 높은 가치를 생산할 수 있는지에 대한 인사이트를 얻기에는 상당히 만족스러운 책인 것은 부정할 수 없다.이 책 “IT 트렌드 스페셜 리포트” 는 [링크] 에서 확인할 수 있다.]]></content>
      <categories>
        
          <category> books </category>
        
      </categories>
      <tags>
        
          <tag> review </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] Node.js 6.x 블루프린트]]></title>
      <url>/books/2017/08/12/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-Node-js-6-x-%EB%B8%94%EB%A3%A8%ED%94%84%EB%A6%B0%ED%8A%B8/</url>
      <content type="text"><![CDATA[자바스크립트는 이제 더 이상 웹뷰에서 데이터를 검증하기 위해서 쓰는 Validation 용 언어가 아니다.구글에서 크롬브라우저에서 사용하는 V8 엔진을 개발하면서 자바스크립트 언어를 컴파일하는 시간을 빠르게 개선하면서 자바스크립트를 서버용 언어로 탈바꿈시켜버렸다.V8 엔진은 버전 업을 계속하면서 계속해서 컴파일 속도를 높이는 중이다.그 이후에 나온 첫 번째 언어가 바로 Node.js다.Node.js는 빠른 컴파일 속도를 지닌 V8 엔진을 동력 삼아 이벤트 기반, 논 블로킹 I/O 모델을 사용하여 자바스크립트를 훌륭한 서버 언어로 사용할 수 있게 제공하고 있다.이미 자바스크립트를 사용하여 개발해본 사람을 잘 알겠지만, 자바스크립트의 언어적 특성 덕분에 Node.js는 개발하기가 아주 까다로운 언어가 되어 버렸다.때문에 이미 개발된 많은 라이브러리를 사용해서 개발하지 않으면 많은 어려움이 따른다.“Node.js 6.x 블루프린트” 책은 이러한 부분의 어려움을 시원하게 긁어주고 있다.다양한 프로젝트를 각각의 스타일에 어울리는 라이브러리와 함께 사용하면서 Node.js와 NPM의 개발 생태계까지 함께 경험해볼 수 있다.앞에서도 얘기했듯이 이 책은 총 10개의 프로젝트를 가지고 Node.js에서 구현할 수 있는 많은 기능을 테스트하고 구현한다.가장 기본적인 웹 애플리케이션부터 시작해서 데이터베이스, MVC 패턴을 사용한 멀티 애플리케이션, 요즘 가장 핫 하다는 빅데이터에서 사용하는 몽고DB를 사용한 검색기능, RESTful API, Socket 통신 마지막으로 지속적 개발 프로세스를 위한 Docker를 이용한 통합 배포 시스템까지 정말 광범위하게 다룬다.이 책을 전체적으로 보면, Node.js에서 사용해볼 수 있는 거의 모든 것을 경험해 볼 수 있다.개인적으로 사용하면 딱 좋을 소규모의 웹 애플리케이션부터 몽고DB와 통합 배포 시스템들로 구성하는 대형 시스템까지 만들다 보면 어느새 NPM을 사용하는 Node.js 언어의 편리함에 푹 빠져 있을 것이다.모든 책이 그렇듯이, 이렇게 많은 내용을 담다 보니 이 책은 코드의 양이 3분의 2가 넘는다고 느껴질 정도로 책에 코드가 참 많다.이렇다 보니 책의 내용을 통해 Node.js의 기능을 파악하는 것보다 코드를 통해 테스트하고, 프로젝트가 완성되었을 때의 완성작을 확인하면서 기능을 확인할 수 밖에 없다.그래서 자연스럽게 책의 난이도가 올라가고 내용이 지루해지는 느낌을 지우기가 힘들다.기능의 언어적 이해 보다는 여러 기능을 어떻게 사용하는지 확인하고 그 기능들을 사용해 프로젝트로 완성하는 것이 이 책을 읽으면서 얻을 수 있는 이득이 아닐까 생각이 든다.다만, 이러한 책들은 책을 읽으면서 시스템이 동작하는 프로세스를 이해하기 힘들어 각각의 프로젝트가 완성되고 어떤 방식으로 동작하는지 이해하기 위해서는 추가로 시간을 들여 따로 공부해야 한다는 점이 단점이라면 단점이다.그런데도 이 책은 Node.js의 많은 부분을 아우르고 있는 것은 분명하다.만약에 본인이 프로젝트를 진행하면서 자바스크립트의 여러기능을 사용하려면 이 책 한 권만으로도 기능들을 확인하고 테스트하기에는 부족함이 없을 것 같다.많은 내용을 담고 있어 이 책 한권으로 모든 것을 이해하는 것은 어렵지만,많은 기능을 테스트하기 위해서라면 이 책 만한 것이 없는 것 같다.[Node.js] 6.x 블루프린트] 책의 내용은 [링크]에서 확인할 수 있다.]]></content>
      <categories>
        
          <category> Books </category>
        
      </categories>
      <tags>
        
          <tag> review </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 실전 스프링 부트 워크북]]></title>
      <url>/books/2017/07/21/%EB%8F%84%EC%84%9C%EB%A6%AC%EB%B7%B0-%EC%8B%A4%EC%A0%84-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%9B%8C%ED%81%AC%EB%B6%81/</url>
      <content type="text"><![CDATA[책 이름에 “실전”이라는 이름이 붙어 있을 정도로 이 책에는 수많은 실전 예제들이 빼곡하게 채워져 있다.자바 프레임워크 스프링부트가 처음 나왔을 때만 해도 나는 무거운 스프링을 조금 가볍게 만든 경량화 프레임워크라고만 생각했었다.이런 단편적인 생각으로 책에 접근했었는데 이 책은 어느 순간 책을 읽고 있는 내가 어서 빨리 스프링부트를 사용해보고 싶다는 생각에 사로잡힐 정도로 자세하고 이해하기 쉽도록 설명이 되어 있다.스프링부트가 만들어지게 된 이유부터 시작해서 스프링부트가 왜 좋은지, 궁극적으로 스프링부트를 사용해서 어떤 것을 할 수 있는지, 현재 자바 기반으로 구성된 많은 시스템에서 사용하고 있는 기술들을 스프링부트에 적용하기 위해서는 어떤 것을 하면 되는지, 사람으로 말하자면 발끝부터 머리끝까지 모든 부분을 설명해주고 있다.물론, 책 한 권에 스프링부트의 모든 내용을 담기는 부족해서 기술적으로 아주 깊은 단계까지 설명하지는 않지만, 이전의 많은 서적이 저지른 잘못인 수박 겉핥기식의 접근이 아니라 적절한 깊이를 가지며 친절하게 설명한 부분에 대해서는 정말 찬사 받을 만하다고 생각한다.이 책은 저자의 깊은 고민에서 나온 결과물이라고 생각하며, 스프링부트에 대해 이렇게 쉽게 접근할 수 있도록 책을 만들어준 저자와 역자에게 감사하다.특히 코드 내에 변경점에 대해 진하게 처리한 부분은 정말 책을 보는 내내 “고구마를 3개쯤 먹은 후에 먹는 사이다”같은 느낌을 선사해 주었다.스프링부트를 스프링에 빗대어 한 줄로 설명해보면 이렇다.“스프링이라는 자바 프레임워크는 강력하다, 스프링부트는 그 강력함에 편리함을 더해 개발자가 코딩할 일이 없을 정도다.”스프링은 분명히 강력한 프레임워크이며 대형 규모의 스케일까지 커버 할 수 있을 정도로 강력하다.그리고 자바의 새로운 기술 스택에 맞게 계속해서 기능이 추가되고 있다.스프링부트는 거기에 더해 코드 10줄 + XML 설정을 추가해야 하는 부분을 설정에 필요한 XML 내용은 전부 자동으로 처리하며, 실제로는 코드 2~3줄 정도로 스프링의 모든 기능을 완벽히 수행할 수 있다는 것이 정말 놀라웠다.책을 보면 마치 예전의 밥 아저씨처럼 “참 쉽죠”라며 얘기하는 느낌이다.하지만 밥 아저씨와 다른 점은, 정말 실제로도 쉽다는 것이다.스프링부트를 설명하는 쉬운 책을 꼽으라면 단연 이 책을 권하고 싶다.앞에서도 언급 했듯이 책을 보는 동안 내 머릿속을 채운 것은 “빨리 스프링부트를 사용해보고 싶다.” 뿐이었다.이제 책을 다 읽었으니 서비스에 적용해 보는 일만 남은 것 같다.보기 드물게 정말 좋은 책이라 생각하지만, 단점이라면 단점은 스프링을 모르는 사람이 스프링부트를 배우기에는 조금 부족하다는 생각이다.본디 스프링부트라는 프레임워크가 스프링의 기능을 편히 수행하기 위해 만들어졌다 보니 이러한 부분에 대해서는 배려가 조금 부족하지 않았나 생각해본다.프로그래밍 전공 서적 중 오랜만에 맘에 드는 책을 만나 기쁘게 공부 할 수 있었다.[실전 스프링 부트 워크북] 책의 자세한 내용은 [링크]에서 확인할 수 있다.]]></content>
      <categories>
        
          <category> Books </category>
        
      </categories>
      <tags>
        
          <tag> review </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[도서리뷰] 처음 시작하는 리액트]]></title>
      <url>/books/2017/07/03/%EB%A6%AC%EC%95%A1%ED%8A%B8-1/</url>
      <content type="text"><![CDATA[요즘 개발자들 사이에서 대세로 떠오른다고 해도 과언이 아닌 자바스크립트.그중 UI를 동적으로 빠르게 생성하기 위해 태어난 리액트.이 책은 리액트라 하는 자바스크립트 UI 라이브러리를 아직 접해보지 못한 사람들을 대상으로 리액트에 관해 많은 내용을 설명한다.초급과 중급을 대상으로 한 덕분에 처음부터 코드 설명보다는 리액트가 태어난 배경과 함께,리액트를 어떤 면에서 어떻게 사용하면 좋을지에 대해 상세히 다루고 있다.책의 전반에는 리액트를 사용하는 방법을 주로 다루고 있다면,책의 중 후반부터는 자바스크립트로 개발하는 방법론과 함께 디버깅 및 브라우저에 의존하지 않는 테스트 방법 등까지라이브러리 별로 깊지는 않지만 광범위하게 저자가 가지고 있는 자바스크립트 개발에 대해 노하우를 제공한다.수많은 자바스크립트 라이브러리 중에 어떤 것을 선택해서 개발하느냐에 따라서 많은 차이가 있을 텐데,이 책 한 권으로 기본은 가져갈 수 있는 셈이다.리액트를 사용하는 데 익숙지 않은 초보와 중급자들을 배려하여 꼭 필요한 내용을 적절한 깊이의 내용으로 꽉 채워,자바스크립트로 개발하는 것에 대해 익숙지 않은 사람들에게 많은 도움이 될 것으로 생각한다.마지막으로 부록에는 빠르게 업데이트되는 리액트에 맞춰 책이 쓰일 당시와 현재의 리액트가 어떻게 다른지에 대해서도 충분한 설명과 함께 내용을 할애하고 있어 개론서의 역할도 일부 해줄 수 있다고 생각이 든다.한 가지 아쉬운 점이라면 책 중간 소스코드를 비교하는 부분이 있는데, 해당 부분에 하이라이트 처리가 되어 있었다면 좀 더 독자를 위한 책이 되지 않았을까 생각한다.[처음 시작하는 리액트] 책의 자세한 내용은 [링크] 에서 확인 할 수 있다.]]></content>
      <categories>
        
          <category> Books </category>
        
      </categories>
      <tags>
        
          <tag> review </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[About MySQL Index problem]]></title>
      <url>/mysql/2016/12/21/About-MySQL-Index-problem/</url>
      <content type="text"><![CDATA[지난 월요일(2016년 12월 19일) 굉장히 특이한 경험을 했다.내 경험은 아니고, 직원중 한명이 회사 시스템이 설치된 서버에서 데이터가 update 되지 않는다는 얘기였다.문제는 에러가 전혀 발생하지 않는다는 점이다.데이터를 수정하는 UI 프로그램으로 해도 마찬가지고, 데이터베이스에 CLI로 직접 접속해도 마찬가지로 동작하지 않는 문제였다.그래서 나에게 혹시 경험이 있나 물어보러 온 것이었는데, 나도 그런 경험은 없었고 추측도 되지 않았다.처음에는 해당 테이블에 트리거가 걸려 있어 그 문제로 update가 되지 않는건지 생각 했으나 다시 원격하여 확인한 결과 트리거나 프로시저 등 아무것도 없었다.결국 회사 내에 데이터베이스에 가장 빠삭하신 부장님이 보시곤 인덱스가 깨져서 생긴 문제 같다고 하시며데이터베이스의 인덱스를 다시 만들어 보자고 하셨으나, 현재 운영중인 서버였기 때문에 인덱스를 제거하고 다시 생성하는 일은 할 수 없었다.그래서 찾은 방법이 아래의 명령어이다.mysql&gt;OPTIMIZE TABLE [테이블명]; 다행이도 해당 테이블에 100건 이하의 데이터만 존재하여 운영중에도 인덱스 재설정 명령어를 사용하여 인덱스를 재설정 할 수 있었다.인덱스를 재설정 하고 난 후 제대로 동작 하는 것을 확인 하였다.물론 내가 해결한 것은 아니었지만 이 문제를 해결하고 나서 혼자 곰곰히 생각해 보았다.내가 혼자서 작업 도중 이러한 문제가 발생하면 과연 나는 해결 할 수 있는가?아마도 상당히 많은 시간을 소모해서 해결하거나, 해결하지 못하고 머리만 쥐어짜고 있지 않았을까…?데이터베이스는 나름대로 잘 알고 있다고 생각하고 있었는데 아직 갈길이 먼듯 하다.]]></content>
      <categories>
        
          <category> MySQL </category>
        
      </categories>
      <tags>
        
          <tag> index </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[MySQL 계정 권한 부여 명령어]]></title>
      <url>/mysql/2016/12/06/MySQL-%EA%B3%84%EC%A0%95-%EA%B6%8C%ED%95%9C-%EB%B6%80%EC%97%AC-%EB%AA%85%EB%A0%B9%EC%96%B4/</url>
      <content type="text"><![CDATA[MySQL에서 권한 부여하는 명령어  MySQL에서 권한을 부여할 수 있는 계정으로 사용 가능한 명령어mysql&gt; grant ALL PRIVILEGES on {디비이름}.{테이블이름} to {계정}@{아이피} identified by {패스워드};]]></content>
      <categories>
        
          <category> MySQL </category>
        
      </categories>
      <tags>
        
          <tag> 명령어 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Window 10 원격접속 허용 방법]]></title>
      <url>/windows/2016/11/04/Window-10-%EC%9B%90%EA%B2%A9%EC%A0%91%EC%86%8D-%ED%97%88%EC%9A%A9/</url>
      <content type="text"><![CDATA[원격지에서 원격 접속 허용 방법.  시스템 속성에서 원격 연결 허용  방화벽 &gt; 고급 설정 &gt; 인바운드 규칙  인바운드 규칙에서 원격 데스크톱 속성의 고급 탭에서 공용 체크PS. 내부 내트워크망에서는 1번까지만 설정하면 접속 가능.]]></content>
      <categories>
        
          <category> Windows </category>
        
      </categories>
      <tags>
        
          <tag> 개발환경 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Crawling Engineer]]></title>
      <url>/think/2016/11/02/Crawling-Engineer/</url>
      <content type="text"><![CDATA[Crawling Engineer  Web에서 Data를 Crawling해서 원하는 형태에 맞게 Database에 가공하여 저장하고,원하는 형태의 데이터로 API를 제공해주는 역할을 하는 Engineer.기술 스택  http 프로토콜, TCP/IP와 UDP의 이해, RDBMS, NoSQL, 대용량 데이터 분석 및 처리의 이해  API와, Crawling 할 대상 데이터의 구조 이해 등등  대량의 데이터를 효율적으로 저장 하기 위한 Database의 구조에 대한 깊은 이해.  RDBMS와 NoSQL의 구조에 대한 이해를 바탕으로 한 효율적 쿼리 설계.]]></content>
      <categories>
        
          <category> Think </category>
        
      </categories>
      <tags>
        
          <tag> 개발 </tag>
        
          <tag> 직종 </tag>
        
          <tag> 분야 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Eclipse Resource Bundle Plugin]]></title>
      <url>/eclipse/plugin/2016/11/01/Eclipse-Resource-Bundle-Plugin/</url>
      <content type="text"><![CDATA[      Plugin 이름 : Eclipse ResourceBundle Plugin (Properties Plugin)        홈페이지 : http://eclipse-rbe.sourceforge.net/index.htm        설치 방법 : Eclipse의 plugin 폴더 내에 복사.  이클립스 개발 환경에서 properties Resource 다국어 처리시에 사용.]]></content>
      <categories>
        
          <category> Eclipse </category>
        
          <category> Plugin </category>
        
      </categories>
      <tags>
        
          <tag> 개발환경 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Linux 유용한 명령어]]></title>
      <url>/linux/2016/10/31/Linux-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%AA%85%EB%A0%B9%EC%96%B4/</url>
      <content type="text"><![CDATA[Linux 유용한 명령어.$ vi {filename}  리눅스 기본적인 편집기.  사용하다 보면 너무 편해서 다른 거 못쓴다.$ cd -  linux shell 작업 중 이전 디렉토리로 이동 시킨다.]]></content>
      <categories>
        
          <category> Linux </category>
        
      </categories>
      <tags>
        
          <tag> 명령어 </tag>
        
          <tag> 개발환경 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[JAVA 8 방향]]></title>
      <url>/think/2016/10/30/JAVA-8-%EB%B0%A9%ED%96%A5/</url>
      <content type="text"><![CDATA[자바가 앞으로 지향해야 할 방향이라 생각되는 항목들.  ReactiveX  옵저버패턴  스케쥴링  모나드  micro service architecture]]></content>
      <categories>
        
          <category> Think </category>
        
      </categories>
      <tags>
        
          <tag> 잡동사니 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
